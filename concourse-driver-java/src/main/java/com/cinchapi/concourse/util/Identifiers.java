/*
 * Copyright (c) 2013-2025 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cinchapi.concourse.util;

import java.security.SecureRandom;
import java.util.concurrent.ThreadLocalRandom;

import com.cinchapi.concourse.time.Time;

/**
 * A utility class that generates identifiers.
 * <p>
 * Identifiers generated by this class are 64-bit long values, suitable for use
 * as unique identifiers in distributed systems, databases, or scenarios where
 * uniqueness, randomness, or cryptographic strength are required.
 * </p>
 *
 * @author Jeff Nelson
 */
public final class Identifiers {

    /**
     * A cryptographically strong random number generator used to generate
     * secure random identifiers.
     */
    private static final SecureRandom SECURE_RANDOM = new SecureRandom();

    private Identifiers() {/* no-init */}

    /**
     * Generates the next sequential identifier.
     *
     * @return the next identifier
     */
    public static long next() {
        return Time.now();
    }

    /**
     * Generates a random identifier using a fast pseudo-random generator.
     *
     * @return a random identifier
     */
    public static long random() {
        return ThreadLocalRandom.current().nextLong();
    }

    /**
     * Generates a secure random identifier using a cryptographically strong
     * generator.
     *
     * @return a secure random identifier
     */
    public static long secureRandom() {
        return SECURE_RANDOM.nextLong();
    }

}

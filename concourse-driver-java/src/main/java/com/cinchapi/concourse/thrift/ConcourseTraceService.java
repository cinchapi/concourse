/*
 * Copyright (c) 2013-2020 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cinchapi.concourse.thrift;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-03-27")
public class ConcourseTraceService {

    public interface Iface {

        public java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> traceRecord(
                long record, com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment)
                throws com.cinchapi.concourse.thrift.SecurityException,
                com.cinchapi.concourse.thrift.TransactionException,
                com.cinchapi.concourse.thrift.PermissionException,
                org.apache.thrift.TException;

        public java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> traceRecords(
                java.util.List<java.lang.Long> records,
                com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment)
                throws com.cinchapi.concourse.thrift.SecurityException,
                com.cinchapi.concourse.thrift.TransactionException,
                com.cinchapi.concourse.thrift.PermissionException,
                org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void traceRecord(long record,
                com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment,
                org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> resultHandler)
                throws org.apache.thrift.TException;

        public void traceRecords(java.util.List<java.lang.Long> records,
                com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment,
                org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>> resultHandler)
                throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient
            implements Iface {
        public static class Factory
                implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                    org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot,
                org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> traceRecord(
                long record, com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment)
                throws com.cinchapi.concourse.thrift.SecurityException,
                com.cinchapi.concourse.thrift.TransactionException,
                com.cinchapi.concourse.thrift.PermissionException,
                org.apache.thrift.TException {
            send_traceRecord(record, creds, transaction, environment);
            return recv_traceRecord();
        }

        public void send_traceRecord(long record,
                com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment)
                throws org.apache.thrift.TException {
            traceRecord_args args = new traceRecord_args();
            args.setRecord(record);
            args.setCreds(creds);
            args.setTransaction(transaction);
            args.setEnvironment(environment);
            sendBase("traceRecord", args);
        }

        public java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> recv_traceRecord()
                throws com.cinchapi.concourse.thrift.SecurityException,
                com.cinchapi.concourse.thrift.TransactionException,
                com.cinchapi.concourse.thrift.PermissionException,
                org.apache.thrift.TException {
            traceRecord_result result = new traceRecord_result();
            receiveBase(result, "traceRecord");
            if(result.isSetSuccess()) {
                return result.success;
            }
            if(result.ex != null) {
                throw result.ex;
            }
            if(result.ex2 != null) {
                throw result.ex2;
            }
            if(result.ex3 != null) {
                throw result.ex3;
            }
            throw new org.apache.thrift.TApplicationException(
                    org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "traceRecord failed: unknown result");
        }

        public java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> traceRecords(
                java.util.List<java.lang.Long> records,
                com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment)
                throws com.cinchapi.concourse.thrift.SecurityException,
                com.cinchapi.concourse.thrift.TransactionException,
                com.cinchapi.concourse.thrift.PermissionException,
                org.apache.thrift.TException {
            send_traceRecords(records, creds, transaction, environment);
            return recv_traceRecords();
        }

        public void send_traceRecords(java.util.List<java.lang.Long> records,
                com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment)
                throws org.apache.thrift.TException {
            traceRecords_args args = new traceRecords_args();
            args.setRecords(records);
            args.setCreds(creds);
            args.setTransaction(transaction);
            args.setEnvironment(environment);
            sendBase("traceRecords", args);
        }

        public java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> recv_traceRecords()
                throws com.cinchapi.concourse.thrift.SecurityException,
                com.cinchapi.concourse.thrift.TransactionException,
                com.cinchapi.concourse.thrift.PermissionException,
                org.apache.thrift.TException {
            traceRecords_result result = new traceRecords_result();
            receiveBase(result, "traceRecords");
            if(result.isSetSuccess()) {
                return result.success;
            }
            if(result.ex != null) {
                throw result.ex;
            }
            if(result.ex2 != null) {
                throw result.ex2;
            }
            if(result.ex3 != null) {
                throw result.ex3;
            }
            throw new org.apache.thrift.TApplicationException(
                    org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "traceRecords failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient
            implements AsyncIface {
        public static class Factory implements
                org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(
                    org.apache.thrift.async.TAsyncClientManager clientManager,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(
                    org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager,
                        transport);
            }
        }

        public AsyncClient(
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.async.TAsyncClientManager clientManager,
                org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void traceRecord(long record,
                com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment,
                org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            traceRecord_call method_call = new traceRecord_call(record, creds,
                    transaction, environment, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class traceRecord_call extends
                org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> {
            private long record;
            private com.cinchapi.concourse.thrift.AccessToken creds;
            private com.cinchapi.concourse.thrift.TransactionToken transaction;
            private java.lang.String environment;

            public traceRecord_call(long record,
                    com.cinchapi.concourse.thrift.AccessToken creds,
                    com.cinchapi.concourse.thrift.TransactionToken transaction,
                    java.lang.String environment,
                    org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport)
                    throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.record = record;
                this.creds = creds;
                this.transaction = transaction;
                this.environment = environment;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                    throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
                        "traceRecord",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                traceRecord_args args = new traceRecord_args();
                args.setRecord(record);
                args.setCreds(creds);
                args.setTransaction(transaction);
                args.setEnvironment(environment);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> getResult()
                    throws com.cinchapi.concourse.thrift.SecurityException,
                    com.cinchapi.concourse.thrift.TransactionException,
                    com.cinchapi.concourse.thrift.PermissionException,
                    org.apache.thrift.TException {
                if(getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException(
                            "Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client
                        .getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_traceRecord();
            }
        }

        public void traceRecords(java.util.List<java.lang.Long> records,
                com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment,
                org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            traceRecords_call method_call = new traceRecords_call(records,
                    creds, transaction, environment, resultHandler, this,
                    ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class traceRecords_call extends
                org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>> {
            private java.util.List<java.lang.Long> records;
            private com.cinchapi.concourse.thrift.AccessToken creds;
            private com.cinchapi.concourse.thrift.TransactionToken transaction;
            private java.lang.String environment;

            public traceRecords_call(java.util.List<java.lang.Long> records,
                    com.cinchapi.concourse.thrift.AccessToken creds,
                    com.cinchapi.concourse.thrift.TransactionToken transaction,
                    java.lang.String environment,
                    org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport)
                    throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.records = records;
                this.creds = creds;
                this.transaction = transaction;
                this.environment = environment;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                    throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
                        "traceRecords",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                traceRecords_args args = new traceRecords_args();
                args.setRecords(records);
                args.setCreds(creds);
                args.setTransaction(transaction);
                args.setEnvironment(environment);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> getResult()
                    throws com.cinchapi.concourse.thrift.SecurityException,
                    com.cinchapi.concourse.thrift.TransactionException,
                    com.cinchapi.concourse.thrift.PermissionException,
                    org.apache.thrift.TException {
                if(getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException(
                            "Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client
                        .getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_traceRecords();
            }
        }

    }

    public static class Processor<I extends Iface>
            extends org.apache.thrift.TBaseProcessor<I>
            implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
                .getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(
                    new java.util.LinkedHashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface,
                java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
                java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("traceRecord", new traceRecord());
            processMap.put("traceRecords", new traceRecords());
            return processMap;
        }

        public static class traceRecord<I extends Iface>
                extends org.apache.thrift.ProcessFunction<I, traceRecord_args> {
            public traceRecord() {
                super("traceRecord");
            }

            public traceRecord_args getEmptyArgsInstance() {
                return new traceRecord_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public traceRecord_result getResult(I iface, traceRecord_args args)
                    throws org.apache.thrift.TException {
                traceRecord_result result = new traceRecord_result();
                try {
                    result.success = iface.traceRecord(args.record, args.creds,
                            args.transaction, args.environment);
                }
                catch (com.cinchapi.concourse.thrift.SecurityException ex) {
                    result.ex = ex;
                }
                catch (com.cinchapi.concourse.thrift.TransactionException ex2) {
                    result.ex2 = ex2;
                }
                catch (com.cinchapi.concourse.thrift.PermissionException ex3) {
                    result.ex3 = ex3;
                }
                return result;
            }
        }

        public static class traceRecords<I extends Iface> extends
                org.apache.thrift.ProcessFunction<I, traceRecords_args> {
            public traceRecords() {
                super("traceRecords");
            }

            public traceRecords_args getEmptyArgsInstance() {
                return new traceRecords_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public traceRecords_result getResult(I iface,
                    traceRecords_args args)
                    throws org.apache.thrift.TException {
                traceRecords_result result = new traceRecords_result();
                try {
                    result.success = iface.traceRecords(args.records,
                            args.creds, args.transaction, args.environment);
                }
                catch (com.cinchapi.concourse.thrift.SecurityException ex) {
                    result.ex = ex;
                }
                catch (com.cinchapi.concourse.thrift.TransactionException ex2) {
                    result.ex2 = ex2;
                }
                catch (com.cinchapi.concourse.thrift.PermissionException ex3) {
                    result.ex3 = ex3;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface>
            extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
                .getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(
                    new java.util.LinkedHashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface,
                java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
                java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("traceRecord", new traceRecord());
            processMap.put("traceRecords", new traceRecords());
            return processMap;
        }

        public static class traceRecord<I extends AsyncIface> extends
                org.apache.thrift.AsyncProcessFunction<I, traceRecord_args, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> {
            public traceRecord() {
                super("traceRecord");
            }

            public traceRecord_args getEmptyArgsInstance() {
                return new traceRecord_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> getResultHandler(
                    final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
                    final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>() {
                    public void onComplete(
                            java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> o) {
                        traceRecord_result result = new traceRecord_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result,
                                    org.apache.thrift.protocol.TMessageType.REPLY,
                                    seqid);
                        }
                        catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error(
                                    "TTransportException writing to internal frame buffer",
                                    e);
                            fb.close();
                        }
                        catch (java.lang.Exception e) {
                            _LOGGER.error(
                                    "Exception writing to internal frame buffer",
                                    e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        traceRecord_result result = new traceRecord_result();
                        if(e instanceof com.cinchapi.concourse.thrift.SecurityException) {
                            result.ex = (com.cinchapi.concourse.thrift.SecurityException) e;
                            result.setExIsSet(true);
                            msg = result;
                        }
                        else if(e instanceof com.cinchapi.concourse.thrift.TransactionException) {
                            result.ex2 = (com.cinchapi.concourse.thrift.TransactionException) e;
                            result.setEx2IsSet(true);
                            msg = result;
                        }
                        else if(e instanceof com.cinchapi.concourse.thrift.PermissionException) {
                            result.ex3 = (com.cinchapi.concourse.thrift.PermissionException) e;
                            result.setEx3IsSet(true);
                            msg = result;
                        }
                        else if(e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler",
                                    e);
                            fb.close();
                            return;
                        }
                        else if(e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error(
                                    "TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        }
                        else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        }
                        catch (java.lang.Exception ex) {
                            _LOGGER.error(
                                    "Exception writing to internal frame buffer",
                                    ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, traceRecord_args args,
                    org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> resultHandler)
                    throws org.apache.thrift.TException {
                iface.traceRecord(args.record, args.creds, args.transaction,
                        args.environment, resultHandler);
            }
        }

        public static class traceRecords<I extends AsyncIface> extends
                org.apache.thrift.AsyncProcessFunction<I, traceRecords_args, java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>> {
            public traceRecords() {
                super("traceRecords");
            }

            public traceRecords_args getEmptyArgsInstance() {
                return new traceRecords_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>> getResultHandler(
                    final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
                    final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>>() {
                    public void onComplete(
                            java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> o) {
                        traceRecords_result result = new traceRecords_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result,
                                    org.apache.thrift.protocol.TMessageType.REPLY,
                                    seqid);
                        }
                        catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error(
                                    "TTransportException writing to internal frame buffer",
                                    e);
                            fb.close();
                        }
                        catch (java.lang.Exception e) {
                            _LOGGER.error(
                                    "Exception writing to internal frame buffer",
                                    e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        traceRecords_result result = new traceRecords_result();
                        if(e instanceof com.cinchapi.concourse.thrift.SecurityException) {
                            result.ex = (com.cinchapi.concourse.thrift.SecurityException) e;
                            result.setExIsSet(true);
                            msg = result;
                        }
                        else if(e instanceof com.cinchapi.concourse.thrift.TransactionException) {
                            result.ex2 = (com.cinchapi.concourse.thrift.TransactionException) e;
                            result.setEx2IsSet(true);
                            msg = result;
                        }
                        else if(e instanceof com.cinchapi.concourse.thrift.PermissionException) {
                            result.ex3 = (com.cinchapi.concourse.thrift.PermissionException) e;
                            result.setEx3IsSet(true);
                            msg = result;
                        }
                        else if(e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler",
                                    e);
                            fb.close();
                            return;
                        }
                        else if(e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error(
                                    "TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        }
                        else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        }
                        catch (java.lang.Exception ex) {
                            _LOGGER.error(
                                    "Exception writing to internal frame buffer",
                                    ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, traceRecords_args args,
                    org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>> resultHandler)
                    throws org.apache.thrift.TException {
                iface.traceRecords(args.records, args.creds, args.transaction,
                        args.environment, resultHandler);
            }
        }

    }

    public static class traceRecord_args implements
            org.apache.thrift.TBase<traceRecord_args, traceRecord_args._Fields>,
            java.io.Serializable,
            Cloneable,
            Comparable<traceRecord_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "traceRecord_args");

        private static final org.apache.thrift.protocol.TField RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "record", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField CREDS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "creds", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "transaction", org.apache.thrift.protocol.TType.STRUCT,
                (short) 3);
        private static final org.apache.thrift.protocol.TField ENVIRONMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "environment", org.apache.thrift.protocol.TType.STRING,
                (short) 4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new traceRecord_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new traceRecord_argsTupleSchemeFactory();

        public long record; // required
        public @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.AccessToken creds; // required
        public @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.TransactionToken transaction; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String environment; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            RECORD((short) 1, "record"),
            CREDS((short) 2, "creds"),
            TRANSACTION((short) 3, "transaction"),
            ENVIRONMENT((short) 4, "environment");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.LinkedHashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // RECORD
                    return RECORD;
                case 2: // CREDS
                    return CREDS;
                case 3: // TRANSACTION
                    return TRANSACTION;
                case 4: // ENVIRONMENT
                    return ENVIRONMENT;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if(fields == null)
                    throw new java.lang.IllegalArgumentException(
                            "Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __RECORD_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.RECORD,
                    new org.apache.thrift.meta_data.FieldMetaData("record",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(
                                    org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.CREDS,
                    new org.apache.thrift.meta_data.FieldMetaData("creds",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.StructMetaData(
                                    org.apache.thrift.protocol.TType.STRUCT,
                                    com.cinchapi.concourse.thrift.AccessToken.class)));
            tmpMap.put(_Fields.TRANSACTION,
                    new org.apache.thrift.meta_data.FieldMetaData("transaction",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.StructMetaData(
                                    org.apache.thrift.protocol.TType.STRUCT,
                                    com.cinchapi.concourse.thrift.TransactionToken.class)));
            tmpMap.put(_Fields.ENVIRONMENT,
                    new org.apache.thrift.meta_data.FieldMetaData("environment",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(
                                    org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                    .addStructMetaDataMap(traceRecord_args.class, metaDataMap);
        }

        public traceRecord_args() {}

        public traceRecord_args(long record,
                com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment) {
            this();
            this.record = record;
            setRecordIsSet(true);
            this.creds = creds;
            this.transaction = transaction;
            this.environment = environment;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public traceRecord_args(traceRecord_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.record = other.record;
            if(other.isSetCreds()) {
                this.creds = new com.cinchapi.concourse.thrift.AccessToken(
                        other.creds);
            }
            if(other.isSetTransaction()) {
                this.transaction = new com.cinchapi.concourse.thrift.TransactionToken(
                        other.transaction);
            }
            if(other.isSetEnvironment()) {
                this.environment = other.environment;
            }
        }

        public traceRecord_args deepCopy() {
            return new traceRecord_args(this);
        }

        @Override
        public void clear() {
            setRecordIsSet(false);
            this.record = 0;
            this.creds = null;
            this.transaction = null;
            this.environment = null;
        }

        public long getRecord() {
            return this.record;
        }

        public traceRecord_args setRecord(long record) {
            this.record = record;
            setRecordIsSet(true);
            return this;
        }

        public void unsetRecord() {
            __isset_bitfield = org.apache.thrift.EncodingUtils
                    .clearBit(__isset_bitfield, __RECORD_ISSET_ID);
        }

        /**
         * Returns true if field record is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetRecord() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield,
                    __RECORD_ISSET_ID);
        }

        public void setRecordIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils
                    .setBit(__isset_bitfield, __RECORD_ISSET_ID, value);
        }

        @org.apache.thrift.annotation.Nullable
        public com.cinchapi.concourse.thrift.AccessToken getCreds() {
            return this.creds;
        }

        public traceRecord_args setCreds(
                @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.AccessToken creds) {
            this.creds = creds;
            return this;
        }

        public void unsetCreds() {
            this.creds = null;
        }

        /**
         * Returns true if field creds is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetCreds() {
            return this.creds != null;
        }

        public void setCredsIsSet(boolean value) {
            if(!value) {
                this.creds = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.cinchapi.concourse.thrift.TransactionToken getTransaction() {
            return this.transaction;
        }

        public traceRecord_args setTransaction(
                @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.TransactionToken transaction) {
            this.transaction = transaction;
            return this;
        }

        public void unsetTransaction() {
            this.transaction = null;
        }

        /**
         * Returns true if field transaction is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetTransaction() {
            return this.transaction != null;
        }

        public void setTransactionIsSet(boolean value) {
            if(!value) {
                this.transaction = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getEnvironment() {
            return this.environment;
        }

        public traceRecord_args setEnvironment(
                @org.apache.thrift.annotation.Nullable java.lang.String environment) {
            this.environment = environment;
            return this;
        }

        public void unsetEnvironment() {
            this.environment = null;
        }

        /**
         * Returns true if field environment is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetEnvironment() {
            return this.environment != null;
        }

        public void setEnvironmentIsSet(boolean value) {
            if(!value) {
                this.environment = null;
            }
        }

        public void setFieldValue(_Fields field,
                @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            case RECORD:
                if(value == null) {
                    unsetRecord();
                }
                else {
                    setRecord((java.lang.Long) value);
                }
                break;

            case CREDS:
                if(value == null) {
                    unsetCreds();
                }
                else {
                    setCreds((com.cinchapi.concourse.thrift.AccessToken) value);
                }
                break;

            case TRANSACTION:
                if(value == null) {
                    unsetTransaction();
                }
                else {
                    setTransaction(
                            (com.cinchapi.concourse.thrift.TransactionToken) value);
                }
                break;

            case ENVIRONMENT:
                if(value == null) {
                    unsetEnvironment();
                }
                else {
                    setEnvironment((java.lang.String) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            case RECORD:
                return getRecord();

            case CREDS:
                return getCreds();

            case TRANSACTION:
                return getTransaction();

            case ENVIRONMENT:
                return getEnvironment();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if(field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            case RECORD:
                return isSetRecord();
            case CREDS:
                return isSetCreds();
            case TRANSACTION:
                return isSetTransaction();
            case ENVIRONMENT:
                return isSetEnvironment();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if(that == null)
                return false;
            if(that instanceof traceRecord_args)
                return this.equals((traceRecord_args) that);
            return false;
        }

        public boolean equals(traceRecord_args that) {
            if(that == null)
                return false;
            if(this == that)
                return true;

            boolean this_present_record = true;
            boolean that_present_record = true;
            if(this_present_record || that_present_record) {
                if(!(this_present_record && that_present_record))
                    return false;
                if(this.record != that.record)
                    return false;
            }

            boolean this_present_creds = true && this.isSetCreds();
            boolean that_present_creds = true && that.isSetCreds();
            if(this_present_creds || that_present_creds) {
                if(!(this_present_creds && that_present_creds))
                    return false;
                if(!this.creds.equals(that.creds))
                    return false;
            }

            boolean this_present_transaction = true && this.isSetTransaction();
            boolean that_present_transaction = true && that.isSetTransaction();
            if(this_present_transaction || that_present_transaction) {
                if(!(this_present_transaction && that_present_transaction))
                    return false;
                if(!this.transaction.equals(that.transaction))
                    return false;
            }

            boolean this_present_environment = true && this.isSetEnvironment();
            boolean that_present_environment = true && that.isSetEnvironment();
            if(this_present_environment || that_present_environment) {
                if(!(this_present_environment && that_present_environment))
                    return false;
                if(!this.environment.equals(that.environment))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191
                    + org.apache.thrift.TBaseHelper.hashCode(record);

            hashCode = hashCode * 8191 + ((isSetCreds()) ? 131071 : 524287);
            if(isSetCreds())
                hashCode = hashCode * 8191 + creds.hashCode();

            hashCode = hashCode * 8191
                    + ((isSetTransaction()) ? 131071 : 524287);
            if(isSetTransaction())
                hashCode = hashCode * 8191 + transaction.hashCode();

            hashCode = hashCode * 8191
                    + ((isSetEnvironment()) ? 131071 : 524287);
            if(isSetEnvironment())
                hashCode = hashCode * 8191 + environment.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(traceRecord_args other) {
            if(!getClass().equals(other.getClass())) {
                return getClass().getName()
                        .compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetRecord())
                    .compareTo(other.isSetRecord());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetRecord()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.record, other.record);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCreds())
                    .compareTo(other.isSetCreds());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetCreds()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.creds, other.creds);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTransaction())
                    .compareTo(other.isSetTransaction());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetTransaction()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.transaction, other.transaction);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEnvironment())
                    .compareTo(other.isSetEnvironment());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetEnvironment()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.environment, other.environment);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
                throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
                throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder(
                    "traceRecord_args(");
            boolean first = true;

            sb.append("record:");
            sb.append(this.record);
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("creds:");
            if(this.creds == null) {
                sb.append("null");
            }
            else {
                sb.append(this.creds);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("transaction:");
            if(this.transaction == null) {
                sb.append("null");
            }
            else {
                sb.append(this.transaction);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("environment:");
            if(this.environment == null) {
                sb.append("null");
            }
            else {
                sb.append(this.environment);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if(creds != null) {
                creds.validate();
            }
            if(transaction != null) {
                transaction.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out)
                throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(
                                out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
                throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java
                // serialization is wacky, and doesn't call the default
                // constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(
                                in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class traceRecord_argsStandardSchemeFactory
                implements org.apache.thrift.scheme.SchemeFactory {
            public traceRecord_argsStandardScheme getScheme() {
                return new traceRecord_argsStandardScheme();
            }
        }

        private static class traceRecord_argsStandardScheme extends
                org.apache.thrift.scheme.StandardScheme<traceRecord_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                    traceRecord_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if(schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // RECORD
                        if(schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.record = iprot.readI64();
                            struct.setRecordIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 2: // CREDS
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.creds = new com.cinchapi.concourse.thrift.AccessToken();
                            struct.creds.read(iprot);
                            struct.setCredsIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 3: // TRANSACTION
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.transaction = new com.cinchapi.concourse.thrift.TransactionToken();
                            struct.transaction.read(iprot);
                            struct.setTransactionIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 4: // ENVIRONMENT
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.environment = iprot.readString();
                            struct.setEnvironmentIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                    traceRecord_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(RECORD_FIELD_DESC);
                oprot.writeI64(struct.record);
                oprot.writeFieldEnd();
                if(struct.creds != null) {
                    oprot.writeFieldBegin(CREDS_FIELD_DESC);
                    struct.creds.write(oprot);
                    oprot.writeFieldEnd();
                }
                if(struct.transaction != null) {
                    oprot.writeFieldBegin(TRANSACTION_FIELD_DESC);
                    struct.transaction.write(oprot);
                    oprot.writeFieldEnd();
                }
                if(struct.environment != null) {
                    oprot.writeFieldBegin(ENVIRONMENT_FIELD_DESC);
                    oprot.writeString(struct.environment);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class traceRecord_argsTupleSchemeFactory
                implements org.apache.thrift.scheme.SchemeFactory {
            public traceRecord_argsTupleScheme getScheme() {
                return new traceRecord_argsTupleScheme();
            }
        }

        private static class traceRecord_argsTupleScheme
                extends org.apache.thrift.scheme.TupleScheme<traceRecord_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                    traceRecord_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if(struct.isSetRecord()) {
                    optionals.set(0);
                }
                if(struct.isSetCreds()) {
                    optionals.set(1);
                }
                if(struct.isSetTransaction()) {
                    optionals.set(2);
                }
                if(struct.isSetEnvironment()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if(struct.isSetRecord()) {
                    oprot.writeI64(struct.record);
                }
                if(struct.isSetCreds()) {
                    struct.creds.write(oprot);
                }
                if(struct.isSetTransaction()) {
                    struct.transaction.write(oprot);
                }
                if(struct.isSetEnvironment()) {
                    oprot.writeString(struct.environment);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                    traceRecord_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if(incoming.get(0)) {
                    struct.record = iprot.readI64();
                    struct.setRecordIsSet(true);
                }
                if(incoming.get(1)) {
                    struct.creds = new com.cinchapi.concourse.thrift.AccessToken();
                    struct.creds.read(iprot);
                    struct.setCredsIsSet(true);
                }
                if(incoming.get(2)) {
                    struct.transaction = new com.cinchapi.concourse.thrift.TransactionToken();
                    struct.transaction.read(iprot);
                    struct.setTransactionIsSet(true);
                }
                if(incoming.get(3)) {
                    struct.environment = iprot.readString();
                    struct.setEnvironmentIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
                org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class
                    .equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
                            : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class traceRecord_result implements
            org.apache.thrift.TBase<traceRecord_result, traceRecord_result._Fields>,
            java.io.Serializable,
            Cloneable,
            Comparable<traceRecord_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "traceRecord_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.MAP, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "ex2", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField EX3_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "ex3", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new traceRecord_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new traceRecord_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> success; // required
        public @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.SecurityException ex; // required
        public @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.TransactionException ex2; // required
        public @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.PermissionException ex3; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex"),
            EX2((short) 2, "ex2"),
            EX3((short) 3, "ex3");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.LinkedHashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // EX
                    return EX;
                case 2: // EX2
                    return EX2;
                case 3: // EX3
                    return EX3;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if(fields == null)
                    throw new java.lang.IllegalArgumentException(
                            "Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.MapMetaData(
                                    org.apache.thrift.protocol.TType.MAP,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING),
                                    new org.apache.thrift.meta_data.SetMetaData(
                                            org.apache.thrift.protocol.TType.SET,
                                            new org.apache.thrift.meta_data.FieldValueMetaData(
                                                    org.apache.thrift.protocol.TType.I64)))));
            tmpMap.put(_Fields.EX,
                    new org.apache.thrift.meta_data.FieldMetaData("ex",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.StructMetaData(
                                    org.apache.thrift.protocol.TType.STRUCT,
                                    com.cinchapi.concourse.thrift.SecurityException.class)));
            tmpMap.put(_Fields.EX2,
                    new org.apache.thrift.meta_data.FieldMetaData("ex2",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.StructMetaData(
                                    org.apache.thrift.protocol.TType.STRUCT,
                                    com.cinchapi.concourse.thrift.TransactionException.class)));
            tmpMap.put(_Fields.EX3,
                    new org.apache.thrift.meta_data.FieldMetaData("ex3",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.StructMetaData(
                                    org.apache.thrift.protocol.TType.STRUCT,
                                    com.cinchapi.concourse.thrift.PermissionException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                    traceRecord_result.class, metaDataMap);
        }

        public traceRecord_result() {}

        public traceRecord_result(
                java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> success,
                com.cinchapi.concourse.thrift.SecurityException ex,
                com.cinchapi.concourse.thrift.TransactionException ex2,
                com.cinchapi.concourse.thrift.PermissionException ex3) {
            this();
            this.success = success;
            this.ex = ex;
            this.ex2 = ex2;
            this.ex3 = ex3;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public traceRecord_result(traceRecord_result other) {
            if(other.isSetSuccess()) {
                java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> __this__success = new java.util.LinkedHashMap<java.lang.String, java.util.Set<java.lang.Long>>(
                        other.success.size());
                for (java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.Long>> other_element : other.success
                        .entrySet()) {

                    java.lang.String other_element_key = other_element.getKey();
                    java.util.Set<java.lang.Long> other_element_value = other_element
                            .getValue();

                    java.lang.String __this__success_copy_key = other_element_key;

                    java.util.Set<java.lang.Long> __this__success_copy_value = new java.util.LinkedHashSet<java.lang.Long>(
                            other_element_value);

                    __this__success.put(__this__success_copy_key,
                            __this__success_copy_value);
                }
                this.success = __this__success;
            }
            if(other.isSetEx()) {
                this.ex = new com.cinchapi.concourse.thrift.SecurityException(
                        other.ex);
            }
            if(other.isSetEx2()) {
                this.ex2 = new com.cinchapi.concourse.thrift.TransactionException(
                        other.ex2);
            }
            if(other.isSetEx3()) {
                this.ex3 = new com.cinchapi.concourse.thrift.PermissionException(
                        other.ex3);
            }
        }

        public traceRecord_result deepCopy() {
            return new traceRecord_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
            this.ex2 = null;
            this.ex3 = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(java.lang.String key,
                java.util.Set<java.lang.Long> val) {
            if(this.success == null) {
                this.success = new java.util.LinkedHashMap<java.lang.String, java.util.Set<java.lang.Long>>();
            }
            this.success.put(key, val);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> getSuccess() {
            return this.success;
        }

        public traceRecord_result setSuccess(
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if(!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.cinchapi.concourse.thrift.SecurityException getEx() {
            return this.ex;
        }

        public traceRecord_result setEx(
                @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.SecurityException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /**
         * Returns true if field ex is set (has been assigned a value) and false
         * otherwise
         */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if(!value) {
                this.ex = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.cinchapi.concourse.thrift.TransactionException getEx2() {
            return this.ex2;
        }

        public traceRecord_result setEx2(
                @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.TransactionException ex2) {
            this.ex2 = ex2;
            return this;
        }

        public void unsetEx2() {
            this.ex2 = null;
        }

        /**
         * Returns true if field ex2 is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetEx2() {
            return this.ex2 != null;
        }

        public void setEx2IsSet(boolean value) {
            if(!value) {
                this.ex2 = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.cinchapi.concourse.thrift.PermissionException getEx3() {
            return this.ex3;
        }

        public traceRecord_result setEx3(
                @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.PermissionException ex3) {
            this.ex3 = ex3;
            return this;
        }

        public void unsetEx3() {
            this.ex3 = null;
        }

        /**
         * Returns true if field ex3 is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetEx3() {
            return this.ex3 != null;
        }

        public void setEx3IsSet(boolean value) {
            if(!value) {
                this.ex3 = null;
            }
        }

        public void setFieldValue(_Fields field,
                @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            case SUCCESS:
                if(value == null) {
                    unsetSuccess();
                }
                else {
                    setSuccess(
                            (java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>) value);
                }
                break;

            case EX:
                if(value == null) {
                    unsetEx();
                }
                else {
                    setEx((com.cinchapi.concourse.thrift.SecurityException) value);
                }
                break;

            case EX2:
                if(value == null) {
                    unsetEx2();
                }
                else {
                    setEx2((com.cinchapi.concourse.thrift.TransactionException) value);
                }
                break;

            case EX3:
                if(value == null) {
                    unsetEx3();
                }
                else {
                    setEx3((com.cinchapi.concourse.thrift.PermissionException) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case EX:
                return getEx();

            case EX2:
                return getEx2();

            case EX3:
                return getEx3();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if(field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case EX:
                return isSetEx();
            case EX2:
                return isSetEx2();
            case EX3:
                return isSetEx3();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if(that == null)
                return false;
            if(that instanceof traceRecord_result)
                return this.equals((traceRecord_result) that);
            return false;
        }

        public boolean equals(traceRecord_result that) {
            if(that == null)
                return false;
            if(this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if(this_present_success || that_present_success) {
                if(!(this_present_success && that_present_success))
                    return false;
                if(!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if(this_present_ex || that_present_ex) {
                if(!(this_present_ex && that_present_ex))
                    return false;
                if(!this.ex.equals(that.ex))
                    return false;
            }

            boolean this_present_ex2 = true && this.isSetEx2();
            boolean that_present_ex2 = true && that.isSetEx2();
            if(this_present_ex2 || that_present_ex2) {
                if(!(this_present_ex2 && that_present_ex2))
                    return false;
                if(!this.ex2.equals(that.ex2))
                    return false;
            }

            boolean this_present_ex3 = true && this.isSetEx3();
            boolean that_present_ex3 = true && that.isSetEx3();
            if(this_present_ex3 || that_present_ex3) {
                if(!(this_present_ex3 && that_present_ex3))
                    return false;
                if(!this.ex3.equals(that.ex3))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if(isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if(isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
            if(isSetEx2())
                hashCode = hashCode * 8191 + ex2.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx3()) ? 131071 : 524287);
            if(isSetEx3())
                hashCode = hashCode * 8191 + ex3.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(traceRecord_result other) {
            if(!getClass().equals(other.getClass())) {
                return getClass().getName()
                        .compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess())
                    .compareTo(other.isSetSuccess());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.success, other.success);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEx())
                    .compareTo(other.isSetEx());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.ex, other.ex);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEx2())
                    .compareTo(other.isSetEx2());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetEx2()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.ex2, other.ex2);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEx3())
                    .compareTo(other.isSetEx3());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetEx3()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.ex3, other.ex3);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
                throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
                throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder(
                    "traceRecord_result(");
            boolean first = true;

            sb.append("success:");
            if(this.success == null) {
                sb.append("null");
            }
            else {
                sb.append(this.success);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("ex:");
            if(this.ex == null) {
                sb.append("null");
            }
            else {
                sb.append(this.ex);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("ex2:");
            if(this.ex2 == null) {
                sb.append("null");
            }
            else {
                sb.append(this.ex2);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("ex3:");
            if(this.ex3 == null) {
                sb.append("null");
            }
            else {
                sb.append(this.ex3);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out)
                throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(
                                out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
                throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(
                                in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class traceRecord_resultStandardSchemeFactory
                implements org.apache.thrift.scheme.SchemeFactory {
            public traceRecord_resultStandardScheme getScheme() {
                return new traceRecord_resultStandardScheme();
            }
        }

        private static class traceRecord_resultStandardScheme extends
                org.apache.thrift.scheme.StandardScheme<traceRecord_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                    traceRecord_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if(schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if(schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map0 = iprot
                                        .readMapBegin();
                                struct.success = new java.util.LinkedHashMap<java.lang.String, java.util.Set<java.lang.Long>>(
                                        2 * _map0.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                                @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> _val2;
                                for (int _i3 = 0; _i3 < _map0.size; ++_i3) {
                                    _key1 = iprot.readString();
                                    {
                                        org.apache.thrift.protocol.TSet _set4 = iprot
                                                .readSetBegin();
                                        _val2 = new java.util.LinkedHashSet<java.lang.Long>(
                                                2 * _set4.size);
                                        long _elem5;
                                        for (int _i6 = 0; _i6 < _set4.size; ++_i6) {
                                            _elem5 = iprot.readI64();
                                            _val2.add(_elem5);
                                        }
                                        iprot.readSetEnd();
                                    }
                                    struct.success.put(_key1, _val2);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setSuccessIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 1: // EX
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.ex = new com.cinchapi.concourse.thrift.SecurityException();
                            struct.ex.read(iprot);
                            struct.setExIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 2: // EX2
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.ex2 = new com.cinchapi.concourse.thrift.TransactionException();
                            struct.ex2.read(iprot);
                            struct.setEx2IsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 3: // EX3
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.ex3 = new com.cinchapi.concourse.thrift.PermissionException();
                            struct.ex3.read(iprot);
                            struct.setEx3IsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                    traceRecord_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if(struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(
                                org.apache.thrift.protocol.TType.STRING,
                                org.apache.thrift.protocol.TType.SET,
                                struct.success.size()));
                        for (java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.Long>> _iter7 : struct.success
                                .entrySet()) {
                            oprot.writeString(_iter7.getKey());
                            {
                                oprot.writeSetBegin(
                                        new org.apache.thrift.protocol.TSet(
                                                org.apache.thrift.protocol.TType.I64,
                                                _iter7.getValue().size()));
                                for (long _iter8 : _iter7.getValue()) {
                                    oprot.writeI64(_iter8);
                                }
                                oprot.writeSetEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if(struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                if(struct.ex2 != null) {
                    oprot.writeFieldBegin(EX2_FIELD_DESC);
                    struct.ex2.write(oprot);
                    oprot.writeFieldEnd();
                }
                if(struct.ex3 != null) {
                    oprot.writeFieldBegin(EX3_FIELD_DESC);
                    struct.ex3.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class traceRecord_resultTupleSchemeFactory
                implements org.apache.thrift.scheme.SchemeFactory {
            public traceRecord_resultTupleScheme getScheme() {
                return new traceRecord_resultTupleScheme();
            }
        }

        private static class traceRecord_resultTupleScheme extends
                org.apache.thrift.scheme.TupleScheme<traceRecord_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                    traceRecord_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if(struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if(struct.isSetEx()) {
                    optionals.set(1);
                }
                if(struct.isSetEx2()) {
                    optionals.set(2);
                }
                if(struct.isSetEx3()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if(struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.Long>> _iter9 : struct.success
                                .entrySet()) {
                            oprot.writeString(_iter9.getKey());
                            {
                                oprot.writeI32(_iter9.getValue().size());
                                for (long _iter10 : _iter9.getValue()) {
                                    oprot.writeI64(_iter10);
                                }
                            }
                        }
                    }
                }
                if(struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
                if(struct.isSetEx2()) {
                    struct.ex2.write(oprot);
                }
                if(struct.isSetEx3()) {
                    struct.ex3.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                    traceRecord_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if(incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(
                                org.apache.thrift.protocol.TType.STRING,
                                org.apache.thrift.protocol.TType.SET,
                                iprot.readI32());
                        struct.success = new java.util.LinkedHashMap<java.lang.String, java.util.Set<java.lang.Long>>(
                                2 * _map11.size);
                        @org.apache.thrift.annotation.Nullable java.lang.String _key12;
                        @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> _val13;
                        for (int _i14 = 0; _i14 < _map11.size; ++_i14) {
                            _key12 = iprot.readString();
                            {
                                org.apache.thrift.protocol.TSet _set15 = new org.apache.thrift.protocol.TSet(
                                        org.apache.thrift.protocol.TType.I64,
                                        iprot.readI32());
                                _val13 = new java.util.LinkedHashSet<java.lang.Long>(
                                        2 * _set15.size);
                                long _elem16;
                                for (int _i17 = 0; _i17 < _set15.size; ++_i17) {
                                    _elem16 = iprot.readI64();
                                    _val13.add(_elem16);
                                }
                            }
                            struct.success.put(_key12, _val13);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if(incoming.get(1)) {
                    struct.ex = new com.cinchapi.concourse.thrift.SecurityException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
                if(incoming.get(2)) {
                    struct.ex2 = new com.cinchapi.concourse.thrift.TransactionException();
                    struct.ex2.read(iprot);
                    struct.setEx2IsSet(true);
                }
                if(incoming.get(3)) {
                    struct.ex3 = new com.cinchapi.concourse.thrift.PermissionException();
                    struct.ex3.read(iprot);
                    struct.setEx3IsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
                org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class
                    .equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
                            : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class traceRecords_args implements
            org.apache.thrift.TBase<traceRecords_args, traceRecords_args._Fields>,
            java.io.Serializable,
            Cloneable,
            Comparable<traceRecords_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "traceRecords_args");

        private static final org.apache.thrift.protocol.TField RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "records", org.apache.thrift.protocol.TType.LIST, (short) 1);
        private static final org.apache.thrift.protocol.TField CREDS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "creds", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "transaction", org.apache.thrift.protocol.TType.STRUCT,
                (short) 3);
        private static final org.apache.thrift.protocol.TField ENVIRONMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "environment", org.apache.thrift.protocol.TType.STRING,
                (short) 4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new traceRecords_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new traceRecords_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> records; // required
        public @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.AccessToken creds; // required
        public @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.TransactionToken transaction; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String environment; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            RECORDS((short) 1, "records"),
            CREDS((short) 2, "creds"),
            TRANSACTION((short) 3, "transaction"),
            ENVIRONMENT((short) 4, "environment");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.LinkedHashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // RECORDS
                    return RECORDS;
                case 2: // CREDS
                    return CREDS;
                case 3: // TRANSACTION
                    return TRANSACTION;
                case 4: // ENVIRONMENT
                    return ENVIRONMENT;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if(fields == null)
                    throw new java.lang.IllegalArgumentException(
                            "Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.RECORDS,
                    new org.apache.thrift.meta_data.FieldMetaData("records",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(
                                    org.apache.thrift.protocol.TType.LIST,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.I64))));
            tmpMap.put(_Fields.CREDS,
                    new org.apache.thrift.meta_data.FieldMetaData("creds",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.StructMetaData(
                                    org.apache.thrift.protocol.TType.STRUCT,
                                    com.cinchapi.concourse.thrift.AccessToken.class)));
            tmpMap.put(_Fields.TRANSACTION,
                    new org.apache.thrift.meta_data.FieldMetaData("transaction",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.StructMetaData(
                                    org.apache.thrift.protocol.TType.STRUCT,
                                    com.cinchapi.concourse.thrift.TransactionToken.class)));
            tmpMap.put(_Fields.ENVIRONMENT,
                    new org.apache.thrift.meta_data.FieldMetaData("environment",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(
                                    org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                    .addStructMetaDataMap(traceRecords_args.class, metaDataMap);
        }

        public traceRecords_args() {}

        public traceRecords_args(java.util.List<java.lang.Long> records,
                com.cinchapi.concourse.thrift.AccessToken creds,
                com.cinchapi.concourse.thrift.TransactionToken transaction,
                java.lang.String environment) {
            this();
            this.records = records;
            this.creds = creds;
            this.transaction = transaction;
            this.environment = environment;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public traceRecords_args(traceRecords_args other) {
            if(other.isSetRecords()) {
                java.util.List<java.lang.Long> __this__records = new java.util.ArrayList<java.lang.Long>(
                        other.records);
                this.records = __this__records;
            }
            if(other.isSetCreds()) {
                this.creds = new com.cinchapi.concourse.thrift.AccessToken(
                        other.creds);
            }
            if(other.isSetTransaction()) {
                this.transaction = new com.cinchapi.concourse.thrift.TransactionToken(
                        other.transaction);
            }
            if(other.isSetEnvironment()) {
                this.environment = other.environment;
            }
        }

        public traceRecords_args deepCopy() {
            return new traceRecords_args(this);
        }

        @Override
        public void clear() {
            this.records = null;
            this.creds = null;
            this.transaction = null;
            this.environment = null;
        }

        public int getRecordsSize() {
            return (this.records == null) ? 0 : this.records.size();
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Iterator<java.lang.Long> getRecordsIterator() {
            return (this.records == null) ? null : this.records.iterator();
        }

        public void addToRecords(long elem) {
            if(this.records == null) {
                this.records = new java.util.ArrayList<java.lang.Long>();
            }
            this.records.add(elem);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.List<java.lang.Long> getRecords() {
            return this.records;
        }

        public traceRecords_args setRecords(
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> records) {
            this.records = records;
            return this;
        }

        public void unsetRecords() {
            this.records = null;
        }

        /**
         * Returns true if field records is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetRecords() {
            return this.records != null;
        }

        public void setRecordsIsSet(boolean value) {
            if(!value) {
                this.records = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.cinchapi.concourse.thrift.AccessToken getCreds() {
            return this.creds;
        }

        public traceRecords_args setCreds(
                @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.AccessToken creds) {
            this.creds = creds;
            return this;
        }

        public void unsetCreds() {
            this.creds = null;
        }

        /**
         * Returns true if field creds is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetCreds() {
            return this.creds != null;
        }

        public void setCredsIsSet(boolean value) {
            if(!value) {
                this.creds = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.cinchapi.concourse.thrift.TransactionToken getTransaction() {
            return this.transaction;
        }

        public traceRecords_args setTransaction(
                @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.TransactionToken transaction) {
            this.transaction = transaction;
            return this;
        }

        public void unsetTransaction() {
            this.transaction = null;
        }

        /**
         * Returns true if field transaction is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetTransaction() {
            return this.transaction != null;
        }

        public void setTransactionIsSet(boolean value) {
            if(!value) {
                this.transaction = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getEnvironment() {
            return this.environment;
        }

        public traceRecords_args setEnvironment(
                @org.apache.thrift.annotation.Nullable java.lang.String environment) {
            this.environment = environment;
            return this;
        }

        public void unsetEnvironment() {
            this.environment = null;
        }

        /**
         * Returns true if field environment is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetEnvironment() {
            return this.environment != null;
        }

        public void setEnvironmentIsSet(boolean value) {
            if(!value) {
                this.environment = null;
            }
        }

        public void setFieldValue(_Fields field,
                @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            case RECORDS:
                if(value == null) {
                    unsetRecords();
                }
                else {
                    setRecords((java.util.List<java.lang.Long>) value);
                }
                break;

            case CREDS:
                if(value == null) {
                    unsetCreds();
                }
                else {
                    setCreds((com.cinchapi.concourse.thrift.AccessToken) value);
                }
                break;

            case TRANSACTION:
                if(value == null) {
                    unsetTransaction();
                }
                else {
                    setTransaction(
                            (com.cinchapi.concourse.thrift.TransactionToken) value);
                }
                break;

            case ENVIRONMENT:
                if(value == null) {
                    unsetEnvironment();
                }
                else {
                    setEnvironment((java.lang.String) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            case RECORDS:
                return getRecords();

            case CREDS:
                return getCreds();

            case TRANSACTION:
                return getTransaction();

            case ENVIRONMENT:
                return getEnvironment();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if(field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            case RECORDS:
                return isSetRecords();
            case CREDS:
                return isSetCreds();
            case TRANSACTION:
                return isSetTransaction();
            case ENVIRONMENT:
                return isSetEnvironment();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if(that == null)
                return false;
            if(that instanceof traceRecords_args)
                return this.equals((traceRecords_args) that);
            return false;
        }

        public boolean equals(traceRecords_args that) {
            if(that == null)
                return false;
            if(this == that)
                return true;

            boolean this_present_records = true && this.isSetRecords();
            boolean that_present_records = true && that.isSetRecords();
            if(this_present_records || that_present_records) {
                if(!(this_present_records && that_present_records))
                    return false;
                if(!this.records.equals(that.records))
                    return false;
            }

            boolean this_present_creds = true && this.isSetCreds();
            boolean that_present_creds = true && that.isSetCreds();
            if(this_present_creds || that_present_creds) {
                if(!(this_present_creds && that_present_creds))
                    return false;
                if(!this.creds.equals(that.creds))
                    return false;
            }

            boolean this_present_transaction = true && this.isSetTransaction();
            boolean that_present_transaction = true && that.isSetTransaction();
            if(this_present_transaction || that_present_transaction) {
                if(!(this_present_transaction && that_present_transaction))
                    return false;
                if(!this.transaction.equals(that.transaction))
                    return false;
            }

            boolean this_present_environment = true && this.isSetEnvironment();
            boolean that_present_environment = true && that.isSetEnvironment();
            if(this_present_environment || that_present_environment) {
                if(!(this_present_environment && that_present_environment))
                    return false;
                if(!this.environment.equals(that.environment))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetRecords()) ? 131071 : 524287);
            if(isSetRecords())
                hashCode = hashCode * 8191 + records.hashCode();

            hashCode = hashCode * 8191 + ((isSetCreds()) ? 131071 : 524287);
            if(isSetCreds())
                hashCode = hashCode * 8191 + creds.hashCode();

            hashCode = hashCode * 8191
                    + ((isSetTransaction()) ? 131071 : 524287);
            if(isSetTransaction())
                hashCode = hashCode * 8191 + transaction.hashCode();

            hashCode = hashCode * 8191
                    + ((isSetEnvironment()) ? 131071 : 524287);
            if(isSetEnvironment())
                hashCode = hashCode * 8191 + environment.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(traceRecords_args other) {
            if(!getClass().equals(other.getClass())) {
                return getClass().getName()
                        .compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetRecords())
                    .compareTo(other.isSetRecords());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetRecords()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.records, other.records);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetCreds())
                    .compareTo(other.isSetCreds());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetCreds()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.creds, other.creds);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetTransaction())
                    .compareTo(other.isSetTransaction());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetTransaction()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.transaction, other.transaction);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEnvironment())
                    .compareTo(other.isSetEnvironment());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetEnvironment()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.environment, other.environment);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
                throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
                throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder(
                    "traceRecords_args(");
            boolean first = true;

            sb.append("records:");
            if(this.records == null) {
                sb.append("null");
            }
            else {
                sb.append(this.records);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("creds:");
            if(this.creds == null) {
                sb.append("null");
            }
            else {
                sb.append(this.creds);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("transaction:");
            if(this.transaction == null) {
                sb.append("null");
            }
            else {
                sb.append(this.transaction);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("environment:");
            if(this.environment == null) {
                sb.append("null");
            }
            else {
                sb.append(this.environment);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if(creds != null) {
                creds.validate();
            }
            if(transaction != null) {
                transaction.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out)
                throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(
                                out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
                throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(
                                in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class traceRecords_argsStandardSchemeFactory
                implements org.apache.thrift.scheme.SchemeFactory {
            public traceRecords_argsStandardScheme getScheme() {
                return new traceRecords_argsStandardScheme();
            }
        }

        private static class traceRecords_argsStandardScheme extends
                org.apache.thrift.scheme.StandardScheme<traceRecords_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                    traceRecords_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if(schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // RECORDS
                        if(schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list18 = iprot
                                        .readListBegin();
                                struct.records = new java.util.ArrayList<java.lang.Long>(
                                        _list18.size);
                                long _elem19;
                                for (int _i20 = 0; _i20 < _list18.size; ++_i20) {
                                    _elem19 = iprot.readI64();
                                    struct.records.add(_elem19);
                                }
                                iprot.readListEnd();
                            }
                            struct.setRecordsIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 2: // CREDS
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.creds = new com.cinchapi.concourse.thrift.AccessToken();
                            struct.creds.read(iprot);
                            struct.setCredsIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 3: // TRANSACTION
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.transaction = new com.cinchapi.concourse.thrift.TransactionToken();
                            struct.transaction.read(iprot);
                            struct.setTransactionIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 4: // ENVIRONMENT
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.environment = iprot.readString();
                            struct.setEnvironmentIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                    traceRecords_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if(struct.records != null) {
                    oprot.writeFieldBegin(RECORDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(
                                new org.apache.thrift.protocol.TList(
                                        org.apache.thrift.protocol.TType.I64,
                                        struct.records.size()));
                        for (long _iter21 : struct.records) {
                            oprot.writeI64(_iter21);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if(struct.creds != null) {
                    oprot.writeFieldBegin(CREDS_FIELD_DESC);
                    struct.creds.write(oprot);
                    oprot.writeFieldEnd();
                }
                if(struct.transaction != null) {
                    oprot.writeFieldBegin(TRANSACTION_FIELD_DESC);
                    struct.transaction.write(oprot);
                    oprot.writeFieldEnd();
                }
                if(struct.environment != null) {
                    oprot.writeFieldBegin(ENVIRONMENT_FIELD_DESC);
                    oprot.writeString(struct.environment);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class traceRecords_argsTupleSchemeFactory
                implements org.apache.thrift.scheme.SchemeFactory {
            public traceRecords_argsTupleScheme getScheme() {
                return new traceRecords_argsTupleScheme();
            }
        }

        private static class traceRecords_argsTupleScheme extends
                org.apache.thrift.scheme.TupleScheme<traceRecords_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                    traceRecords_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if(struct.isSetRecords()) {
                    optionals.set(0);
                }
                if(struct.isSetCreds()) {
                    optionals.set(1);
                }
                if(struct.isSetTransaction()) {
                    optionals.set(2);
                }
                if(struct.isSetEnvironment()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if(struct.isSetRecords()) {
                    {
                        oprot.writeI32(struct.records.size());
                        for (long _iter22 : struct.records) {
                            oprot.writeI64(_iter22);
                        }
                    }
                }
                if(struct.isSetCreds()) {
                    struct.creds.write(oprot);
                }
                if(struct.isSetTransaction()) {
                    struct.transaction.write(oprot);
                }
                if(struct.isSetEnvironment()) {
                    oprot.writeString(struct.environment);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                    traceRecords_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if(incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.I64,
                                iprot.readI32());
                        struct.records = new java.util.ArrayList<java.lang.Long>(
                                _list23.size);
                        long _elem24;
                        for (int _i25 = 0; _i25 < _list23.size; ++_i25) {
                            _elem24 = iprot.readI64();
                            struct.records.add(_elem24);
                        }
                    }
                    struct.setRecordsIsSet(true);
                }
                if(incoming.get(1)) {
                    struct.creds = new com.cinchapi.concourse.thrift.AccessToken();
                    struct.creds.read(iprot);
                    struct.setCredsIsSet(true);
                }
                if(incoming.get(2)) {
                    struct.transaction = new com.cinchapi.concourse.thrift.TransactionToken();
                    struct.transaction.read(iprot);
                    struct.setTransactionIsSet(true);
                }
                if(incoming.get(3)) {
                    struct.environment = iprot.readString();
                    struct.setEnvironmentIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
                org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class
                    .equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
                            : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class traceRecords_result implements
            org.apache.thrift.TBase<traceRecords_result, traceRecords_result._Fields>,
            java.io.Serializable,
            Cloneable,
            Comparable<traceRecords_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "traceRecords_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.MAP, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "ex2", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
        private static final org.apache.thrift.protocol.TField EX3_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "ex3", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new traceRecords_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new traceRecords_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> success; // required
        public @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.SecurityException ex; // required
        public @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.TransactionException ex2; // required
        public @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.PermissionException ex3; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex"),
            EX2((short) 2, "ex2"),
            EX3((short) 3, "ex3");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.LinkedHashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // EX
                    return EX;
                case 2: // EX2
                    return EX2;
                case 3: // EX3
                    return EX3;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if(fields == null)
                    throw new java.lang.IllegalArgumentException(
                            "Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                    new org.apache.thrift.meta_data.FieldMetaData("success",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.MapMetaData(
                                    org.apache.thrift.protocol.TType.MAP,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.I64),
                                    new org.apache.thrift.meta_data.MapMetaData(
                                            org.apache.thrift.protocol.TType.MAP,
                                            new org.apache.thrift.meta_data.FieldValueMetaData(
                                                    org.apache.thrift.protocol.TType.STRING),
                                            new org.apache.thrift.meta_data.SetMetaData(
                                                    org.apache.thrift.protocol.TType.SET,
                                                    new org.apache.thrift.meta_data.FieldValueMetaData(
                                                            org.apache.thrift.protocol.TType.I64))))));
            tmpMap.put(_Fields.EX,
                    new org.apache.thrift.meta_data.FieldMetaData("ex",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.StructMetaData(
                                    org.apache.thrift.protocol.TType.STRUCT,
                                    com.cinchapi.concourse.thrift.SecurityException.class)));
            tmpMap.put(_Fields.EX2,
                    new org.apache.thrift.meta_data.FieldMetaData("ex2",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.StructMetaData(
                                    org.apache.thrift.protocol.TType.STRUCT,
                                    com.cinchapi.concourse.thrift.TransactionException.class)));
            tmpMap.put(_Fields.EX3,
                    new org.apache.thrift.meta_data.FieldMetaData("ex3",
                            org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.StructMetaData(
                                    org.apache.thrift.protocol.TType.STRUCT,
                                    com.cinchapi.concourse.thrift.PermissionException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                    traceRecords_result.class, metaDataMap);
        }

        public traceRecords_result() {}

        public traceRecords_result(
                java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> success,
                com.cinchapi.concourse.thrift.SecurityException ex,
                com.cinchapi.concourse.thrift.TransactionException ex2,
                com.cinchapi.concourse.thrift.PermissionException ex3) {
            this();
            this.success = success;
            this.ex = ex;
            this.ex2 = ex2;
            this.ex3 = ex3;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public traceRecords_result(traceRecords_result other) {
            if(other.isSetSuccess()) {
                java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> __this__success = new java.util.LinkedHashMap<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>(
                        other.success.size());
                for (java.util.Map.Entry<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> other_element : other.success
                        .entrySet()) {

                    java.lang.Long other_element_key = other_element.getKey();
                    java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> other_element_value = other_element
                            .getValue();

                    java.lang.Long __this__success_copy_key = other_element_key;

                    java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> __this__success_copy_value = new java.util.LinkedHashMap<java.lang.String, java.util.Set<java.lang.Long>>(
                            other_element_value.size());
                    for (java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.Long>> other_element_value_element : other_element_value
                            .entrySet()) {

                        java.lang.String other_element_value_element_key = other_element_value_element
                                .getKey();
                        java.util.Set<java.lang.Long> other_element_value_element_value = other_element_value_element
                                .getValue();

                        java.lang.String __this__success_copy_value_copy_key = other_element_value_element_key;

                        java.util.Set<java.lang.Long> __this__success_copy_value_copy_value = new java.util.LinkedHashSet<java.lang.Long>(
                                other_element_value_element_value);

                        __this__success_copy_value.put(
                                __this__success_copy_value_copy_key,
                                __this__success_copy_value_copy_value);
                    }

                    __this__success.put(__this__success_copy_key,
                            __this__success_copy_value);
                }
                this.success = __this__success;
            }
            if(other.isSetEx()) {
                this.ex = new com.cinchapi.concourse.thrift.SecurityException(
                        other.ex);
            }
            if(other.isSetEx2()) {
                this.ex2 = new com.cinchapi.concourse.thrift.TransactionException(
                        other.ex2);
            }
            if(other.isSetEx3()) {
                this.ex3 = new com.cinchapi.concourse.thrift.PermissionException(
                        other.ex3);
            }
        }

        public traceRecords_result deepCopy() {
            return new traceRecords_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
            this.ex2 = null;
            this.ex3 = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(long key,
                java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> val) {
            if(this.success == null) {
                this.success = new java.util.LinkedHashMap<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>();
            }
            this.success.put(key, val);
        }

        @org.apache.thrift.annotation.Nullable
        public java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> getSuccess() {
            return this.success;
        }

        public traceRecords_result setSuccess(
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if(!value) {
                this.success = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.cinchapi.concourse.thrift.SecurityException getEx() {
            return this.ex;
        }

        public traceRecords_result setEx(
                @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.SecurityException ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /**
         * Returns true if field ex is set (has been assigned a value) and false
         * otherwise
         */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if(!value) {
                this.ex = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.cinchapi.concourse.thrift.TransactionException getEx2() {
            return this.ex2;
        }

        public traceRecords_result setEx2(
                @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.TransactionException ex2) {
            this.ex2 = ex2;
            return this;
        }

        public void unsetEx2() {
            this.ex2 = null;
        }

        /**
         * Returns true if field ex2 is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetEx2() {
            return this.ex2 != null;
        }

        public void setEx2IsSet(boolean value) {
            if(!value) {
                this.ex2 = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public com.cinchapi.concourse.thrift.PermissionException getEx3() {
            return this.ex3;
        }

        public traceRecords_result setEx3(
                @org.apache.thrift.annotation.Nullable com.cinchapi.concourse.thrift.PermissionException ex3) {
            this.ex3 = ex3;
            return this;
        }

        public void unsetEx3() {
            this.ex3 = null;
        }

        /**
         * Returns true if field ex3 is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetEx3() {
            return this.ex3 != null;
        }

        public void setEx3IsSet(boolean value) {
            if(!value) {
                this.ex3 = null;
            }
        }

        public void setFieldValue(_Fields field,
                @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            case SUCCESS:
                if(value == null) {
                    unsetSuccess();
                }
                else {
                    setSuccess(
                            (java.util.Map<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>) value);
                }
                break;

            case EX:
                if(value == null) {
                    unsetEx();
                }
                else {
                    setEx((com.cinchapi.concourse.thrift.SecurityException) value);
                }
                break;

            case EX2:
                if(value == null) {
                    unsetEx2();
                }
                else {
                    setEx2((com.cinchapi.concourse.thrift.TransactionException) value);
                }
                break;

            case EX3:
                if(value == null) {
                    unsetEx3();
                }
                else {
                    setEx3((com.cinchapi.concourse.thrift.PermissionException) value);
                }
                break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case EX:
                return getEx();

            case EX2:
                return getEx2();

            case EX3:
                return getEx3();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if(field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case EX:
                return isSetEx();
            case EX2:
                return isSetEx2();
            case EX3:
                return isSetEx3();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if(that == null)
                return false;
            if(that instanceof traceRecords_result)
                return this.equals((traceRecords_result) that);
            return false;
        }

        public boolean equals(traceRecords_result that) {
            if(that == null)
                return false;
            if(this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if(this_present_success || that_present_success) {
                if(!(this_present_success && that_present_success))
                    return false;
                if(!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if(this_present_ex || that_present_ex) {
                if(!(this_present_ex && that_present_ex))
                    return false;
                if(!this.ex.equals(that.ex))
                    return false;
            }

            boolean this_present_ex2 = true && this.isSetEx2();
            boolean that_present_ex2 = true && that.isSetEx2();
            if(this_present_ex2 || that_present_ex2) {
                if(!(this_present_ex2 && that_present_ex2))
                    return false;
                if(!this.ex2.equals(that.ex2))
                    return false;
            }

            boolean this_present_ex3 = true && this.isSetEx3();
            boolean that_present_ex3 = true && that.isSetEx3();
            if(this_present_ex3 || that_present_ex3) {
                if(!(this_present_ex3 && that_present_ex3))
                    return false;
                if(!this.ex3.equals(that.ex3))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if(isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
            if(isSetEx())
                hashCode = hashCode * 8191 + ex.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
            if(isSetEx2())
                hashCode = hashCode * 8191 + ex2.hashCode();

            hashCode = hashCode * 8191 + ((isSetEx3()) ? 131071 : 524287);
            if(isSetEx3())
                hashCode = hashCode * 8191 + ex3.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(traceRecords_result other) {
            if(!getClass().equals(other.getClass())) {
                return getClass().getName()
                        .compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess())
                    .compareTo(other.isSetSuccess());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.success, other.success);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEx())
                    .compareTo(other.isSetEx());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.ex, other.ex);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEx2())
                    .compareTo(other.isSetEx2());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetEx2()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.ex2, other.ex2);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetEx3())
                    .compareTo(other.isSetEx3());
            if(lastComparison != 0) {
                return lastComparison;
            }
            if(isSetEx3()) {
                lastComparison = org.apache.thrift.TBaseHelper
                        .compareTo(this.ex3, other.ex3);
                if(lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
                throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
                throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder(
                    "traceRecords_result(");
            boolean first = true;

            sb.append("success:");
            if(this.success == null) {
                sb.append("null");
            }
            else {
                sb.append(this.success);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("ex:");
            if(this.ex == null) {
                sb.append("null");
            }
            else {
                sb.append(this.ex);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("ex2:");
            if(this.ex2 == null) {
                sb.append("null");
            }
            else {
                sb.append(this.ex2);
            }
            first = false;
            if(!first)
                sb.append(", ");
            sb.append("ex3:");
            if(this.ex3 == null) {
                sb.append("null");
            }
            else {
                sb.append(this.ex3);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out)
                throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(
                                out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
                throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(
                                in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class traceRecords_resultStandardSchemeFactory
                implements org.apache.thrift.scheme.SchemeFactory {
            public traceRecords_resultStandardScheme getScheme() {
                return new traceRecords_resultStandardScheme();
            }
        }

        private static class traceRecords_resultStandardScheme extends
                org.apache.thrift.scheme.StandardScheme<traceRecords_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                    traceRecords_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if(schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if(schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map26 = iprot
                                        .readMapBegin();
                                struct.success = new java.util.LinkedHashMap<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>(
                                        2 * _map26.size);
                                long _key27;
                                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> _val28;
                                for (int _i29 = 0; _i29 < _map26.size; ++_i29) {
                                    _key27 = iprot.readI64();
                                    {
                                        org.apache.thrift.protocol.TMap _map30 = iprot
                                                .readMapBegin();
                                        _val28 = new java.util.LinkedHashMap<java.lang.String, java.util.Set<java.lang.Long>>(
                                                2 * _map30.size);
                                        @org.apache.thrift.annotation.Nullable java.lang.String _key31;
                                        @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> _val32;
                                        for (int _i33 = 0; _i33 < _map30.size; ++_i33) {
                                            _key31 = iprot.readString();
                                            {
                                                org.apache.thrift.protocol.TSet _set34 = iprot
                                                        .readSetBegin();
                                                _val32 = new java.util.LinkedHashSet<java.lang.Long>(
                                                        2 * _set34.size);
                                                long _elem35;
                                                for (int _i36 = 0; _i36 < _set34.size; ++_i36) {
                                                    _elem35 = iprot.readI64();
                                                    _val32.add(_elem35);
                                                }
                                                iprot.readSetEnd();
                                            }
                                            _val28.put(_key31, _val32);
                                        }
                                        iprot.readMapEnd();
                                    }
                                    struct.success.put(_key27, _val28);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setSuccessIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 1: // EX
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.ex = new com.cinchapi.concourse.thrift.SecurityException();
                            struct.ex.read(iprot);
                            struct.setExIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 2: // EX2
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.ex2 = new com.cinchapi.concourse.thrift.TransactionException();
                            struct.ex2.read(iprot);
                            struct.setEx2IsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    case 3: // EX3
                        if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.ex3 = new com.cinchapi.concourse.thrift.PermissionException();
                            struct.ex3.read(iprot);
                            struct.setEx3IsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be
                // checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                    traceRecords_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if(struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(
                                org.apache.thrift.protocol.TType.I64,
                                org.apache.thrift.protocol.TType.MAP,
                                struct.success.size()));
                        for (java.util.Map.Entry<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> _iter37 : struct.success
                                .entrySet()) {
                            oprot.writeI64(_iter37.getKey());
                            {
                                oprot.writeMapBegin(
                                        new org.apache.thrift.protocol.TMap(
                                                org.apache.thrift.protocol.TType.STRING,
                                                org.apache.thrift.protocol.TType.SET,
                                                _iter37.getValue().size()));
                                for (java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.Long>> _iter38 : _iter37
                                        .getValue().entrySet()) {
                                    oprot.writeString(_iter38.getKey());
                                    {
                                        oprot.writeSetBegin(
                                                new org.apache.thrift.protocol.TSet(
                                                        org.apache.thrift.protocol.TType.I64,
                                                        _iter38.getValue()
                                                                .size()));
                                        for (long _iter39 : _iter38
                                                .getValue()) {
                                            oprot.writeI64(_iter39);
                                        }
                                        oprot.writeSetEnd();
                                    }
                                }
                                oprot.writeMapEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if(struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                if(struct.ex2 != null) {
                    oprot.writeFieldBegin(EX2_FIELD_DESC);
                    struct.ex2.write(oprot);
                    oprot.writeFieldEnd();
                }
                if(struct.ex3 != null) {
                    oprot.writeFieldBegin(EX3_FIELD_DESC);
                    struct.ex3.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class traceRecords_resultTupleSchemeFactory
                implements org.apache.thrift.scheme.SchemeFactory {
            public traceRecords_resultTupleScheme getScheme() {
                return new traceRecords_resultTupleScheme();
            }
        }

        private static class traceRecords_resultTupleScheme extends
                org.apache.thrift.scheme.TupleScheme<traceRecords_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                    traceRecords_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if(struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if(struct.isSetEx()) {
                    optionals.set(1);
                }
                if(struct.isSetEx2()) {
                    optionals.set(2);
                }
                if(struct.isSetEx3()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if(struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (java.util.Map.Entry<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>> _iter40 : struct.success
                                .entrySet()) {
                            oprot.writeI64(_iter40.getKey());
                            {
                                oprot.writeI32(_iter40.getValue().size());
                                for (java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.Long>> _iter41 : _iter40
                                        .getValue().entrySet()) {
                                    oprot.writeString(_iter41.getKey());
                                    {
                                        oprot.writeI32(
                                                _iter41.getValue().size());
                                        for (long _iter42 : _iter41
                                                .getValue()) {
                                            oprot.writeI64(_iter42);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if(struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
                if(struct.isSetEx2()) {
                    struct.ex2.write(oprot);
                }
                if(struct.isSetEx3()) {
                    struct.ex3.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                    traceRecords_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if(incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map43 = new org.apache.thrift.protocol.TMap(
                                org.apache.thrift.protocol.TType.I64,
                                org.apache.thrift.protocol.TType.MAP,
                                iprot.readI32());
                        struct.success = new java.util.LinkedHashMap<java.lang.Long, java.util.Map<java.lang.String, java.util.Set<java.lang.Long>>>(
                                2 * _map43.size);
                        long _key44;
                        @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.util.Set<java.lang.Long>> _val45;
                        for (int _i46 = 0; _i46 < _map43.size; ++_i46) {
                            _key44 = iprot.readI64();
                            {
                                org.apache.thrift.protocol.TMap _map47 = new org.apache.thrift.protocol.TMap(
                                        org.apache.thrift.protocol.TType.STRING,
                                        org.apache.thrift.protocol.TType.SET,
                                        iprot.readI32());
                                _val45 = new java.util.LinkedHashMap<java.lang.String, java.util.Set<java.lang.Long>>(
                                        2 * _map47.size);
                                @org.apache.thrift.annotation.Nullable java.lang.String _key48;
                                @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> _val49;
                                for (int _i50 = 0; _i50 < _map47.size; ++_i50) {
                                    _key48 = iprot.readString();
                                    {
                                        org.apache.thrift.protocol.TSet _set51 = new org.apache.thrift.protocol.TSet(
                                                org.apache.thrift.protocol.TType.I64,
                                                iprot.readI32());
                                        _val49 = new java.util.LinkedHashSet<java.lang.Long>(
                                                2 * _set51.size);
                                        long _elem52;
                                        for (int _i53 = 0; _i53 < _set51.size; ++_i53) {
                                            _elem52 = iprot.readI64();
                                            _val49.add(_elem52);
                                        }
                                    }
                                    _val45.put(_key48, _val49);
                                }
                            }
                            struct.success.put(_key44, _val45);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if(incoming.get(1)) {
                    struct.ex = new com.cinchapi.concourse.thrift.SecurityException();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
                if(incoming.get(2)) {
                    struct.ex2 = new com.cinchapi.concourse.thrift.TransactionException();
                    struct.ex2.read(iprot);
                    struct.setEx2IsSet(true);
                }
                if(incoming.get(3)) {
                    struct.ex3 = new com.cinchapi.concourse.thrift.PermissionException();
                    struct.ex3.read(iprot);
                    struct.setEx3IsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
                org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class
                    .equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
                            : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}

#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from .data.ttypes import *
from .shared.ttypes import *
from .exceptions.ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  The interface definition for the Concourse Server API.
  """
  def addKeyValueRecord(self, key, value, record, creds, transaction, environment):
    """
    Append {@code key} as {@code value} in {@code record}.

    @param key - the field name
    @param value - the value to add
    @param record - the id of the record in which an attempt is made to add the data
    @param creds - the {@link shared.AccessToken} that is used to authenticate the user on behalf of whom the client is connected
    @param transaction - the {@link shared.TransactionToken} that current transaction for the client (optional)
    @param environment - the environment to which the client is connected
    @return a bool that indicates if the data was added

    Parameters:
     - key
     - value
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def addKeyValue(self, key, value, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - creds
     - transaction
     - environment
    """
    pass

  def addKeyValueRecords(self, key, value, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def abort(self, creds, transaction, environment):
    """
    Abort the current transaction, if one exists.
    <p>
    This method will discard any changes that are currently sitting in the
    staging area. After this function returns, all subsequent operations will
    commit to the database immediately until #stage(shared.AccessToken) is
    called.
    </p>

    @param creds
    @param transaction
    @param environment
    @throws TSecurityException

    Parameters:
     - creds
     - transaction
     - environment
    """
    pass

  def commit(self, creds, transaction, environment):
    """
    Commit the current transaction, if one exists.

    This method will attempt to permanently commit all the changes that are
    currently sitting in the staging area. This function only returns TRUE
    if all the changes can be successfully applied to the database. Otherwise,
    this function returns FALSE and all the changes are discarded.

    After this function returns, all subsequent operations will commit to the
    database immediately until #stage(shared.AccessToken) is invoked.

    @param creds
    @param transaction
    @param environment
    @return boolean
    @throws TSecurityException
    @throws TTransactionException

    Parameters:
     - creds
     - transaction
     - environment
    """
    pass

  def login(self, username, password, environment):
    """
    Login to the service and receive an AccessToken, which is required for
    all subsequent operations. The AccessToken has an undocumented TTL, so
    clients must be prepared to handle token expiration for active clients.

    @param username
    @param password
    @param environment
    @return AccessToken

    Parameters:
     - username
     - password
     - environment
    """
    pass

  def logout(self, token, environment):
    """
    Logout and immediately expire the access token. For optimal security,
    the client should also discard the token after invoking this method.

    @param token
    @param environment
    @throws TSecurityException

    Parameters:
     - token
     - environment
    """
    pass

  def stage(self, token, environment):
    """
    Start a new transaction.
    <p>
    This method will turn on STAGING mode so that all subsequent changes are
    collected in an isolated buffer before possibly being committed to the
    database. Staged operations are guaranteed to be reliable, all or nothing
    units of work that allow correct recovery from failures and provide
    isolation between clients so the database is always in a consistent state.
    </p>
    <p>
    After this method returns, all subsequent operations will be done in
    {@code staging} mode until either #abort(shared.AccessToken) or
    #commit(shared.AccessToken) is called.
    </p>

    @param token
    @param environment
    @return TransactionToken
    @throws TSecurityException

    Parameters:
     - token
     - environment
    """
    pass

  def clearRecord(self, record, creds, transaction, environment):
    """
    Parameters:
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def clearRecords(self, records, creds, transaction, environment):
    """
    Parameters:
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def clearKeyRecord(self, key, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def clearKeysRecord(self, keys, record, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def clearKeyRecords(self, key, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def clearKeysRecords(self, keys, records, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def insertJson(self, json, creds, transaction, environment):
    """
    Parameters:
     - json
     - creds
     - transaction
     - environment
    """
    pass

  def insertJsonRecord(self, json, record, creds, transaction, environment):
    """
    Parameters:
     - json
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def insertJsonRecords(self, json, records, creds, transaction, environment):
    """
    Parameters:
     - json
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def removeKeyValueRecord(self, key, value, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def removeKeyValueRecords(self, key, value, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def setKeyValueRecord(self, key, value, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def setKeyValue(self, key, value, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - creds
     - transaction
     - environment
    """
    pass

  def setKeyValueRecords(self, key, value, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def inventory(self, creds, transaction, environment):
    """
    Parameters:
     - creds
     - transaction
     - environment
    """
    pass

  def selectRecord(self, record, creds, transaction, environment):
    """
    Parameters:
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def selectRecords(self, records, creds, transaction, environment):
    """
    Parameters:
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def selectRecordTime(self, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectRecordTimestr(self, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectRecordsTime(self, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectRecordsTimestr(self, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def browseKey(self, key, creds, transaction, environment):
    """
    Parameters:
     - key
     - creds
     - transaction
     - environment
    """
    pass

  def browseKeys(self, keys, creds, transaction, environment):
    """
    Parameters:
     - keys
     - creds
     - transaction
     - environment
    """
    pass

  def browseKeyTime(self, key, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def browseKeyTimestr(self, key, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def browseKeysTime(self, keys, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def browseKeysTimestr(self, keys, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def describeRecord(self, record, creds, transaction, environment):
    """
    Parameters:
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def describeRecordTime(self, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def describeRecordTimestr(self, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def describeRecords(self, records, creds, transaction, environment):
    """
    Parameters:
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def describeRecordsTime(self, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def describeRecordsTimestr(self, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyRecord(self, key, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyRecordTime(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyRecordTimestr(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysRecord(self, keys, record, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysRecordTime(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysRecordTimestr(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysRecords(self, keys, records, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyRecords(self, key, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyRecordsTime(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyRecordsTimestr(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysRecordsTime(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysRecordsTimestr(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectCriteria(self, criteria, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - creds
     - transaction
     - environment
    """
    pass

  def selectCcl(self, ccl, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - creds
     - transaction
     - environment
    """
    pass

  def selectCriteriaTime(self, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectCriteriaTimestr(self, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectCclTime(self, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectCclTimestr(self, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyCriteria(self, key, criteria, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyCcl(self, key, ccl, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyCriteriaTime(self, key, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyCriteriaTimestr(self, key, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyCclTime(self, key, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeyCclTimestr(self, key, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysCriteria(self, keys, criteria, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysCcl(self, keys, ccl, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysCriteriaTime(self, keys, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysCriteriaTimestr(self, keys, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysCclTime(self, keys, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def selectKeysCclTimestr(self, keys, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyRecord(self, key, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyRecordTime(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyRecordTimestr(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysRecord(self, keys, record, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysRecordTime(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysRecordTimestr(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysRecords(self, keys, records, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyRecords(self, key, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyRecordsTime(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyRecordsTimestr(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysRecordsTime(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysRecordsTimestr(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyCriteria(self, key, criteria, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - creds
     - transaction
     - environment
    """
    pass

  def getCriteria(self, criteria, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - creds
     - transaction
     - environment
    """
    pass

  def getCcl(self, ccl, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - creds
     - transaction
     - environment
    """
    pass

  def getCriteriaTime(self, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getCriteriaTimestr(self, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getCclTime(self, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getCclTimestr(self, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyCcl(self, key, ccl, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyCriteriaTime(self, key, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyCriteriaTimestr(self, key, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyCclTime(self, key, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeyCclTimestr(self, key, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysCriteria(self, keys, criteria, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysCcl(self, keys, ccl, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysCriteriaTime(self, keys, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysCriteriaTimestr(self, keys, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysCclTime(self, keys, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def getKeysCclTimestr(self, keys, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def verifyKeyValueRecord(self, key, value, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def verifyKeyValueRecordTime(self, key, value, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def verifyKeyValueRecordTimestr(self, key, value, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def jsonifyRecords(self, records, identifier, creds, transaction, environment):
    """
    Parameters:
     - records
     - identifier
     - creds
     - transaction
     - environment
    """
    pass

  def jsonifyRecordsTime(self, records, timestamp, identifier, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - identifier
     - creds
     - transaction
     - environment
    """
    pass

  def jsonifyRecordsTimestr(self, records, timestamp, identifier, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - identifier
     - creds
     - transaction
     - environment
    """
    pass

  def findCriteria(self, criteria, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - creds
     - transaction
     - environment
    """
    pass

  def findCcl(self, ccl, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - creds
     - transaction
     - environment
    """
    pass

  def findKeyOperatorValues(self, key, operator, values, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - creds
     - transaction
     - environment
    """
    pass

  def findKeyOperatorValuesTime(self, key, operator, values, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def findKeyOperatorValuesTimestr(self, key, operator, values, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def findKeyOperatorstrValues(self, key, operator, values, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - creds
     - transaction
     - environment
    """
    pass

  def findKeyOperatorstrValuesTime(self, key, operator, values, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def findKeyOperatorstrValuesTimestr(self, key, operator, values, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def search(self, key, query, creds, transaction, environment):
    """
    Parameters:
     - key
     - query
     - creds
     - transaction
     - environment
    """
    pass

  def auditRecord(self, record, creds, transaction, environment):
    """
    Parameters:
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def auditRecordStart(self, record, start, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def auditRecordStartstr(self, record, start, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def auditRecordStartEnd(self, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def auditRecordStartstrEndstr(self, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def auditKeyRecord(self, key, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def auditKeyRecordStart(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def auditKeyRecordStartstr(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def auditKeyRecordStartEnd(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def auditKeyRecordStartstrEndstr(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def chronologizeKeyRecord(self, key, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def chronologizeKeyRecordStart(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def chronologizeKeyRecordStartstr(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def chronologizeKeyRecordStartEnd(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def chronologizeKeyRecordStartstrEndstr(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def diffRecordStart(self, record, start, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def diffRecordStartstr(self, record, start, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def diffRecordStartEnd(self, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def diffRecordStartstrEndstr(self, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def diffKeyRecordStart(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def diffKeyRecordStartstr(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def diffKeyRecordStartEnd(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def diffKeyRecordStartstrEndstr(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def diffKeyStart(self, key, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def diffKeyStartstr(self, key, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - start
     - creds
     - transaction
     - environment
    """
    pass

  def diffKeyStartEnd(self, key, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def diffKeyStartstrEndstr(self, key, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    pass

  def revertKeysRecordsTime(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def revertKeysRecordsTimestr(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def revertKeysRecordTime(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def revertKeysRecordTimestr(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def revertKeyRecordsTime(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def revertKeyRecordsTimestr(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def revertKeyRecordTime(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def revertKeyRecordTimestr(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    pass

  def pingRecords(self, records, creds, transaction, environment):
    """
    Parameters:
     - records
     - creds
     - transaction
     - environment
    """
    pass

  def pingRecord(self, record, creds, transaction, environment):
    """
    Parameters:
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def verifyAndSwap(self, key, expected, record, replacement, creds, transaction, environment):
    """
    Parameters:
     - key
     - expected
     - record
     - replacement
     - creds
     - transaction
     - environment
    """
    pass

  def verifyOrSet(self, key, value, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - creds
     - transaction
     - environment
    """
    pass

  def findOrAddKeyValue(self, key, value, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - creds
     - transaction
     - environment
    """
    pass

  def findOrInsertCriteriaJson(self, criteria, json, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - json
     - creds
     - transaction
     - environment
    """
    pass

  def findOrInsertCclJson(self, ccl, json, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - json
     - creds
     - transaction
     - environment
    """
    pass

  def getServerEnvironment(self, creds, token, environment):
    """
    Parameters:
     - creds
     - token
     - environment
    """
    pass

  def getServerVersion(self):
    pass

  def time(self, creds, token, environment):
    """
    Parameters:
     - creds
     - token
     - environment
    """
    pass

  def timePhrase(self, phrase, creds, token, environment):
    """
    Parameters:
     - phrase
     - creds
     - token
     - environment
    """
    pass


class Client(Iface):
  """
  The interface definition for the Concourse Server API.
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def addKeyValueRecord(self, key, value, record, creds, transaction, environment):
    """
    Append {@code key} as {@code value} in {@code record}.

    @param key - the field name
    @param value - the value to add
    @param record - the id of the record in which an attempt is made to add the data
    @param creds - the {@link shared.AccessToken} that is used to authenticate the user on behalf of whom the client is connected
    @param transaction - the {@link shared.TransactionToken} that current transaction for the client (optional)
    @param environment - the environment to which the client is connected
    @return a bool that indicates if the data was added

    Parameters:
     - key
     - value
     - record
     - creds
     - transaction
     - environment
    """
    self.send_addKeyValueRecord(key, value, record, creds, transaction, environment)
    return self.recv_addKeyValueRecord()

  def send_addKeyValueRecord(self, key, value, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('addKeyValueRecord', TMessageType.CALL, self._seqid)
    args = addKeyValueRecord_args()
    args.key = key
    args.value = value
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addKeyValueRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addKeyValueRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addKeyValueRecord failed: unknown result");

  def addKeyValue(self, key, value, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - creds
     - transaction
     - environment
    """
    self.send_addKeyValue(key, value, creds, transaction, environment)
    return self.recv_addKeyValue()

  def send_addKeyValue(self, key, value, creds, transaction, environment):
    self._oprot.writeMessageBegin('addKeyValue', TMessageType.CALL, self._seqid)
    args = addKeyValue_args()
    args.key = key
    args.value = value
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addKeyValue(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addKeyValue_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addKeyValue failed: unknown result");

  def addKeyValueRecords(self, key, value, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - records
     - creds
     - transaction
     - environment
    """
    self.send_addKeyValueRecords(key, value, records, creds, transaction, environment)
    return self.recv_addKeyValueRecords()

  def send_addKeyValueRecords(self, key, value, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('addKeyValueRecords', TMessageType.CALL, self._seqid)
    args = addKeyValueRecords_args()
    args.key = key
    args.value = value
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addKeyValueRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addKeyValueRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addKeyValueRecords failed: unknown result");

  def abort(self, creds, transaction, environment):
    """
    Abort the current transaction, if one exists.
    <p>
    This method will discard any changes that are currently sitting in the
    staging area. After this function returns, all subsequent operations will
    commit to the database immediately until #stage(shared.AccessToken) is
    called.
    </p>

    @param creds
    @param transaction
    @param environment
    @throws TSecurityException

    Parameters:
     - creds
     - transaction
     - environment
    """
    self.send_abort(creds, transaction, environment)
    self.recv_abort()

  def send_abort(self, creds, transaction, environment):
    self._oprot.writeMessageBegin('abort', TMessageType.CALL, self._seqid)
    args = abort_args()
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_abort(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = abort_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    return

  def commit(self, creds, transaction, environment):
    """
    Commit the current transaction, if one exists.

    This method will attempt to permanently commit all the changes that are
    currently sitting in the staging area. This function only returns TRUE
    if all the changes can be successfully applied to the database. Otherwise,
    this function returns FALSE and all the changes are discarded.

    After this function returns, all subsequent operations will commit to the
    database immediately until #stage(shared.AccessToken) is invoked.

    @param creds
    @param transaction
    @param environment
    @return boolean
    @throws TSecurityException
    @throws TTransactionException

    Parameters:
     - creds
     - transaction
     - environment
    """
    self.send_commit(creds, transaction, environment)
    return self.recv_commit()

  def send_commit(self, creds, transaction, environment):
    self._oprot.writeMessageBegin('commit', TMessageType.CALL, self._seqid)
    args = commit_args()
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_commit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = commit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "commit failed: unknown result");

  def login(self, username, password, environment):
    """
    Login to the service and receive an AccessToken, which is required for
    all subsequent operations. The AccessToken has an undocumented TTL, so
    clients must be prepared to handle token expiration for active clients.

    @param username
    @param password
    @param environment
    @return AccessToken

    Parameters:
     - username
     - password
     - environment
    """
    self.send_login(username, password, environment)
    return self.recv_login()

  def send_login(self, username, password, environment):
    self._oprot.writeMessageBegin('login', TMessageType.CALL, self._seqid)
    args = login_args()
    args.username = username
    args.password = password
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_login(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = login_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "login failed: unknown result");

  def logout(self, token, environment):
    """
    Logout and immediately expire the access token. For optimal security,
    the client should also discard the token after invoking this method.

    @param token
    @param environment
    @throws TSecurityException

    Parameters:
     - token
     - environment
    """
    self.send_logout(token, environment)
    self.recv_logout()

  def send_logout(self, token, environment):
    self._oprot.writeMessageBegin('logout', TMessageType.CALL, self._seqid)
    args = logout_args()
    args.token = token
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_logout(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = logout_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    return

  def stage(self, token, environment):
    """
    Start a new transaction.
    <p>
    This method will turn on STAGING mode so that all subsequent changes are
    collected in an isolated buffer before possibly being committed to the
    database. Staged operations are guaranteed to be reliable, all or nothing
    units of work that allow correct recovery from failures and provide
    isolation between clients so the database is always in a consistent state.
    </p>
    <p>
    After this method returns, all subsequent operations will be done in
    {@code staging} mode until either #abort(shared.AccessToken) or
    #commit(shared.AccessToken) is called.
    </p>

    @param token
    @param environment
    @return TransactionToken
    @throws TSecurityException

    Parameters:
     - token
     - environment
    """
    self.send_stage(token, environment)
    return self.recv_stage()

  def send_stage(self, token, environment):
    self._oprot.writeMessageBegin('stage', TMessageType.CALL, self._seqid)
    args = stage_args()
    args.token = token
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stage(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = stage_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "stage failed: unknown result");

  def clearRecord(self, record, creds, transaction, environment):
    """
    Parameters:
     - record
     - creds
     - transaction
     - environment
    """
    self.send_clearRecord(record, creds, transaction, environment)
    self.recv_clearRecord()

  def send_clearRecord(self, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('clearRecord', TMessageType.CALL, self._seqid)
    args = clearRecord_args()
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clearRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = clearRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    return

  def clearRecords(self, records, creds, transaction, environment):
    """
    Parameters:
     - records
     - creds
     - transaction
     - environment
    """
    self.send_clearRecords(records, creds, transaction, environment)
    self.recv_clearRecords()

  def send_clearRecords(self, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('clearRecords', TMessageType.CALL, self._seqid)
    args = clearRecords_args()
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clearRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = clearRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    return

  def clearKeyRecord(self, key, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - creds
     - transaction
     - environment
    """
    self.send_clearKeyRecord(key, record, creds, transaction, environment)
    self.recv_clearKeyRecord()

  def send_clearKeyRecord(self, key, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('clearKeyRecord', TMessageType.CALL, self._seqid)
    args = clearKeyRecord_args()
    args.key = key
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clearKeyRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = clearKeyRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    return

  def clearKeysRecord(self, keys, record, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - creds
     - transaction
     - environment
    """
    self.send_clearKeysRecord(keys, record, creds, transaction, environment)
    self.recv_clearKeysRecord()

  def send_clearKeysRecord(self, keys, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('clearKeysRecord', TMessageType.CALL, self._seqid)
    args = clearKeysRecord_args()
    args.keys = keys
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clearKeysRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = clearKeysRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    return

  def clearKeyRecords(self, key, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - creds
     - transaction
     - environment
    """
    self.send_clearKeyRecords(key, records, creds, transaction, environment)
    self.recv_clearKeyRecords()

  def send_clearKeyRecords(self, key, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('clearKeyRecords', TMessageType.CALL, self._seqid)
    args = clearKeyRecords_args()
    args.key = key
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clearKeyRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = clearKeyRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    return

  def clearKeysRecords(self, keys, records, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - creds
     - transaction
     - environment
    """
    self.send_clearKeysRecords(keys, records, creds, transaction, environment)
    self.recv_clearKeysRecords()

  def send_clearKeysRecords(self, keys, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('clearKeysRecords', TMessageType.CALL, self._seqid)
    args = clearKeysRecords_args()
    args.keys = keys
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clearKeysRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = clearKeysRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    return

  def insertJson(self, json, creds, transaction, environment):
    """
    Parameters:
     - json
     - creds
     - transaction
     - environment
    """
    self.send_insertJson(json, creds, transaction, environment)
    return self.recv_insertJson()

  def send_insertJson(self, json, creds, transaction, environment):
    self._oprot.writeMessageBegin('insertJson', TMessageType.CALL, self._seqid)
    args = insertJson_args()
    args.json = json
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_insertJson(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = insertJson_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "insertJson failed: unknown result");

  def insertJsonRecord(self, json, record, creds, transaction, environment):
    """
    Parameters:
     - json
     - record
     - creds
     - transaction
     - environment
    """
    self.send_insertJsonRecord(json, record, creds, transaction, environment)
    return self.recv_insertJsonRecord()

  def send_insertJsonRecord(self, json, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('insertJsonRecord', TMessageType.CALL, self._seqid)
    args = insertJsonRecord_args()
    args.json = json
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_insertJsonRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = insertJsonRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "insertJsonRecord failed: unknown result");

  def insertJsonRecords(self, json, records, creds, transaction, environment):
    """
    Parameters:
     - json
     - records
     - creds
     - transaction
     - environment
    """
    self.send_insertJsonRecords(json, records, creds, transaction, environment)
    return self.recv_insertJsonRecords()

  def send_insertJsonRecords(self, json, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('insertJsonRecords', TMessageType.CALL, self._seqid)
    args = insertJsonRecords_args()
    args.json = json
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_insertJsonRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = insertJsonRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "insertJsonRecords failed: unknown result");

  def removeKeyValueRecord(self, key, value, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - creds
     - transaction
     - environment
    """
    self.send_removeKeyValueRecord(key, value, record, creds, transaction, environment)
    return self.recv_removeKeyValueRecord()

  def send_removeKeyValueRecord(self, key, value, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('removeKeyValueRecord', TMessageType.CALL, self._seqid)
    args = removeKeyValueRecord_args()
    args.key = key
    args.value = value
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeKeyValueRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = removeKeyValueRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "removeKeyValueRecord failed: unknown result");

  def removeKeyValueRecords(self, key, value, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - records
     - creds
     - transaction
     - environment
    """
    self.send_removeKeyValueRecords(key, value, records, creds, transaction, environment)
    return self.recv_removeKeyValueRecords()

  def send_removeKeyValueRecords(self, key, value, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('removeKeyValueRecords', TMessageType.CALL, self._seqid)
    args = removeKeyValueRecords_args()
    args.key = key
    args.value = value
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeKeyValueRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = removeKeyValueRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "removeKeyValueRecords failed: unknown result");

  def setKeyValueRecord(self, key, value, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - creds
     - transaction
     - environment
    """
    self.send_setKeyValueRecord(key, value, record, creds, transaction, environment)
    self.recv_setKeyValueRecord()

  def send_setKeyValueRecord(self, key, value, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('setKeyValueRecord', TMessageType.CALL, self._seqid)
    args = setKeyValueRecord_args()
    args.key = key
    args.value = value
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setKeyValueRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setKeyValueRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    return

  def setKeyValue(self, key, value, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - creds
     - transaction
     - environment
    """
    self.send_setKeyValue(key, value, creds, transaction, environment)
    return self.recv_setKeyValue()

  def send_setKeyValue(self, key, value, creds, transaction, environment):
    self._oprot.writeMessageBegin('setKeyValue', TMessageType.CALL, self._seqid)
    args = setKeyValue_args()
    args.key = key
    args.value = value
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setKeyValue(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setKeyValue_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setKeyValue failed: unknown result");

  def setKeyValueRecords(self, key, value, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - records
     - creds
     - transaction
     - environment
    """
    self.send_setKeyValueRecords(key, value, records, creds, transaction, environment)
    self.recv_setKeyValueRecords()

  def send_setKeyValueRecords(self, key, value, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('setKeyValueRecords', TMessageType.CALL, self._seqid)
    args = setKeyValueRecords_args()
    args.key = key
    args.value = value
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setKeyValueRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setKeyValueRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    return

  def inventory(self, creds, transaction, environment):
    """
    Parameters:
     - creds
     - transaction
     - environment
    """
    self.send_inventory(creds, transaction, environment)
    return self.recv_inventory()

  def send_inventory(self, creds, transaction, environment):
    self._oprot.writeMessageBegin('inventory', TMessageType.CALL, self._seqid)
    args = inventory_args()
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_inventory(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = inventory_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "inventory failed: unknown result");

  def selectRecord(self, record, creds, transaction, environment):
    """
    Parameters:
     - record
     - creds
     - transaction
     - environment
    """
    self.send_selectRecord(record, creds, transaction, environment)
    return self.recv_selectRecord()

  def send_selectRecord(self, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectRecord', TMessageType.CALL, self._seqid)
    args = selectRecord_args()
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectRecord failed: unknown result");

  def selectRecords(self, records, creds, transaction, environment):
    """
    Parameters:
     - records
     - creds
     - transaction
     - environment
    """
    self.send_selectRecords(records, creds, transaction, environment)
    return self.recv_selectRecords()

  def send_selectRecords(self, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectRecords', TMessageType.CALL, self._seqid)
    args = selectRecords_args()
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectRecords failed: unknown result");

  def selectRecordTime(self, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectRecordTime(record, timestamp, creds, transaction, environment)
    return self.recv_selectRecordTime()

  def send_selectRecordTime(self, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectRecordTime', TMessageType.CALL, self._seqid)
    args = selectRecordTime_args()
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectRecordTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectRecordTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectRecordTime failed: unknown result");

  def selectRecordTimestr(self, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectRecordTimestr(record, timestamp, creds, transaction, environment)
    return self.recv_selectRecordTimestr()

  def send_selectRecordTimestr(self, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectRecordTimestr', TMessageType.CALL, self._seqid)
    args = selectRecordTimestr_args()
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectRecordTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectRecordTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectRecordTimestr failed: unknown result");

  def selectRecordsTime(self, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectRecordsTime(records, timestamp, creds, transaction, environment)
    return self.recv_selectRecordsTime()

  def send_selectRecordsTime(self, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectRecordsTime', TMessageType.CALL, self._seqid)
    args = selectRecordsTime_args()
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectRecordsTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectRecordsTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectRecordsTime failed: unknown result");

  def selectRecordsTimestr(self, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectRecordsTimestr(records, timestamp, creds, transaction, environment)
    return self.recv_selectRecordsTimestr()

  def send_selectRecordsTimestr(self, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectRecordsTimestr', TMessageType.CALL, self._seqid)
    args = selectRecordsTimestr_args()
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectRecordsTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectRecordsTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectRecordsTimestr failed: unknown result");

  def browseKey(self, key, creds, transaction, environment):
    """
    Parameters:
     - key
     - creds
     - transaction
     - environment
    """
    self.send_browseKey(key, creds, transaction, environment)
    return self.recv_browseKey()

  def send_browseKey(self, key, creds, transaction, environment):
    self._oprot.writeMessageBegin('browseKey', TMessageType.CALL, self._seqid)
    args = browseKey_args()
    args.key = key
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_browseKey(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = browseKey_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "browseKey failed: unknown result");

  def browseKeys(self, keys, creds, transaction, environment):
    """
    Parameters:
     - keys
     - creds
     - transaction
     - environment
    """
    self.send_browseKeys(keys, creds, transaction, environment)
    return self.recv_browseKeys()

  def send_browseKeys(self, keys, creds, transaction, environment):
    self._oprot.writeMessageBegin('browseKeys', TMessageType.CALL, self._seqid)
    args = browseKeys_args()
    args.keys = keys
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_browseKeys(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = browseKeys_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "browseKeys failed: unknown result");

  def browseKeyTime(self, key, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_browseKeyTime(key, timestamp, creds, transaction, environment)
    return self.recv_browseKeyTime()

  def send_browseKeyTime(self, key, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('browseKeyTime', TMessageType.CALL, self._seqid)
    args = browseKeyTime_args()
    args.key = key
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_browseKeyTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = browseKeyTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "browseKeyTime failed: unknown result");

  def browseKeyTimestr(self, key, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_browseKeyTimestr(key, timestamp, creds, transaction, environment)
    return self.recv_browseKeyTimestr()

  def send_browseKeyTimestr(self, key, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('browseKeyTimestr', TMessageType.CALL, self._seqid)
    args = browseKeyTimestr_args()
    args.key = key
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_browseKeyTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = browseKeyTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "browseKeyTimestr failed: unknown result");

  def browseKeysTime(self, keys, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_browseKeysTime(keys, timestamp, creds, transaction, environment)
    return self.recv_browseKeysTime()

  def send_browseKeysTime(self, keys, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('browseKeysTime', TMessageType.CALL, self._seqid)
    args = browseKeysTime_args()
    args.keys = keys
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_browseKeysTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = browseKeysTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "browseKeysTime failed: unknown result");

  def browseKeysTimestr(self, keys, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_browseKeysTimestr(keys, timestamp, creds, transaction, environment)
    return self.recv_browseKeysTimestr()

  def send_browseKeysTimestr(self, keys, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('browseKeysTimestr', TMessageType.CALL, self._seqid)
    args = browseKeysTimestr_args()
    args.keys = keys
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_browseKeysTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = browseKeysTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "browseKeysTimestr failed: unknown result");

  def describeRecord(self, record, creds, transaction, environment):
    """
    Parameters:
     - record
     - creds
     - transaction
     - environment
    """
    self.send_describeRecord(record, creds, transaction, environment)
    return self.recv_describeRecord()

  def send_describeRecord(self, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('describeRecord', TMessageType.CALL, self._seqid)
    args = describeRecord_args()
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_describeRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = describeRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "describeRecord failed: unknown result");

  def describeRecordTime(self, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_describeRecordTime(record, timestamp, creds, transaction, environment)
    return self.recv_describeRecordTime()

  def send_describeRecordTime(self, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('describeRecordTime', TMessageType.CALL, self._seqid)
    args = describeRecordTime_args()
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_describeRecordTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = describeRecordTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "describeRecordTime failed: unknown result");

  def describeRecordTimestr(self, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_describeRecordTimestr(record, timestamp, creds, transaction, environment)
    return self.recv_describeRecordTimestr()

  def send_describeRecordTimestr(self, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('describeRecordTimestr', TMessageType.CALL, self._seqid)
    args = describeRecordTimestr_args()
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_describeRecordTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = describeRecordTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "describeRecordTimestr failed: unknown result");

  def describeRecords(self, records, creds, transaction, environment):
    """
    Parameters:
     - records
     - creds
     - transaction
     - environment
    """
    self.send_describeRecords(records, creds, transaction, environment)
    return self.recv_describeRecords()

  def send_describeRecords(self, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('describeRecords', TMessageType.CALL, self._seqid)
    args = describeRecords_args()
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_describeRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = describeRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "describeRecords failed: unknown result");

  def describeRecordsTime(self, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_describeRecordsTime(records, timestamp, creds, transaction, environment)
    return self.recv_describeRecordsTime()

  def send_describeRecordsTime(self, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('describeRecordsTime', TMessageType.CALL, self._seqid)
    args = describeRecordsTime_args()
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_describeRecordsTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = describeRecordsTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "describeRecordsTime failed: unknown result");

  def describeRecordsTimestr(self, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_describeRecordsTimestr(records, timestamp, creds, transaction, environment)
    return self.recv_describeRecordsTimestr()

  def send_describeRecordsTimestr(self, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('describeRecordsTimestr', TMessageType.CALL, self._seqid)
    args = describeRecordsTimestr_args()
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_describeRecordsTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = describeRecordsTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "describeRecordsTimestr failed: unknown result");

  def selectKeyRecord(self, key, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyRecord(key, record, creds, transaction, environment)
    return self.recv_selectKeyRecord()

  def send_selectKeyRecord(self, key, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyRecord', TMessageType.CALL, self._seqid)
    args = selectKeyRecord_args()
    args.key = key
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyRecord failed: unknown result");

  def selectKeyRecordTime(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyRecordTime(key, record, timestamp, creds, transaction, environment)
    return self.recv_selectKeyRecordTime()

  def send_selectKeyRecordTime(self, key, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyRecordTime', TMessageType.CALL, self._seqid)
    args = selectKeyRecordTime_args()
    args.key = key
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyRecordTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyRecordTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyRecordTime failed: unknown result");

  def selectKeyRecordTimestr(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyRecordTimestr(key, record, timestamp, creds, transaction, environment)
    return self.recv_selectKeyRecordTimestr()

  def send_selectKeyRecordTimestr(self, key, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyRecordTimestr', TMessageType.CALL, self._seqid)
    args = selectKeyRecordTimestr_args()
    args.key = key
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyRecordTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyRecordTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyRecordTimestr failed: unknown result");

  def selectKeysRecord(self, keys, record, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysRecord(keys, record, creds, transaction, environment)
    return self.recv_selectKeysRecord()

  def send_selectKeysRecord(self, keys, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysRecord', TMessageType.CALL, self._seqid)
    args = selectKeysRecord_args()
    args.keys = keys
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysRecord failed: unknown result");

  def selectKeysRecordTime(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
    return self.recv_selectKeysRecordTime()

  def send_selectKeysRecordTime(self, keys, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysRecordTime', TMessageType.CALL, self._seqid)
    args = selectKeysRecordTime_args()
    args.keys = keys
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysRecordTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysRecordTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysRecordTime failed: unknown result");

  def selectKeysRecordTimestr(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment)
    return self.recv_selectKeysRecordTimestr()

  def send_selectKeysRecordTimestr(self, keys, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysRecordTimestr', TMessageType.CALL, self._seqid)
    args = selectKeysRecordTimestr_args()
    args.keys = keys
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysRecordTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysRecordTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysRecordTimestr failed: unknown result");

  def selectKeysRecords(self, keys, records, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysRecords(keys, records, creds, transaction, environment)
    return self.recv_selectKeysRecords()

  def send_selectKeysRecords(self, keys, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysRecords', TMessageType.CALL, self._seqid)
    args = selectKeysRecords_args()
    args.keys = keys
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysRecords failed: unknown result");

  def selectKeyRecords(self, key, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyRecords(key, records, creds, transaction, environment)
    return self.recv_selectKeyRecords()

  def send_selectKeyRecords(self, key, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyRecords', TMessageType.CALL, self._seqid)
    args = selectKeyRecords_args()
    args.key = key
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyRecords failed: unknown result");

  def selectKeyRecordsTime(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
    return self.recv_selectKeyRecordsTime()

  def send_selectKeyRecordsTime(self, key, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyRecordsTime', TMessageType.CALL, self._seqid)
    args = selectKeyRecordsTime_args()
    args.key = key
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyRecordsTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyRecordsTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyRecordsTime failed: unknown result");

  def selectKeyRecordsTimestr(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment)
    return self.recv_selectKeyRecordsTimestr()

  def send_selectKeyRecordsTimestr(self, key, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyRecordsTimestr', TMessageType.CALL, self._seqid)
    args = selectKeyRecordsTimestr_args()
    args.key = key
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyRecordsTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyRecordsTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyRecordsTimestr failed: unknown result");

  def selectKeysRecordsTime(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
    return self.recv_selectKeysRecordsTime()

  def send_selectKeysRecordsTime(self, keys, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysRecordsTime', TMessageType.CALL, self._seqid)
    args = selectKeysRecordsTime_args()
    args.keys = keys
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysRecordsTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysRecordsTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysRecordsTime failed: unknown result");

  def selectKeysRecordsTimestr(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment)
    return self.recv_selectKeysRecordsTimestr()

  def send_selectKeysRecordsTimestr(self, keys, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysRecordsTimestr', TMessageType.CALL, self._seqid)
    args = selectKeysRecordsTimestr_args()
    args.keys = keys
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysRecordsTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysRecordsTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysRecordsTimestr failed: unknown result");

  def selectCriteria(self, criteria, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - creds
     - transaction
     - environment
    """
    self.send_selectCriteria(criteria, creds, transaction, environment)
    return self.recv_selectCriteria()

  def send_selectCriteria(self, criteria, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectCriteria', TMessageType.CALL, self._seqid)
    args = selectCriteria_args()
    args.criteria = criteria
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectCriteria(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectCriteria_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectCriteria failed: unknown result");

  def selectCcl(self, ccl, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - creds
     - transaction
     - environment
    """
    self.send_selectCcl(ccl, creds, transaction, environment)
    return self.recv_selectCcl()

  def send_selectCcl(self, ccl, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectCcl', TMessageType.CALL, self._seqid)
    args = selectCcl_args()
    args.ccl = ccl
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectCcl(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectCcl_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectCcl failed: unknown result");

  def selectCriteriaTime(self, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectCriteriaTime(criteria, timestamp, creds, transaction, environment)
    return self.recv_selectCriteriaTime()

  def send_selectCriteriaTime(self, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectCriteriaTime', TMessageType.CALL, self._seqid)
    args = selectCriteriaTime_args()
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectCriteriaTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectCriteriaTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectCriteriaTime failed: unknown result");

  def selectCriteriaTimestr(self, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectCriteriaTimestr(criteria, timestamp, creds, transaction, environment)
    return self.recv_selectCriteriaTimestr()

  def send_selectCriteriaTimestr(self, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectCriteriaTimestr', TMessageType.CALL, self._seqid)
    args = selectCriteriaTimestr_args()
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectCriteriaTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectCriteriaTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectCriteriaTimestr failed: unknown result");

  def selectCclTime(self, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectCclTime(ccl, timestamp, creds, transaction, environment)
    return self.recv_selectCclTime()

  def send_selectCclTime(self, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectCclTime', TMessageType.CALL, self._seqid)
    args = selectCclTime_args()
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectCclTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectCclTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectCclTime failed: unknown result");

  def selectCclTimestr(self, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectCclTimestr(ccl, timestamp, creds, transaction, environment)
    return self.recv_selectCclTimestr()

  def send_selectCclTimestr(self, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectCclTimestr', TMessageType.CALL, self._seqid)
    args = selectCclTimestr_args()
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectCclTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectCclTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectCclTimestr failed: unknown result");

  def selectKeyCriteria(self, key, criteria, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyCriteria(key, criteria, creds, transaction, environment)
    return self.recv_selectKeyCriteria()

  def send_selectKeyCriteria(self, key, criteria, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyCriteria', TMessageType.CALL, self._seqid)
    args = selectKeyCriteria_args()
    args.key = key
    args.criteria = criteria
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyCriteria(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyCriteria_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyCriteria failed: unknown result");

  def selectKeyCcl(self, key, ccl, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyCcl(key, ccl, creds, transaction, environment)
    return self.recv_selectKeyCcl()

  def send_selectKeyCcl(self, key, ccl, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyCcl', TMessageType.CALL, self._seqid)
    args = selectKeyCcl_args()
    args.key = key
    args.ccl = ccl
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyCcl(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyCcl_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyCcl failed: unknown result");

  def selectKeyCriteriaTime(self, key, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment)
    return self.recv_selectKeyCriteriaTime()

  def send_selectKeyCriteriaTime(self, key, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyCriteriaTime', TMessageType.CALL, self._seqid)
    args = selectKeyCriteriaTime_args()
    args.key = key
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyCriteriaTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyCriteriaTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyCriteriaTime failed: unknown result");

  def selectKeyCriteriaTimestr(self, key, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment)
    return self.recv_selectKeyCriteriaTimestr()

  def send_selectKeyCriteriaTimestr(self, key, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyCriteriaTimestr', TMessageType.CALL, self._seqid)
    args = selectKeyCriteriaTimestr_args()
    args.key = key
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyCriteriaTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyCriteriaTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyCriteriaTimestr failed: unknown result");

  def selectKeyCclTime(self, key, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyCclTime(key, ccl, timestamp, creds, transaction, environment)
    return self.recv_selectKeyCclTime()

  def send_selectKeyCclTime(self, key, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyCclTime', TMessageType.CALL, self._seqid)
    args = selectKeyCclTime_args()
    args.key = key
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyCclTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyCclTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyCclTime failed: unknown result");

  def selectKeyCclTimestr(self, key, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment)
    return self.recv_selectKeyCclTimestr()

  def send_selectKeyCclTimestr(self, key, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeyCclTimestr', TMessageType.CALL, self._seqid)
    args = selectKeyCclTimestr_args()
    args.key = key
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeyCclTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeyCclTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeyCclTimestr failed: unknown result");

  def selectKeysCriteria(self, keys, criteria, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysCriteria(keys, criteria, creds, transaction, environment)
    return self.recv_selectKeysCriteria()

  def send_selectKeysCriteria(self, keys, criteria, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysCriteria', TMessageType.CALL, self._seqid)
    args = selectKeysCriteria_args()
    args.keys = keys
    args.criteria = criteria
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysCriteria(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysCriteria_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysCriteria failed: unknown result");

  def selectKeysCcl(self, keys, ccl, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysCcl(keys, ccl, creds, transaction, environment)
    return self.recv_selectKeysCcl()

  def send_selectKeysCcl(self, keys, ccl, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysCcl', TMessageType.CALL, self._seqid)
    args = selectKeysCcl_args()
    args.keys = keys
    args.ccl = ccl
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysCcl(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysCcl_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysCcl failed: unknown result");

  def selectKeysCriteriaTime(self, keys, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment)
    return self.recv_selectKeysCriteriaTime()

  def send_selectKeysCriteriaTime(self, keys, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysCriteriaTime', TMessageType.CALL, self._seqid)
    args = selectKeysCriteriaTime_args()
    args.keys = keys
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysCriteriaTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysCriteriaTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysCriteriaTime failed: unknown result");

  def selectKeysCriteriaTimestr(self, keys, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment)
    return self.recv_selectKeysCriteriaTimestr()

  def send_selectKeysCriteriaTimestr(self, keys, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysCriteriaTimestr', TMessageType.CALL, self._seqid)
    args = selectKeysCriteriaTimestr_args()
    args.keys = keys
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysCriteriaTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysCriteriaTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysCriteriaTimestr failed: unknown result");

  def selectKeysCclTime(self, keys, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysCclTime(keys, ccl, timestamp, creds, transaction, environment)
    return self.recv_selectKeysCclTime()

  def send_selectKeysCclTime(self, keys, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysCclTime', TMessageType.CALL, self._seqid)
    args = selectKeysCclTime_args()
    args.keys = keys
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysCclTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysCclTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysCclTime failed: unknown result");

  def selectKeysCclTimestr(self, keys, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_selectKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment)
    return self.recv_selectKeysCclTimestr()

  def send_selectKeysCclTimestr(self, keys, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('selectKeysCclTimestr', TMessageType.CALL, self._seqid)
    args = selectKeysCclTimestr_args()
    args.keys = keys
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_selectKeysCclTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = selectKeysCclTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "selectKeysCclTimestr failed: unknown result");

  def getKeyRecord(self, key, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - creds
     - transaction
     - environment
    """
    self.send_getKeyRecord(key, record, creds, transaction, environment)
    return self.recv_getKeyRecord()

  def send_getKeyRecord(self, key, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyRecord', TMessageType.CALL, self._seqid)
    args = getKeyRecord_args()
    args.key = key
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyRecord failed: unknown result");

  def getKeyRecordTime(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeyRecordTime(key, record, timestamp, creds, transaction, environment)
    return self.recv_getKeyRecordTime()

  def send_getKeyRecordTime(self, key, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyRecordTime', TMessageType.CALL, self._seqid)
    args = getKeyRecordTime_args()
    args.key = key
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyRecordTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyRecordTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyRecordTime failed: unknown result");

  def getKeyRecordTimestr(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeyRecordTimestr(key, record, timestamp, creds, transaction, environment)
    return self.recv_getKeyRecordTimestr()

  def send_getKeyRecordTimestr(self, key, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyRecordTimestr', TMessageType.CALL, self._seqid)
    args = getKeyRecordTimestr_args()
    args.key = key
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyRecordTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyRecordTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyRecordTimestr failed: unknown result");

  def getKeysRecord(self, keys, record, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - creds
     - transaction
     - environment
    """
    self.send_getKeysRecord(keys, record, creds, transaction, environment)
    return self.recv_getKeysRecord()

  def send_getKeysRecord(self, keys, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysRecord', TMessageType.CALL, self._seqid)
    args = getKeysRecord_args()
    args.keys = keys
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysRecord failed: unknown result");

  def getKeysRecordTime(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
    return self.recv_getKeysRecordTime()

  def send_getKeysRecordTime(self, keys, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysRecordTime', TMessageType.CALL, self._seqid)
    args = getKeysRecordTime_args()
    args.keys = keys
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysRecordTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysRecordTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysRecordTime failed: unknown result");

  def getKeysRecordTimestr(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment)
    return self.recv_getKeysRecordTimestr()

  def send_getKeysRecordTimestr(self, keys, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysRecordTimestr', TMessageType.CALL, self._seqid)
    args = getKeysRecordTimestr_args()
    args.keys = keys
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysRecordTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysRecordTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysRecordTimestr failed: unknown result");

  def getKeysRecords(self, keys, records, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - creds
     - transaction
     - environment
    """
    self.send_getKeysRecords(keys, records, creds, transaction, environment)
    return self.recv_getKeysRecords()

  def send_getKeysRecords(self, keys, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysRecords', TMessageType.CALL, self._seqid)
    args = getKeysRecords_args()
    args.keys = keys
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysRecords failed: unknown result");

  def getKeyRecords(self, key, records, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - creds
     - transaction
     - environment
    """
    self.send_getKeyRecords(key, records, creds, transaction, environment)
    return self.recv_getKeyRecords()

  def send_getKeyRecords(self, key, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyRecords', TMessageType.CALL, self._seqid)
    args = getKeyRecords_args()
    args.key = key
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyRecords failed: unknown result");

  def getKeyRecordsTime(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
    return self.recv_getKeyRecordsTime()

  def send_getKeyRecordsTime(self, key, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyRecordsTime', TMessageType.CALL, self._seqid)
    args = getKeyRecordsTime_args()
    args.key = key
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyRecordsTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyRecordsTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyRecordsTime failed: unknown result");

  def getKeyRecordsTimestr(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment)
    return self.recv_getKeyRecordsTimestr()

  def send_getKeyRecordsTimestr(self, key, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyRecordsTimestr', TMessageType.CALL, self._seqid)
    args = getKeyRecordsTimestr_args()
    args.key = key
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyRecordsTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyRecordsTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyRecordsTimestr failed: unknown result");

  def getKeysRecordsTime(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
    return self.recv_getKeysRecordsTime()

  def send_getKeysRecordsTime(self, keys, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysRecordsTime', TMessageType.CALL, self._seqid)
    args = getKeysRecordsTime_args()
    args.keys = keys
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysRecordsTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysRecordsTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysRecordsTime failed: unknown result");

  def getKeysRecordsTimestr(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment)
    return self.recv_getKeysRecordsTimestr()

  def send_getKeysRecordsTimestr(self, keys, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysRecordsTimestr', TMessageType.CALL, self._seqid)
    args = getKeysRecordsTimestr_args()
    args.keys = keys
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysRecordsTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysRecordsTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysRecordsTimestr failed: unknown result");

  def getKeyCriteria(self, key, criteria, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - creds
     - transaction
     - environment
    """
    self.send_getKeyCriteria(key, criteria, creds, transaction, environment)
    return self.recv_getKeyCriteria()

  def send_getKeyCriteria(self, key, criteria, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyCriteria', TMessageType.CALL, self._seqid)
    args = getKeyCriteria_args()
    args.key = key
    args.criteria = criteria
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyCriteria(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyCriteria_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyCriteria failed: unknown result");

  def getCriteria(self, criteria, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - creds
     - transaction
     - environment
    """
    self.send_getCriteria(criteria, creds, transaction, environment)
    return self.recv_getCriteria()

  def send_getCriteria(self, criteria, creds, transaction, environment):
    self._oprot.writeMessageBegin('getCriteria', TMessageType.CALL, self._seqid)
    args = getCriteria_args()
    args.criteria = criteria
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCriteria(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCriteria_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCriteria failed: unknown result");

  def getCcl(self, ccl, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - creds
     - transaction
     - environment
    """
    self.send_getCcl(ccl, creds, transaction, environment)
    return self.recv_getCcl()

  def send_getCcl(self, ccl, creds, transaction, environment):
    self._oprot.writeMessageBegin('getCcl', TMessageType.CALL, self._seqid)
    args = getCcl_args()
    args.ccl = ccl
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCcl(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCcl_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCcl failed: unknown result");

  def getCriteriaTime(self, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getCriteriaTime(criteria, timestamp, creds, transaction, environment)
    return self.recv_getCriteriaTime()

  def send_getCriteriaTime(self, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getCriteriaTime', TMessageType.CALL, self._seqid)
    args = getCriteriaTime_args()
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCriteriaTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCriteriaTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCriteriaTime failed: unknown result");

  def getCriteriaTimestr(self, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getCriteriaTimestr(criteria, timestamp, creds, transaction, environment)
    return self.recv_getCriteriaTimestr()

  def send_getCriteriaTimestr(self, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getCriteriaTimestr', TMessageType.CALL, self._seqid)
    args = getCriteriaTimestr_args()
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCriteriaTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCriteriaTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCriteriaTimestr failed: unknown result");

  def getCclTime(self, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getCclTime(ccl, timestamp, creds, transaction, environment)
    return self.recv_getCclTime()

  def send_getCclTime(self, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getCclTime', TMessageType.CALL, self._seqid)
    args = getCclTime_args()
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCclTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCclTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCclTime failed: unknown result");

  def getCclTimestr(self, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getCclTimestr(ccl, timestamp, creds, transaction, environment)
    return self.recv_getCclTimestr()

  def send_getCclTimestr(self, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getCclTimestr', TMessageType.CALL, self._seqid)
    args = getCclTimestr_args()
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCclTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCclTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCclTimestr failed: unknown result");

  def getKeyCcl(self, key, ccl, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - creds
     - transaction
     - environment
    """
    self.send_getKeyCcl(key, ccl, creds, transaction, environment)
    return self.recv_getKeyCcl()

  def send_getKeyCcl(self, key, ccl, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyCcl', TMessageType.CALL, self._seqid)
    args = getKeyCcl_args()
    args.key = key
    args.ccl = ccl
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyCcl(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyCcl_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyCcl failed: unknown result");

  def getKeyCriteriaTime(self, key, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment)
    return self.recv_getKeyCriteriaTime()

  def send_getKeyCriteriaTime(self, key, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyCriteriaTime', TMessageType.CALL, self._seqid)
    args = getKeyCriteriaTime_args()
    args.key = key
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyCriteriaTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyCriteriaTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyCriteriaTime failed: unknown result");

  def getKeyCriteriaTimestr(self, key, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment)
    return self.recv_getKeyCriteriaTimestr()

  def send_getKeyCriteriaTimestr(self, key, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyCriteriaTimestr', TMessageType.CALL, self._seqid)
    args = getKeyCriteriaTimestr_args()
    args.key = key
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyCriteriaTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyCriteriaTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyCriteriaTimestr failed: unknown result");

  def getKeyCclTime(self, key, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeyCclTime(key, ccl, timestamp, creds, transaction, environment)
    return self.recv_getKeyCclTime()

  def send_getKeyCclTime(self, key, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyCclTime', TMessageType.CALL, self._seqid)
    args = getKeyCclTime_args()
    args.key = key
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyCclTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyCclTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyCclTime failed: unknown result");

  def getKeyCclTimestr(self, key, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment)
    return self.recv_getKeyCclTimestr()

  def send_getKeyCclTimestr(self, key, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeyCclTimestr', TMessageType.CALL, self._seqid)
    args = getKeyCclTimestr_args()
    args.key = key
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeyCclTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeyCclTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeyCclTimestr failed: unknown result");

  def getKeysCriteria(self, keys, criteria, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - creds
     - transaction
     - environment
    """
    self.send_getKeysCriteria(keys, criteria, creds, transaction, environment)
    return self.recv_getKeysCriteria()

  def send_getKeysCriteria(self, keys, criteria, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysCriteria', TMessageType.CALL, self._seqid)
    args = getKeysCriteria_args()
    args.keys = keys
    args.criteria = criteria
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysCriteria(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysCriteria_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysCriteria failed: unknown result");

  def getKeysCcl(self, keys, ccl, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - creds
     - transaction
     - environment
    """
    self.send_getKeysCcl(keys, ccl, creds, transaction, environment)
    return self.recv_getKeysCcl()

  def send_getKeysCcl(self, keys, ccl, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysCcl', TMessageType.CALL, self._seqid)
    args = getKeysCcl_args()
    args.keys = keys
    args.ccl = ccl
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysCcl(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysCcl_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysCcl failed: unknown result");

  def getKeysCriteriaTime(self, keys, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment)
    return self.recv_getKeysCriteriaTime()

  def send_getKeysCriteriaTime(self, keys, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysCriteriaTime', TMessageType.CALL, self._seqid)
    args = getKeysCriteriaTime_args()
    args.keys = keys
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysCriteriaTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysCriteriaTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysCriteriaTime failed: unknown result");

  def getKeysCriteriaTimestr(self, keys, criteria, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - criteria
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment)
    return self.recv_getKeysCriteriaTimestr()

  def send_getKeysCriteriaTimestr(self, keys, criteria, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysCriteriaTimestr', TMessageType.CALL, self._seqid)
    args = getKeysCriteriaTimestr_args()
    args.keys = keys
    args.criteria = criteria
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysCriteriaTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysCriteriaTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysCriteriaTimestr failed: unknown result");

  def getKeysCclTime(self, keys, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeysCclTime(keys, ccl, timestamp, creds, transaction, environment)
    return self.recv_getKeysCclTime()

  def send_getKeysCclTime(self, keys, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysCclTime', TMessageType.CALL, self._seqid)
    args = getKeysCclTime_args()
    args.keys = keys
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysCclTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysCclTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysCclTime failed: unknown result");

  def getKeysCclTimestr(self, keys, ccl, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - ccl
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_getKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment)
    return self.recv_getKeysCclTimestr()

  def send_getKeysCclTimestr(self, keys, ccl, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('getKeysCclTimestr', TMessageType.CALL, self._seqid)
    args = getKeysCclTimestr_args()
    args.keys = keys
    args.ccl = ccl
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getKeysCclTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getKeysCclTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getKeysCclTimestr failed: unknown result");

  def verifyKeyValueRecord(self, key, value, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - creds
     - transaction
     - environment
    """
    self.send_verifyKeyValueRecord(key, value, record, creds, transaction, environment)
    return self.recv_verifyKeyValueRecord()

  def send_verifyKeyValueRecord(self, key, value, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('verifyKeyValueRecord', TMessageType.CALL, self._seqid)
    args = verifyKeyValueRecord_args()
    args.key = key
    args.value = value
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_verifyKeyValueRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = verifyKeyValueRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "verifyKeyValueRecord failed: unknown result");

  def verifyKeyValueRecordTime(self, key, value, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_verifyKeyValueRecordTime(key, value, record, timestamp, creds, transaction, environment)
    return self.recv_verifyKeyValueRecordTime()

  def send_verifyKeyValueRecordTime(self, key, value, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('verifyKeyValueRecordTime', TMessageType.CALL, self._seqid)
    args = verifyKeyValueRecordTime_args()
    args.key = key
    args.value = value
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_verifyKeyValueRecordTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = verifyKeyValueRecordTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "verifyKeyValueRecordTime failed: unknown result");

  def verifyKeyValueRecordTimestr(self, key, value, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_verifyKeyValueRecordTimestr(key, value, record, timestamp, creds, transaction, environment)
    return self.recv_verifyKeyValueRecordTimestr()

  def send_verifyKeyValueRecordTimestr(self, key, value, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('verifyKeyValueRecordTimestr', TMessageType.CALL, self._seqid)
    args = verifyKeyValueRecordTimestr_args()
    args.key = key
    args.value = value
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_verifyKeyValueRecordTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = verifyKeyValueRecordTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "verifyKeyValueRecordTimestr failed: unknown result");

  def jsonifyRecords(self, records, identifier, creds, transaction, environment):
    """
    Parameters:
     - records
     - identifier
     - creds
     - transaction
     - environment
    """
    self.send_jsonifyRecords(records, identifier, creds, transaction, environment)
    return self.recv_jsonifyRecords()

  def send_jsonifyRecords(self, records, identifier, creds, transaction, environment):
    self._oprot.writeMessageBegin('jsonifyRecords', TMessageType.CALL, self._seqid)
    args = jsonifyRecords_args()
    args.records = records
    args.identifier = identifier
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_jsonifyRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = jsonifyRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "jsonifyRecords failed: unknown result");

  def jsonifyRecordsTime(self, records, timestamp, identifier, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - identifier
     - creds
     - transaction
     - environment
    """
    self.send_jsonifyRecordsTime(records, timestamp, identifier, creds, transaction, environment)
    return self.recv_jsonifyRecordsTime()

  def send_jsonifyRecordsTime(self, records, timestamp, identifier, creds, transaction, environment):
    self._oprot.writeMessageBegin('jsonifyRecordsTime', TMessageType.CALL, self._seqid)
    args = jsonifyRecordsTime_args()
    args.records = records
    args.timestamp = timestamp
    args.identifier = identifier
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_jsonifyRecordsTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = jsonifyRecordsTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "jsonifyRecordsTime failed: unknown result");

  def jsonifyRecordsTimestr(self, records, timestamp, identifier, creds, transaction, environment):
    """
    Parameters:
     - records
     - timestamp
     - identifier
     - creds
     - transaction
     - environment
    """
    self.send_jsonifyRecordsTimestr(records, timestamp, identifier, creds, transaction, environment)
    return self.recv_jsonifyRecordsTimestr()

  def send_jsonifyRecordsTimestr(self, records, timestamp, identifier, creds, transaction, environment):
    self._oprot.writeMessageBegin('jsonifyRecordsTimestr', TMessageType.CALL, self._seqid)
    args = jsonifyRecordsTimestr_args()
    args.records = records
    args.timestamp = timestamp
    args.identifier = identifier
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_jsonifyRecordsTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = jsonifyRecordsTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "jsonifyRecordsTimestr failed: unknown result");

  def findCriteria(self, criteria, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - creds
     - transaction
     - environment
    """
    self.send_findCriteria(criteria, creds, transaction, environment)
    return self.recv_findCriteria()

  def send_findCriteria(self, criteria, creds, transaction, environment):
    self._oprot.writeMessageBegin('findCriteria', TMessageType.CALL, self._seqid)
    args = findCriteria_args()
    args.criteria = criteria
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findCriteria(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findCriteria_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findCriteria failed: unknown result");

  def findCcl(self, ccl, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - creds
     - transaction
     - environment
    """
    self.send_findCcl(ccl, creds, transaction, environment)
    return self.recv_findCcl()

  def send_findCcl(self, ccl, creds, transaction, environment):
    self._oprot.writeMessageBegin('findCcl', TMessageType.CALL, self._seqid)
    args = findCcl_args()
    args.ccl = ccl
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findCcl(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findCcl_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findCcl failed: unknown result");

  def findKeyOperatorValues(self, key, operator, values, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - creds
     - transaction
     - environment
    """
    self.send_findKeyOperatorValues(key, operator, values, creds, transaction, environment)
    return self.recv_findKeyOperatorValues()

  def send_findKeyOperatorValues(self, key, operator, values, creds, transaction, environment):
    self._oprot.writeMessageBegin('findKeyOperatorValues', TMessageType.CALL, self._seqid)
    args = findKeyOperatorValues_args()
    args.key = key
    args.operator = operator
    args.values = values
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findKeyOperatorValues(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findKeyOperatorValues_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findKeyOperatorValues failed: unknown result");

  def findKeyOperatorValuesTime(self, key, operator, values, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_findKeyOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment)
    return self.recv_findKeyOperatorValuesTime()

  def send_findKeyOperatorValuesTime(self, key, operator, values, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('findKeyOperatorValuesTime', TMessageType.CALL, self._seqid)
    args = findKeyOperatorValuesTime_args()
    args.key = key
    args.operator = operator
    args.values = values
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findKeyOperatorValuesTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findKeyOperatorValuesTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findKeyOperatorValuesTime failed: unknown result");

  def findKeyOperatorValuesTimestr(self, key, operator, values, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_findKeyOperatorValuesTimestr(key, operator, values, timestamp, creds, transaction, environment)
    return self.recv_findKeyOperatorValuesTimestr()

  def send_findKeyOperatorValuesTimestr(self, key, operator, values, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('findKeyOperatorValuesTimestr', TMessageType.CALL, self._seqid)
    args = findKeyOperatorValuesTimestr_args()
    args.key = key
    args.operator = operator
    args.values = values
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findKeyOperatorValuesTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findKeyOperatorValuesTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findKeyOperatorValuesTimestr failed: unknown result");

  def findKeyOperatorstrValues(self, key, operator, values, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - creds
     - transaction
     - environment
    """
    self.send_findKeyOperatorstrValues(key, operator, values, creds, transaction, environment)
    return self.recv_findKeyOperatorstrValues()

  def send_findKeyOperatorstrValues(self, key, operator, values, creds, transaction, environment):
    self._oprot.writeMessageBegin('findKeyOperatorstrValues', TMessageType.CALL, self._seqid)
    args = findKeyOperatorstrValues_args()
    args.key = key
    args.operator = operator
    args.values = values
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findKeyOperatorstrValues(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findKeyOperatorstrValues_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findKeyOperatorstrValues failed: unknown result");

  def findKeyOperatorstrValuesTime(self, key, operator, values, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_findKeyOperatorstrValuesTime(key, operator, values, timestamp, creds, transaction, environment)
    return self.recv_findKeyOperatorstrValuesTime()

  def send_findKeyOperatorstrValuesTime(self, key, operator, values, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('findKeyOperatorstrValuesTime', TMessageType.CALL, self._seqid)
    args = findKeyOperatorstrValuesTime_args()
    args.key = key
    args.operator = operator
    args.values = values
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findKeyOperatorstrValuesTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findKeyOperatorstrValuesTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findKeyOperatorstrValuesTime failed: unknown result");

  def findKeyOperatorstrValuesTimestr(self, key, operator, values, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - operator
     - values
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_findKeyOperatorstrValuesTimestr(key, operator, values, timestamp, creds, transaction, environment)
    return self.recv_findKeyOperatorstrValuesTimestr()

  def send_findKeyOperatorstrValuesTimestr(self, key, operator, values, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('findKeyOperatorstrValuesTimestr', TMessageType.CALL, self._seqid)
    args = findKeyOperatorstrValuesTimestr_args()
    args.key = key
    args.operator = operator
    args.values = values
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findKeyOperatorstrValuesTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findKeyOperatorstrValuesTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findKeyOperatorstrValuesTimestr failed: unknown result");

  def search(self, key, query, creds, transaction, environment):
    """
    Parameters:
     - key
     - query
     - creds
     - transaction
     - environment
    """
    self.send_search(key, query, creds, transaction, environment)
    return self.recv_search()

  def send_search(self, key, query, creds, transaction, environment):
    self._oprot.writeMessageBegin('search', TMessageType.CALL, self._seqid)
    args = search_args()
    args.key = key
    args.query = query
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_search(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = search_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "search failed: unknown result");

  def auditRecord(self, record, creds, transaction, environment):
    """
    Parameters:
     - record
     - creds
     - transaction
     - environment
    """
    self.send_auditRecord(record, creds, transaction, environment)
    return self.recv_auditRecord()

  def send_auditRecord(self, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('auditRecord', TMessageType.CALL, self._seqid)
    args = auditRecord_args()
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_auditRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = auditRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "auditRecord failed: unknown result");

  def auditRecordStart(self, record, start, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - creds
     - transaction
     - environment
    """
    self.send_auditRecordStart(record, start, creds, transaction, environment)
    return self.recv_auditRecordStart()

  def send_auditRecordStart(self, record, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('auditRecordStart', TMessageType.CALL, self._seqid)
    args = auditRecordStart_args()
    args.record = record
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_auditRecordStart(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = auditRecordStart_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "auditRecordStart failed: unknown result");

  def auditRecordStartstr(self, record, start, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - creds
     - transaction
     - environment
    """
    self.send_auditRecordStartstr(record, start, creds, transaction, environment)
    return self.recv_auditRecordStartstr()

  def send_auditRecordStartstr(self, record, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('auditRecordStartstr', TMessageType.CALL, self._seqid)
    args = auditRecordStartstr_args()
    args.record = record
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_auditRecordStartstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = auditRecordStartstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "auditRecordStartstr failed: unknown result");

  def auditRecordStartEnd(self, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_auditRecordStartEnd(record, start, tend, creds, transaction, environment)
    return self.recv_auditRecordStartEnd()

  def send_auditRecordStartEnd(self, record, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('auditRecordStartEnd', TMessageType.CALL, self._seqid)
    args = auditRecordStartEnd_args()
    args.record = record
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_auditRecordStartEnd(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = auditRecordStartEnd_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "auditRecordStartEnd failed: unknown result");

  def auditRecordStartstrEndstr(self, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_auditRecordStartstrEndstr(record, start, tend, creds, transaction, environment)
    return self.recv_auditRecordStartstrEndstr()

  def send_auditRecordStartstrEndstr(self, record, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('auditRecordStartstrEndstr', TMessageType.CALL, self._seqid)
    args = auditRecordStartstrEndstr_args()
    args.record = record
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_auditRecordStartstrEndstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = auditRecordStartstrEndstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "auditRecordStartstrEndstr failed: unknown result");

  def auditKeyRecord(self, key, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - creds
     - transaction
     - environment
    """
    self.send_auditKeyRecord(key, record, creds, transaction, environment)
    return self.recv_auditKeyRecord()

  def send_auditKeyRecord(self, key, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('auditKeyRecord', TMessageType.CALL, self._seqid)
    args = auditKeyRecord_args()
    args.key = key
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_auditKeyRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = auditKeyRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "auditKeyRecord failed: unknown result");

  def auditKeyRecordStart(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    self.send_auditKeyRecordStart(key, record, start, creds, transaction, environment)
    return self.recv_auditKeyRecordStart()

  def send_auditKeyRecordStart(self, key, record, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('auditKeyRecordStart', TMessageType.CALL, self._seqid)
    args = auditKeyRecordStart_args()
    args.key = key
    args.record = record
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_auditKeyRecordStart(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = auditKeyRecordStart_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "auditKeyRecordStart failed: unknown result");

  def auditKeyRecordStartstr(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    self.send_auditKeyRecordStartstr(key, record, start, creds, transaction, environment)
    return self.recv_auditKeyRecordStartstr()

  def send_auditKeyRecordStartstr(self, key, record, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('auditKeyRecordStartstr', TMessageType.CALL, self._seqid)
    args = auditKeyRecordStartstr_args()
    args.key = key
    args.record = record
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_auditKeyRecordStartstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = auditKeyRecordStartstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "auditKeyRecordStartstr failed: unknown result");

  def auditKeyRecordStartEnd(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_auditKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment)
    return self.recv_auditKeyRecordStartEnd()

  def send_auditKeyRecordStartEnd(self, key, record, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('auditKeyRecordStartEnd', TMessageType.CALL, self._seqid)
    args = auditKeyRecordStartEnd_args()
    args.key = key
    args.record = record
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_auditKeyRecordStartEnd(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = auditKeyRecordStartEnd_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "auditKeyRecordStartEnd failed: unknown result");

  def auditKeyRecordStartstrEndstr(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_auditKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment)
    return self.recv_auditKeyRecordStartstrEndstr()

  def send_auditKeyRecordStartstrEndstr(self, key, record, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('auditKeyRecordStartstrEndstr', TMessageType.CALL, self._seqid)
    args = auditKeyRecordStartstrEndstr_args()
    args.key = key
    args.record = record
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_auditKeyRecordStartstrEndstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = auditKeyRecordStartstrEndstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "auditKeyRecordStartstrEndstr failed: unknown result");

  def chronologizeKeyRecord(self, key, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - creds
     - transaction
     - environment
    """
    self.send_chronologizeKeyRecord(key, record, creds, transaction, environment)
    return self.recv_chronologizeKeyRecord()

  def send_chronologizeKeyRecord(self, key, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('chronologizeKeyRecord', TMessageType.CALL, self._seqid)
    args = chronologizeKeyRecord_args()
    args.key = key
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_chronologizeKeyRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = chronologizeKeyRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "chronologizeKeyRecord failed: unknown result");

  def chronologizeKeyRecordStart(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    self.send_chronologizeKeyRecordStart(key, record, start, creds, transaction, environment)
    return self.recv_chronologizeKeyRecordStart()

  def send_chronologizeKeyRecordStart(self, key, record, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('chronologizeKeyRecordStart', TMessageType.CALL, self._seqid)
    args = chronologizeKeyRecordStart_args()
    args.key = key
    args.record = record
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_chronologizeKeyRecordStart(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = chronologizeKeyRecordStart_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "chronologizeKeyRecordStart failed: unknown result");

  def chronologizeKeyRecordStartstr(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    self.send_chronologizeKeyRecordStartstr(key, record, start, creds, transaction, environment)
    return self.recv_chronologizeKeyRecordStartstr()

  def send_chronologizeKeyRecordStartstr(self, key, record, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('chronologizeKeyRecordStartstr', TMessageType.CALL, self._seqid)
    args = chronologizeKeyRecordStartstr_args()
    args.key = key
    args.record = record
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_chronologizeKeyRecordStartstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = chronologizeKeyRecordStartstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "chronologizeKeyRecordStartstr failed: unknown result");

  def chronologizeKeyRecordStartEnd(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_chronologizeKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment)
    return self.recv_chronologizeKeyRecordStartEnd()

  def send_chronologizeKeyRecordStartEnd(self, key, record, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('chronologizeKeyRecordStartEnd', TMessageType.CALL, self._seqid)
    args = chronologizeKeyRecordStartEnd_args()
    args.key = key
    args.record = record
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_chronologizeKeyRecordStartEnd(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = chronologizeKeyRecordStartEnd_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "chronologizeKeyRecordStartEnd failed: unknown result");

  def chronologizeKeyRecordStartstrEndstr(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_chronologizeKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment)
    return self.recv_chronologizeKeyRecordStartstrEndstr()

  def send_chronologizeKeyRecordStartstrEndstr(self, key, record, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('chronologizeKeyRecordStartstrEndstr', TMessageType.CALL, self._seqid)
    args = chronologizeKeyRecordStartstrEndstr_args()
    args.key = key
    args.record = record
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_chronologizeKeyRecordStartstrEndstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = chronologizeKeyRecordStartstrEndstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "chronologizeKeyRecordStartstrEndstr failed: unknown result");

  def diffRecordStart(self, record, start, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - creds
     - transaction
     - environment
    """
    self.send_diffRecordStart(record, start, creds, transaction, environment)
    return self.recv_diffRecordStart()

  def send_diffRecordStart(self, record, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffRecordStart', TMessageType.CALL, self._seqid)
    args = diffRecordStart_args()
    args.record = record
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffRecordStart(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffRecordStart_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffRecordStart failed: unknown result");

  def diffRecordStartstr(self, record, start, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - creds
     - transaction
     - environment
    """
    self.send_diffRecordStartstr(record, start, creds, transaction, environment)
    return self.recv_diffRecordStartstr()

  def send_diffRecordStartstr(self, record, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffRecordStartstr', TMessageType.CALL, self._seqid)
    args = diffRecordStartstr_args()
    args.record = record
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffRecordStartstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffRecordStartstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffRecordStartstr failed: unknown result");

  def diffRecordStartEnd(self, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_diffRecordStartEnd(record, start, tend, creds, transaction, environment)
    return self.recv_diffRecordStartEnd()

  def send_diffRecordStartEnd(self, record, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffRecordStartEnd', TMessageType.CALL, self._seqid)
    args = diffRecordStartEnd_args()
    args.record = record
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffRecordStartEnd(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffRecordStartEnd_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffRecordStartEnd failed: unknown result");

  def diffRecordStartstrEndstr(self, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_diffRecordStartstrEndstr(record, start, tend, creds, transaction, environment)
    return self.recv_diffRecordStartstrEndstr()

  def send_diffRecordStartstrEndstr(self, record, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffRecordStartstrEndstr', TMessageType.CALL, self._seqid)
    args = diffRecordStartstrEndstr_args()
    args.record = record
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffRecordStartstrEndstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffRecordStartstrEndstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffRecordStartstrEndstr failed: unknown result");

  def diffKeyRecordStart(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    self.send_diffKeyRecordStart(key, record, start, creds, transaction, environment)
    return self.recv_diffKeyRecordStart()

  def send_diffKeyRecordStart(self, key, record, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffKeyRecordStart', TMessageType.CALL, self._seqid)
    args = diffKeyRecordStart_args()
    args.key = key
    args.record = record
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffKeyRecordStart(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffKeyRecordStart_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffKeyRecordStart failed: unknown result");

  def diffKeyRecordStartstr(self, key, record, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - creds
     - transaction
     - environment
    """
    self.send_diffKeyRecordStartstr(key, record, start, creds, transaction, environment)
    return self.recv_diffKeyRecordStartstr()

  def send_diffKeyRecordStartstr(self, key, record, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffKeyRecordStartstr', TMessageType.CALL, self._seqid)
    args = diffKeyRecordStartstr_args()
    args.key = key
    args.record = record
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffKeyRecordStartstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffKeyRecordStartstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffKeyRecordStartstr failed: unknown result");

  def diffKeyRecordStartEnd(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_diffKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment)
    return self.recv_diffKeyRecordStartEnd()

  def send_diffKeyRecordStartEnd(self, key, record, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffKeyRecordStartEnd', TMessageType.CALL, self._seqid)
    args = diffKeyRecordStartEnd_args()
    args.key = key
    args.record = record
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffKeyRecordStartEnd(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffKeyRecordStartEnd_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffKeyRecordStartEnd failed: unknown result");

  def diffKeyRecordStartstrEndstr(self, key, record, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_diffKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment)
    return self.recv_diffKeyRecordStartstrEndstr()

  def send_diffKeyRecordStartstrEndstr(self, key, record, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffKeyRecordStartstrEndstr', TMessageType.CALL, self._seqid)
    args = diffKeyRecordStartstrEndstr_args()
    args.key = key
    args.record = record
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffKeyRecordStartstrEndstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffKeyRecordStartstrEndstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffKeyRecordStartstrEndstr failed: unknown result");

  def diffKeyStart(self, key, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - start
     - creds
     - transaction
     - environment
    """
    self.send_diffKeyStart(key, start, creds, transaction, environment)
    return self.recv_diffKeyStart()

  def send_diffKeyStart(self, key, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffKeyStart', TMessageType.CALL, self._seqid)
    args = diffKeyStart_args()
    args.key = key
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffKeyStart(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffKeyStart_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffKeyStart failed: unknown result");

  def diffKeyStartstr(self, key, start, creds, transaction, environment):
    """
    Parameters:
     - key
     - start
     - creds
     - transaction
     - environment
    """
    self.send_diffKeyStartstr(key, start, creds, transaction, environment)
    return self.recv_diffKeyStartstr()

  def send_diffKeyStartstr(self, key, start, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffKeyStartstr', TMessageType.CALL, self._seqid)
    args = diffKeyStartstr_args()
    args.key = key
    args.start = start
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffKeyStartstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffKeyStartstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffKeyStartstr failed: unknown result");

  def diffKeyStartEnd(self, key, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_diffKeyStartEnd(key, start, tend, creds, transaction, environment)
    return self.recv_diffKeyStartEnd()

  def send_diffKeyStartEnd(self, key, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffKeyStartEnd', TMessageType.CALL, self._seqid)
    args = diffKeyStartEnd_args()
    args.key = key
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffKeyStartEnd(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffKeyStartEnd_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffKeyStartEnd failed: unknown result");

  def diffKeyStartstrEndstr(self, key, start, tend, creds, transaction, environment):
    """
    Parameters:
     - key
     - start
     - tend
     - creds
     - transaction
     - environment
    """
    self.send_diffKeyStartstrEndstr(key, start, tend, creds, transaction, environment)
    return self.recv_diffKeyStartstrEndstr()

  def send_diffKeyStartstrEndstr(self, key, start, tend, creds, transaction, environment):
    self._oprot.writeMessageBegin('diffKeyStartstrEndstr', TMessageType.CALL, self._seqid)
    args = diffKeyStartstrEndstr_args()
    args.key = key
    args.start = start
    args.tend = tend
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_diffKeyStartstrEndstr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = diffKeyStartstrEndstr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "diffKeyStartstrEndstr failed: unknown result");

  def revertKeysRecordsTime(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_revertKeysRecordsTime(keys, records, timestamp, creds, transaction, environment)
    self.recv_revertKeysRecordsTime()

  def send_revertKeysRecordsTime(self, keys, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('revertKeysRecordsTime', TMessageType.CALL, self._seqid)
    args = revertKeysRecordsTime_args()
    args.keys = keys
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revertKeysRecordsTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = revertKeysRecordsTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    return

  def revertKeysRecordsTimestr(self, keys, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_revertKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment)
    self.recv_revertKeysRecordsTimestr()

  def send_revertKeysRecordsTimestr(self, keys, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('revertKeysRecordsTimestr', TMessageType.CALL, self._seqid)
    args = revertKeysRecordsTimestr_args()
    args.keys = keys
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revertKeysRecordsTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = revertKeysRecordsTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    return

  def revertKeysRecordTime(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_revertKeysRecordTime(keys, record, timestamp, creds, transaction, environment)
    self.recv_revertKeysRecordTime()

  def send_revertKeysRecordTime(self, keys, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('revertKeysRecordTime', TMessageType.CALL, self._seqid)
    args = revertKeysRecordTime_args()
    args.keys = keys
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revertKeysRecordTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = revertKeysRecordTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    return

  def revertKeysRecordTimestr(self, keys, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - keys
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_revertKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment)
    self.recv_revertKeysRecordTimestr()

  def send_revertKeysRecordTimestr(self, keys, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('revertKeysRecordTimestr', TMessageType.CALL, self._seqid)
    args = revertKeysRecordTimestr_args()
    args.keys = keys
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revertKeysRecordTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = revertKeysRecordTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    return

  def revertKeyRecordsTime(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_revertKeyRecordsTime(key, records, timestamp, creds, transaction, environment)
    self.recv_revertKeyRecordsTime()

  def send_revertKeyRecordsTime(self, key, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('revertKeyRecordsTime', TMessageType.CALL, self._seqid)
    args = revertKeyRecordsTime_args()
    args.key = key
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revertKeyRecordsTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = revertKeyRecordsTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    return

  def revertKeyRecordsTimestr(self, key, records, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - records
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_revertKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment)
    self.recv_revertKeyRecordsTimestr()

  def send_revertKeyRecordsTimestr(self, key, records, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('revertKeyRecordsTimestr', TMessageType.CALL, self._seqid)
    args = revertKeyRecordsTimestr_args()
    args.key = key
    args.records = records
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revertKeyRecordsTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = revertKeyRecordsTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    return

  def revertKeyRecordTime(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_revertKeyRecordTime(key, record, timestamp, creds, transaction, environment)
    self.recv_revertKeyRecordTime()

  def send_revertKeyRecordTime(self, key, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('revertKeyRecordTime', TMessageType.CALL, self._seqid)
    args = revertKeyRecordTime_args()
    args.key = key
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revertKeyRecordTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = revertKeyRecordTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    return

  def revertKeyRecordTimestr(self, key, record, timestamp, creds, transaction, environment):
    """
    Parameters:
     - key
     - record
     - timestamp
     - creds
     - transaction
     - environment
    """
    self.send_revertKeyRecordTimestr(key, record, timestamp, creds, transaction, environment)
    self.recv_revertKeyRecordTimestr()

  def send_revertKeyRecordTimestr(self, key, record, timestamp, creds, transaction, environment):
    self._oprot.writeMessageBegin('revertKeyRecordTimestr', TMessageType.CALL, self._seqid)
    args = revertKeyRecordTimestr_args()
    args.key = key
    args.record = record
    args.timestamp = timestamp
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_revertKeyRecordTimestr(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = revertKeyRecordTimestr_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    return

  def pingRecords(self, records, creds, transaction, environment):
    """
    Parameters:
     - records
     - creds
     - transaction
     - environment
    """
    self.send_pingRecords(records, creds, transaction, environment)
    return self.recv_pingRecords()

  def send_pingRecords(self, records, creds, transaction, environment):
    self._oprot.writeMessageBegin('pingRecords', TMessageType.CALL, self._seqid)
    args = pingRecords_args()
    args.records = records
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_pingRecords(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = pingRecords_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "pingRecords failed: unknown result");

  def pingRecord(self, record, creds, transaction, environment):
    """
    Parameters:
     - record
     - creds
     - transaction
     - environment
    """
    self.send_pingRecord(record, creds, transaction, environment)
    return self.recv_pingRecord()

  def send_pingRecord(self, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('pingRecord', TMessageType.CALL, self._seqid)
    args = pingRecord_args()
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_pingRecord(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = pingRecord_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "pingRecord failed: unknown result");

  def verifyAndSwap(self, key, expected, record, replacement, creds, transaction, environment):
    """
    Parameters:
     - key
     - expected
     - record
     - replacement
     - creds
     - transaction
     - environment
    """
    self.send_verifyAndSwap(key, expected, record, replacement, creds, transaction, environment)
    return self.recv_verifyAndSwap()

  def send_verifyAndSwap(self, key, expected, record, replacement, creds, transaction, environment):
    self._oprot.writeMessageBegin('verifyAndSwap', TMessageType.CALL, self._seqid)
    args = verifyAndSwap_args()
    args.key = key
    args.expected = expected
    args.record = record
    args.replacement = replacement
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_verifyAndSwap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = verifyAndSwap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "verifyAndSwap failed: unknown result");

  def verifyOrSet(self, key, value, record, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - record
     - creds
     - transaction
     - environment
    """
    self.send_verifyOrSet(key, value, record, creds, transaction, environment)
    self.recv_verifyOrSet()

  def send_verifyOrSet(self, key, value, record, creds, transaction, environment):
    self._oprot.writeMessageBegin('verifyOrSet', TMessageType.CALL, self._seqid)
    args = verifyOrSet_args()
    args.key = key
    args.value = value
    args.record = record
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_verifyOrSet(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = verifyOrSet_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    return

  def findOrAddKeyValue(self, key, value, creds, transaction, environment):
    """
    Parameters:
     - key
     - value
     - creds
     - transaction
     - environment
    """
    self.send_findOrAddKeyValue(key, value, creds, transaction, environment)
    return self.recv_findOrAddKeyValue()

  def send_findOrAddKeyValue(self, key, value, creds, transaction, environment):
    self._oprot.writeMessageBegin('findOrAddKeyValue', TMessageType.CALL, self._seqid)
    args = findOrAddKeyValue_args()
    args.key = key
    args.value = value
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findOrAddKeyValue(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findOrAddKeyValue_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    if result.ex4 is not None:
      raise result.ex4
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findOrAddKeyValue failed: unknown result");

  def findOrInsertCriteriaJson(self, criteria, json, creds, transaction, environment):
    """
    Parameters:
     - criteria
     - json
     - creds
     - transaction
     - environment
    """
    self.send_findOrInsertCriteriaJson(criteria, json, creds, transaction, environment)
    return self.recv_findOrInsertCriteriaJson()

  def send_findOrInsertCriteriaJson(self, criteria, json, creds, transaction, environment):
    self._oprot.writeMessageBegin('findOrInsertCriteriaJson', TMessageType.CALL, self._seqid)
    args = findOrInsertCriteriaJson_args()
    args.criteria = criteria
    args.json = json
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findOrInsertCriteriaJson(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findOrInsertCriteriaJson_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findOrInsertCriteriaJson failed: unknown result");

  def findOrInsertCclJson(self, ccl, json, creds, transaction, environment):
    """
    Parameters:
     - ccl
     - json
     - creds
     - transaction
     - environment
    """
    self.send_findOrInsertCclJson(ccl, json, creds, transaction, environment)
    return self.recv_findOrInsertCclJson()

  def send_findOrInsertCclJson(self, ccl, json, creds, transaction, environment):
    self._oprot.writeMessageBegin('findOrInsertCclJson', TMessageType.CALL, self._seqid)
    args = findOrInsertCclJson_args()
    args.ccl = ccl
    args.json = json
    args.creds = creds
    args.transaction = transaction
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findOrInsertCclJson(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = findOrInsertCclJson_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    if result.ex4 is not None:
      raise result.ex4
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findOrInsertCclJson failed: unknown result");

  def getServerEnvironment(self, creds, token, environment):
    """
    Parameters:
     - creds
     - token
     - environment
    """
    self.send_getServerEnvironment(creds, token, environment)
    return self.recv_getServerEnvironment()

  def send_getServerEnvironment(self, creds, token, environment):
    self._oprot.writeMessageBegin('getServerEnvironment', TMessageType.CALL, self._seqid)
    args = getServerEnvironment_args()
    args.creds = creds
    args.token = token
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getServerEnvironment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getServerEnvironment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getServerEnvironment failed: unknown result");

  def getServerVersion(self):
    self.send_getServerVersion()
    return self.recv_getServerVersion()

  def send_getServerVersion(self):
    self._oprot.writeMessageBegin('getServerVersion', TMessageType.CALL, self._seqid)
    args = getServerVersion_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getServerVersion(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getServerVersion_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getServerVersion failed: unknown result");

  def time(self, creds, token, environment):
    """
    Parameters:
     - creds
     - token
     - environment
    """
    self.send_time(creds, token, environment)
    return self.recv_time()

  def send_time(self, creds, token, environment):
    self._oprot.writeMessageBegin('time', TMessageType.CALL, self._seqid)
    args = time_args()
    args.creds = creds
    args.token = token
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_time(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = time_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "time failed: unknown result");

  def timePhrase(self, phrase, creds, token, environment):
    """
    Parameters:
     - phrase
     - creds
     - token
     - environment
    """
    self.send_timePhrase(phrase, creds, token, environment)
    return self.recv_timePhrase()

  def send_timePhrase(self, phrase, creds, token, environment):
    self._oprot.writeMessageBegin('timePhrase', TMessageType.CALL, self._seqid)
    args = timePhrase_args()
    args.phrase = phrase
    args.creds = creds
    args.token = token
    args.environment = environment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_timePhrase(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = timePhrase_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "timePhrase failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["addKeyValueRecord"] = Processor.process_addKeyValueRecord
    self._processMap["addKeyValue"] = Processor.process_addKeyValue
    self._processMap["addKeyValueRecords"] = Processor.process_addKeyValueRecords
    self._processMap["abort"] = Processor.process_abort
    self._processMap["commit"] = Processor.process_commit
    self._processMap["login"] = Processor.process_login
    self._processMap["logout"] = Processor.process_logout
    self._processMap["stage"] = Processor.process_stage
    self._processMap["clearRecord"] = Processor.process_clearRecord
    self._processMap["clearRecords"] = Processor.process_clearRecords
    self._processMap["clearKeyRecord"] = Processor.process_clearKeyRecord
    self._processMap["clearKeysRecord"] = Processor.process_clearKeysRecord
    self._processMap["clearKeyRecords"] = Processor.process_clearKeyRecords
    self._processMap["clearKeysRecords"] = Processor.process_clearKeysRecords
    self._processMap["insertJson"] = Processor.process_insertJson
    self._processMap["insertJsonRecord"] = Processor.process_insertJsonRecord
    self._processMap["insertJsonRecords"] = Processor.process_insertJsonRecords
    self._processMap["removeKeyValueRecord"] = Processor.process_removeKeyValueRecord
    self._processMap["removeKeyValueRecords"] = Processor.process_removeKeyValueRecords
    self._processMap["setKeyValueRecord"] = Processor.process_setKeyValueRecord
    self._processMap["setKeyValue"] = Processor.process_setKeyValue
    self._processMap["setKeyValueRecords"] = Processor.process_setKeyValueRecords
    self._processMap["inventory"] = Processor.process_inventory
    self._processMap["selectRecord"] = Processor.process_selectRecord
    self._processMap["selectRecords"] = Processor.process_selectRecords
    self._processMap["selectRecordTime"] = Processor.process_selectRecordTime
    self._processMap["selectRecordTimestr"] = Processor.process_selectRecordTimestr
    self._processMap["selectRecordsTime"] = Processor.process_selectRecordsTime
    self._processMap["selectRecordsTimestr"] = Processor.process_selectRecordsTimestr
    self._processMap["browseKey"] = Processor.process_browseKey
    self._processMap["browseKeys"] = Processor.process_browseKeys
    self._processMap["browseKeyTime"] = Processor.process_browseKeyTime
    self._processMap["browseKeyTimestr"] = Processor.process_browseKeyTimestr
    self._processMap["browseKeysTime"] = Processor.process_browseKeysTime
    self._processMap["browseKeysTimestr"] = Processor.process_browseKeysTimestr
    self._processMap["describeRecord"] = Processor.process_describeRecord
    self._processMap["describeRecordTime"] = Processor.process_describeRecordTime
    self._processMap["describeRecordTimestr"] = Processor.process_describeRecordTimestr
    self._processMap["describeRecords"] = Processor.process_describeRecords
    self._processMap["describeRecordsTime"] = Processor.process_describeRecordsTime
    self._processMap["describeRecordsTimestr"] = Processor.process_describeRecordsTimestr
    self._processMap["selectKeyRecord"] = Processor.process_selectKeyRecord
    self._processMap["selectKeyRecordTime"] = Processor.process_selectKeyRecordTime
    self._processMap["selectKeyRecordTimestr"] = Processor.process_selectKeyRecordTimestr
    self._processMap["selectKeysRecord"] = Processor.process_selectKeysRecord
    self._processMap["selectKeysRecordTime"] = Processor.process_selectKeysRecordTime
    self._processMap["selectKeysRecordTimestr"] = Processor.process_selectKeysRecordTimestr
    self._processMap["selectKeysRecords"] = Processor.process_selectKeysRecords
    self._processMap["selectKeyRecords"] = Processor.process_selectKeyRecords
    self._processMap["selectKeyRecordsTime"] = Processor.process_selectKeyRecordsTime
    self._processMap["selectKeyRecordsTimestr"] = Processor.process_selectKeyRecordsTimestr
    self._processMap["selectKeysRecordsTime"] = Processor.process_selectKeysRecordsTime
    self._processMap["selectKeysRecordsTimestr"] = Processor.process_selectKeysRecordsTimestr
    self._processMap["selectCriteria"] = Processor.process_selectCriteria
    self._processMap["selectCcl"] = Processor.process_selectCcl
    self._processMap["selectCriteriaTime"] = Processor.process_selectCriteriaTime
    self._processMap["selectCriteriaTimestr"] = Processor.process_selectCriteriaTimestr
    self._processMap["selectCclTime"] = Processor.process_selectCclTime
    self._processMap["selectCclTimestr"] = Processor.process_selectCclTimestr
    self._processMap["selectKeyCriteria"] = Processor.process_selectKeyCriteria
    self._processMap["selectKeyCcl"] = Processor.process_selectKeyCcl
    self._processMap["selectKeyCriteriaTime"] = Processor.process_selectKeyCriteriaTime
    self._processMap["selectKeyCriteriaTimestr"] = Processor.process_selectKeyCriteriaTimestr
    self._processMap["selectKeyCclTime"] = Processor.process_selectKeyCclTime
    self._processMap["selectKeyCclTimestr"] = Processor.process_selectKeyCclTimestr
    self._processMap["selectKeysCriteria"] = Processor.process_selectKeysCriteria
    self._processMap["selectKeysCcl"] = Processor.process_selectKeysCcl
    self._processMap["selectKeysCriteriaTime"] = Processor.process_selectKeysCriteriaTime
    self._processMap["selectKeysCriteriaTimestr"] = Processor.process_selectKeysCriteriaTimestr
    self._processMap["selectKeysCclTime"] = Processor.process_selectKeysCclTime
    self._processMap["selectKeysCclTimestr"] = Processor.process_selectKeysCclTimestr
    self._processMap["getKeyRecord"] = Processor.process_getKeyRecord
    self._processMap["getKeyRecordTime"] = Processor.process_getKeyRecordTime
    self._processMap["getKeyRecordTimestr"] = Processor.process_getKeyRecordTimestr
    self._processMap["getKeysRecord"] = Processor.process_getKeysRecord
    self._processMap["getKeysRecordTime"] = Processor.process_getKeysRecordTime
    self._processMap["getKeysRecordTimestr"] = Processor.process_getKeysRecordTimestr
    self._processMap["getKeysRecords"] = Processor.process_getKeysRecords
    self._processMap["getKeyRecords"] = Processor.process_getKeyRecords
    self._processMap["getKeyRecordsTime"] = Processor.process_getKeyRecordsTime
    self._processMap["getKeyRecordsTimestr"] = Processor.process_getKeyRecordsTimestr
    self._processMap["getKeysRecordsTime"] = Processor.process_getKeysRecordsTime
    self._processMap["getKeysRecordsTimestr"] = Processor.process_getKeysRecordsTimestr
    self._processMap["getKeyCriteria"] = Processor.process_getKeyCriteria
    self._processMap["getCriteria"] = Processor.process_getCriteria
    self._processMap["getCcl"] = Processor.process_getCcl
    self._processMap["getCriteriaTime"] = Processor.process_getCriteriaTime
    self._processMap["getCriteriaTimestr"] = Processor.process_getCriteriaTimestr
    self._processMap["getCclTime"] = Processor.process_getCclTime
    self._processMap["getCclTimestr"] = Processor.process_getCclTimestr
    self._processMap["getKeyCcl"] = Processor.process_getKeyCcl
    self._processMap["getKeyCriteriaTime"] = Processor.process_getKeyCriteriaTime
    self._processMap["getKeyCriteriaTimestr"] = Processor.process_getKeyCriteriaTimestr
    self._processMap["getKeyCclTime"] = Processor.process_getKeyCclTime
    self._processMap["getKeyCclTimestr"] = Processor.process_getKeyCclTimestr
    self._processMap["getKeysCriteria"] = Processor.process_getKeysCriteria
    self._processMap["getKeysCcl"] = Processor.process_getKeysCcl
    self._processMap["getKeysCriteriaTime"] = Processor.process_getKeysCriteriaTime
    self._processMap["getKeysCriteriaTimestr"] = Processor.process_getKeysCriteriaTimestr
    self._processMap["getKeysCclTime"] = Processor.process_getKeysCclTime
    self._processMap["getKeysCclTimestr"] = Processor.process_getKeysCclTimestr
    self._processMap["verifyKeyValueRecord"] = Processor.process_verifyKeyValueRecord
    self._processMap["verifyKeyValueRecordTime"] = Processor.process_verifyKeyValueRecordTime
    self._processMap["verifyKeyValueRecordTimestr"] = Processor.process_verifyKeyValueRecordTimestr
    self._processMap["jsonifyRecords"] = Processor.process_jsonifyRecords
    self._processMap["jsonifyRecordsTime"] = Processor.process_jsonifyRecordsTime
    self._processMap["jsonifyRecordsTimestr"] = Processor.process_jsonifyRecordsTimestr
    self._processMap["findCriteria"] = Processor.process_findCriteria
    self._processMap["findCcl"] = Processor.process_findCcl
    self._processMap["findKeyOperatorValues"] = Processor.process_findKeyOperatorValues
    self._processMap["findKeyOperatorValuesTime"] = Processor.process_findKeyOperatorValuesTime
    self._processMap["findKeyOperatorValuesTimestr"] = Processor.process_findKeyOperatorValuesTimestr
    self._processMap["findKeyOperatorstrValues"] = Processor.process_findKeyOperatorstrValues
    self._processMap["findKeyOperatorstrValuesTime"] = Processor.process_findKeyOperatorstrValuesTime
    self._processMap["findKeyOperatorstrValuesTimestr"] = Processor.process_findKeyOperatorstrValuesTimestr
    self._processMap["search"] = Processor.process_search
    self._processMap["auditRecord"] = Processor.process_auditRecord
    self._processMap["auditRecordStart"] = Processor.process_auditRecordStart
    self._processMap["auditRecordStartstr"] = Processor.process_auditRecordStartstr
    self._processMap["auditRecordStartEnd"] = Processor.process_auditRecordStartEnd
    self._processMap["auditRecordStartstrEndstr"] = Processor.process_auditRecordStartstrEndstr
    self._processMap["auditKeyRecord"] = Processor.process_auditKeyRecord
    self._processMap["auditKeyRecordStart"] = Processor.process_auditKeyRecordStart
    self._processMap["auditKeyRecordStartstr"] = Processor.process_auditKeyRecordStartstr
    self._processMap["auditKeyRecordStartEnd"] = Processor.process_auditKeyRecordStartEnd
    self._processMap["auditKeyRecordStartstrEndstr"] = Processor.process_auditKeyRecordStartstrEndstr
    self._processMap["chronologizeKeyRecord"] = Processor.process_chronologizeKeyRecord
    self._processMap["chronologizeKeyRecordStart"] = Processor.process_chronologizeKeyRecordStart
    self._processMap["chronologizeKeyRecordStartstr"] = Processor.process_chronologizeKeyRecordStartstr
    self._processMap["chronologizeKeyRecordStartEnd"] = Processor.process_chronologizeKeyRecordStartEnd
    self._processMap["chronologizeKeyRecordStartstrEndstr"] = Processor.process_chronologizeKeyRecordStartstrEndstr
    self._processMap["diffRecordStart"] = Processor.process_diffRecordStart
    self._processMap["diffRecordStartstr"] = Processor.process_diffRecordStartstr
    self._processMap["diffRecordStartEnd"] = Processor.process_diffRecordStartEnd
    self._processMap["diffRecordStartstrEndstr"] = Processor.process_diffRecordStartstrEndstr
    self._processMap["diffKeyRecordStart"] = Processor.process_diffKeyRecordStart
    self._processMap["diffKeyRecordStartstr"] = Processor.process_diffKeyRecordStartstr
    self._processMap["diffKeyRecordStartEnd"] = Processor.process_diffKeyRecordStartEnd
    self._processMap["diffKeyRecordStartstrEndstr"] = Processor.process_diffKeyRecordStartstrEndstr
    self._processMap["diffKeyStart"] = Processor.process_diffKeyStart
    self._processMap["diffKeyStartstr"] = Processor.process_diffKeyStartstr
    self._processMap["diffKeyStartEnd"] = Processor.process_diffKeyStartEnd
    self._processMap["diffKeyStartstrEndstr"] = Processor.process_diffKeyStartstrEndstr
    self._processMap["revertKeysRecordsTime"] = Processor.process_revertKeysRecordsTime
    self._processMap["revertKeysRecordsTimestr"] = Processor.process_revertKeysRecordsTimestr
    self._processMap["revertKeysRecordTime"] = Processor.process_revertKeysRecordTime
    self._processMap["revertKeysRecordTimestr"] = Processor.process_revertKeysRecordTimestr
    self._processMap["revertKeyRecordsTime"] = Processor.process_revertKeyRecordsTime
    self._processMap["revertKeyRecordsTimestr"] = Processor.process_revertKeyRecordsTimestr
    self._processMap["revertKeyRecordTime"] = Processor.process_revertKeyRecordTime
    self._processMap["revertKeyRecordTimestr"] = Processor.process_revertKeyRecordTimestr
    self._processMap["pingRecords"] = Processor.process_pingRecords
    self._processMap["pingRecord"] = Processor.process_pingRecord
    self._processMap["verifyAndSwap"] = Processor.process_verifyAndSwap
    self._processMap["verifyOrSet"] = Processor.process_verifyOrSet
    self._processMap["findOrAddKeyValue"] = Processor.process_findOrAddKeyValue
    self._processMap["findOrInsertCriteriaJson"] = Processor.process_findOrInsertCriteriaJson
    self._processMap["findOrInsertCclJson"] = Processor.process_findOrInsertCclJson
    self._processMap["getServerEnvironment"] = Processor.process_getServerEnvironment
    self._processMap["getServerVersion"] = Processor.process_getServerVersion
    self._processMap["time"] = Processor.process_time
    self._processMap["timePhrase"] = Processor.process_timePhrase

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_addKeyValueRecord(self, seqid, iprot, oprot):
    args = addKeyValueRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addKeyValueRecord_result()
    try:
      result.success = self._handler.addKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("addKeyValueRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addKeyValue(self, seqid, iprot, oprot):
    args = addKeyValue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addKeyValue_result()
    try:
      result.success = self._handler.addKeyValue(args.key, args.value, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("addKeyValue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addKeyValueRecords(self, seqid, iprot, oprot):
    args = addKeyValueRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addKeyValueRecords_result()
    try:
      result.success = self._handler.addKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("addKeyValueRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_abort(self, seqid, iprot, oprot):
    args = abort_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = abort_result()
    try:
      self._handler.abort(args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    oprot.writeMessageBegin("abort", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_commit(self, seqid, iprot, oprot):
    args = commit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = commit_result()
    try:
      result.success = self._handler.commit(args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("commit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_login(self, seqid, iprot, oprot):
    args = login_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = login_result()
    try:
      result.success = self._handler.login(args.username, args.password, args.environment)
    except SecurityException as ex:
      result.ex = ex
    oprot.writeMessageBegin("login", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_logout(self, seqid, iprot, oprot):
    args = logout_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = logout_result()
    try:
      self._handler.logout(args.token, args.environment)
    except SecurityException as ex:
      result.ex = ex
    oprot.writeMessageBegin("logout", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stage(self, seqid, iprot, oprot):
    args = stage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stage_result()
    try:
      result.success = self._handler.stage(args.token, args.environment)
    except SecurityException as ex:
      result.ex = ex
    oprot.writeMessageBegin("stage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_clearRecord(self, seqid, iprot, oprot):
    args = clearRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clearRecord_result()
    try:
      self._handler.clearRecord(args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("clearRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_clearRecords(self, seqid, iprot, oprot):
    args = clearRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clearRecords_result()
    try:
      self._handler.clearRecords(args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("clearRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_clearKeyRecord(self, seqid, iprot, oprot):
    args = clearKeyRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clearKeyRecord_result()
    try:
      self._handler.clearKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("clearKeyRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_clearKeysRecord(self, seqid, iprot, oprot):
    args = clearKeysRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clearKeysRecord_result()
    try:
      self._handler.clearKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("clearKeysRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_clearKeyRecords(self, seqid, iprot, oprot):
    args = clearKeyRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clearKeyRecords_result()
    try:
      self._handler.clearKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("clearKeyRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_clearKeysRecords(self, seqid, iprot, oprot):
    args = clearKeysRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clearKeysRecords_result()
    try:
      self._handler.clearKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("clearKeysRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_insertJson(self, seqid, iprot, oprot):
    args = insertJson_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = insertJson_result()
    try:
      result.success = self._handler.insertJson(args.json, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("insertJson", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_insertJsonRecord(self, seqid, iprot, oprot):
    args = insertJsonRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = insertJsonRecord_result()
    try:
      result.success = self._handler.insertJsonRecord(args.json, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("insertJsonRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_insertJsonRecords(self, seqid, iprot, oprot):
    args = insertJsonRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = insertJsonRecords_result()
    try:
      result.success = self._handler.insertJsonRecords(args.json, args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("insertJsonRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeKeyValueRecord(self, seqid, iprot, oprot):
    args = removeKeyValueRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeKeyValueRecord_result()
    try:
      result.success = self._handler.removeKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("removeKeyValueRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeKeyValueRecords(self, seqid, iprot, oprot):
    args = removeKeyValueRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeKeyValueRecords_result()
    try:
      result.success = self._handler.removeKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("removeKeyValueRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setKeyValueRecord(self, seqid, iprot, oprot):
    args = setKeyValueRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setKeyValueRecord_result()
    try:
      self._handler.setKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("setKeyValueRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setKeyValue(self, seqid, iprot, oprot):
    args = setKeyValue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setKeyValue_result()
    try:
      result.success = self._handler.setKeyValue(args.key, args.value, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("setKeyValue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setKeyValueRecords(self, seqid, iprot, oprot):
    args = setKeyValueRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setKeyValueRecords_result()
    try:
      self._handler.setKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("setKeyValueRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_inventory(self, seqid, iprot, oprot):
    args = inventory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = inventory_result()
    try:
      result.success = self._handler.inventory(args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("inventory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectRecord(self, seqid, iprot, oprot):
    args = selectRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectRecord_result()
    try:
      result.success = self._handler.selectRecord(args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectRecords(self, seqid, iprot, oprot):
    args = selectRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectRecords_result()
    try:
      result.success = self._handler.selectRecords(args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectRecordTime(self, seqid, iprot, oprot):
    args = selectRecordTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectRecordTime_result()
    try:
      result.success = self._handler.selectRecordTime(args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectRecordTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectRecordTimestr(self, seqid, iprot, oprot):
    args = selectRecordTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectRecordTimestr_result()
    try:
      result.success = self._handler.selectRecordTimestr(args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectRecordTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectRecordsTime(self, seqid, iprot, oprot):
    args = selectRecordsTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectRecordsTime_result()
    try:
      result.success = self._handler.selectRecordsTime(args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectRecordsTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectRecordsTimestr(self, seqid, iprot, oprot):
    args = selectRecordsTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectRecordsTimestr_result()
    try:
      result.success = self._handler.selectRecordsTimestr(args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectRecordsTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_browseKey(self, seqid, iprot, oprot):
    args = browseKey_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = browseKey_result()
    try:
      result.success = self._handler.browseKey(args.key, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("browseKey", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_browseKeys(self, seqid, iprot, oprot):
    args = browseKeys_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = browseKeys_result()
    try:
      result.success = self._handler.browseKeys(args.keys, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("browseKeys", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_browseKeyTime(self, seqid, iprot, oprot):
    args = browseKeyTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = browseKeyTime_result()
    try:
      result.success = self._handler.browseKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("browseKeyTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_browseKeyTimestr(self, seqid, iprot, oprot):
    args = browseKeyTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = browseKeyTimestr_result()
    try:
      result.success = self._handler.browseKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("browseKeyTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_browseKeysTime(self, seqid, iprot, oprot):
    args = browseKeysTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = browseKeysTime_result()
    try:
      result.success = self._handler.browseKeysTime(args.keys, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("browseKeysTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_browseKeysTimestr(self, seqid, iprot, oprot):
    args = browseKeysTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = browseKeysTimestr_result()
    try:
      result.success = self._handler.browseKeysTimestr(args.keys, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("browseKeysTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_describeRecord(self, seqid, iprot, oprot):
    args = describeRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = describeRecord_result()
    try:
      result.success = self._handler.describeRecord(args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("describeRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_describeRecordTime(self, seqid, iprot, oprot):
    args = describeRecordTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = describeRecordTime_result()
    try:
      result.success = self._handler.describeRecordTime(args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("describeRecordTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_describeRecordTimestr(self, seqid, iprot, oprot):
    args = describeRecordTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = describeRecordTimestr_result()
    try:
      result.success = self._handler.describeRecordTimestr(args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("describeRecordTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_describeRecords(self, seqid, iprot, oprot):
    args = describeRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = describeRecords_result()
    try:
      result.success = self._handler.describeRecords(args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("describeRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_describeRecordsTime(self, seqid, iprot, oprot):
    args = describeRecordsTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = describeRecordsTime_result()
    try:
      result.success = self._handler.describeRecordsTime(args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("describeRecordsTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_describeRecordsTimestr(self, seqid, iprot, oprot):
    args = describeRecordsTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = describeRecordsTimestr_result()
    try:
      result.success = self._handler.describeRecordsTimestr(args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("describeRecordsTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyRecord(self, seqid, iprot, oprot):
    args = selectKeyRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyRecord_result()
    try:
      result.success = self._handler.selectKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeyRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyRecordTime(self, seqid, iprot, oprot):
    args = selectKeyRecordTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyRecordTime_result()
    try:
      result.success = self._handler.selectKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeyRecordTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyRecordTimestr(self, seqid, iprot, oprot):
    args = selectKeyRecordTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyRecordTimestr_result()
    try:
      result.success = self._handler.selectKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeyRecordTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysRecord(self, seqid, iprot, oprot):
    args = selectKeysRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysRecord_result()
    try:
      result.success = self._handler.selectKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeysRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysRecordTime(self, seqid, iprot, oprot):
    args = selectKeysRecordTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysRecordTime_result()
    try:
      result.success = self._handler.selectKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeysRecordTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysRecordTimestr(self, seqid, iprot, oprot):
    args = selectKeysRecordTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysRecordTimestr_result()
    try:
      result.success = self._handler.selectKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeysRecordTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysRecords(self, seqid, iprot, oprot):
    args = selectKeysRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysRecords_result()
    try:
      result.success = self._handler.selectKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeysRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyRecords(self, seqid, iprot, oprot):
    args = selectKeyRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyRecords_result()
    try:
      result.success = self._handler.selectKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeyRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyRecordsTime(self, seqid, iprot, oprot):
    args = selectKeyRecordsTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyRecordsTime_result()
    try:
      result.success = self._handler.selectKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeyRecordsTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyRecordsTimestr(self, seqid, iprot, oprot):
    args = selectKeyRecordsTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyRecordsTimestr_result()
    try:
      result.success = self._handler.selectKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeyRecordsTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysRecordsTime(self, seqid, iprot, oprot):
    args = selectKeysRecordsTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysRecordsTime_result()
    try:
      result.success = self._handler.selectKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeysRecordsTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysRecordsTimestr(self, seqid, iprot, oprot):
    args = selectKeysRecordsTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysRecordsTimestr_result()
    try:
      result.success = self._handler.selectKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeysRecordsTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectCriteria(self, seqid, iprot, oprot):
    args = selectCriteria_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectCriteria_result()
    try:
      result.success = self._handler.selectCriteria(args.criteria, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectCriteria", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectCcl(self, seqid, iprot, oprot):
    args = selectCcl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectCcl_result()
    try:
      result.success = self._handler.selectCcl(args.ccl, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectCcl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectCriteriaTime(self, seqid, iprot, oprot):
    args = selectCriteriaTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectCriteriaTime_result()
    try:
      result.success = self._handler.selectCriteriaTime(args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectCriteriaTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectCriteriaTimestr(self, seqid, iprot, oprot):
    args = selectCriteriaTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectCriteriaTimestr_result()
    try:
      result.success = self._handler.selectCriteriaTimestr(args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectCriteriaTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectCclTime(self, seqid, iprot, oprot):
    args = selectCclTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectCclTime_result()
    try:
      result.success = self._handler.selectCclTime(args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectCclTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectCclTimestr(self, seqid, iprot, oprot):
    args = selectCclTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectCclTimestr_result()
    try:
      result.success = self._handler.selectCclTimestr(args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectCclTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyCriteria(self, seqid, iprot, oprot):
    args = selectKeyCriteria_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyCriteria_result()
    try:
      result.success = self._handler.selectKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeyCriteria", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyCcl(self, seqid, iprot, oprot):
    args = selectKeyCcl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyCcl_result()
    try:
      result.success = self._handler.selectKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeyCcl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyCriteriaTime(self, seqid, iprot, oprot):
    args = selectKeyCriteriaTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyCriteriaTime_result()
    try:
      result.success = self._handler.selectKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeyCriteriaTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyCriteriaTimestr(self, seqid, iprot, oprot):
    args = selectKeyCriteriaTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyCriteriaTimestr_result()
    try:
      result.success = self._handler.selectKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeyCriteriaTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyCclTime(self, seqid, iprot, oprot):
    args = selectKeyCclTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyCclTime_result()
    try:
      result.success = self._handler.selectKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeyCclTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeyCclTimestr(self, seqid, iprot, oprot):
    args = selectKeyCclTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeyCclTimestr_result()
    try:
      result.success = self._handler.selectKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeyCclTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysCriteria(self, seqid, iprot, oprot):
    args = selectKeysCriteria_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysCriteria_result()
    try:
      result.success = self._handler.selectKeysCriteria(args.keys, args.criteria, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeysCriteria", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysCcl(self, seqid, iprot, oprot):
    args = selectKeysCcl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysCcl_result()
    try:
      result.success = self._handler.selectKeysCcl(args.keys, args.ccl, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeysCcl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysCriteriaTime(self, seqid, iprot, oprot):
    args = selectKeysCriteriaTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysCriteriaTime_result()
    try:
      result.success = self._handler.selectKeysCriteriaTime(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("selectKeysCriteriaTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysCriteriaTimestr(self, seqid, iprot, oprot):
    args = selectKeysCriteriaTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysCriteriaTimestr_result()
    try:
      result.success = self._handler.selectKeysCriteriaTimestr(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeysCriteriaTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysCclTime(self, seqid, iprot, oprot):
    args = selectKeysCclTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysCclTime_result()
    try:
      result.success = self._handler.selectKeysCclTime(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeysCclTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_selectKeysCclTimestr(self, seqid, iprot, oprot):
    args = selectKeysCclTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = selectKeysCclTimestr_result()
    try:
      result.success = self._handler.selectKeysCclTimestr(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("selectKeysCclTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyRecord(self, seqid, iprot, oprot):
    args = getKeyRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyRecord_result()
    try:
      result.success = self._handler.getKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeyRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyRecordTime(self, seqid, iprot, oprot):
    args = getKeyRecordTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyRecordTime_result()
    try:
      result.success = self._handler.getKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeyRecordTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyRecordTimestr(self, seqid, iprot, oprot):
    args = getKeyRecordTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyRecordTimestr_result()
    try:
      result.success = self._handler.getKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeyRecordTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysRecord(self, seqid, iprot, oprot):
    args = getKeysRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysRecord_result()
    try:
      result.success = self._handler.getKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeysRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysRecordTime(self, seqid, iprot, oprot):
    args = getKeysRecordTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysRecordTime_result()
    try:
      result.success = self._handler.getKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeysRecordTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysRecordTimestr(self, seqid, iprot, oprot):
    args = getKeysRecordTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysRecordTimestr_result()
    try:
      result.success = self._handler.getKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeysRecordTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysRecords(self, seqid, iprot, oprot):
    args = getKeysRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysRecords_result()
    try:
      result.success = self._handler.getKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeysRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyRecords(self, seqid, iprot, oprot):
    args = getKeyRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyRecords_result()
    try:
      result.success = self._handler.getKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeyRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyRecordsTime(self, seqid, iprot, oprot):
    args = getKeyRecordsTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyRecordsTime_result()
    try:
      result.success = self._handler.getKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeyRecordsTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyRecordsTimestr(self, seqid, iprot, oprot):
    args = getKeyRecordsTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyRecordsTimestr_result()
    try:
      result.success = self._handler.getKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeyRecordsTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysRecordsTime(self, seqid, iprot, oprot):
    args = getKeysRecordsTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysRecordsTime_result()
    try:
      result.success = self._handler.getKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeysRecordsTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysRecordsTimestr(self, seqid, iprot, oprot):
    args = getKeysRecordsTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysRecordsTimestr_result()
    try:
      result.success = self._handler.getKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeysRecordsTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyCriteria(self, seqid, iprot, oprot):
    args = getKeyCriteria_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyCriteria_result()
    try:
      result.success = self._handler.getKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeyCriteria", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCriteria(self, seqid, iprot, oprot):
    args = getCriteria_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCriteria_result()
    try:
      result.success = self._handler.getCriteria(args.criteria, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getCriteria", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCcl(self, seqid, iprot, oprot):
    args = getCcl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCcl_result()
    try:
      result.success = self._handler.getCcl(args.ccl, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getCcl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCriteriaTime(self, seqid, iprot, oprot):
    args = getCriteriaTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCriteriaTime_result()
    try:
      result.success = self._handler.getCriteriaTime(args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getCriteriaTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCriteriaTimestr(self, seqid, iprot, oprot):
    args = getCriteriaTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCriteriaTimestr_result()
    try:
      result.success = self._handler.getCriteriaTimestr(args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getCriteriaTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCclTime(self, seqid, iprot, oprot):
    args = getCclTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCclTime_result()
    try:
      result.success = self._handler.getCclTime(args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getCclTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCclTimestr(self, seqid, iprot, oprot):
    args = getCclTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCclTimestr_result()
    try:
      result.success = self._handler.getCclTimestr(args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getCclTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyCcl(self, seqid, iprot, oprot):
    args = getKeyCcl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyCcl_result()
    try:
      result.success = self._handler.getKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeyCcl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyCriteriaTime(self, seqid, iprot, oprot):
    args = getKeyCriteriaTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyCriteriaTime_result()
    try:
      result.success = self._handler.getKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeyCriteriaTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyCriteriaTimestr(self, seqid, iprot, oprot):
    args = getKeyCriteriaTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyCriteriaTimestr_result()
    try:
      result.success = self._handler.getKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeyCriteriaTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyCclTime(self, seqid, iprot, oprot):
    args = getKeyCclTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyCclTime_result()
    try:
      result.success = self._handler.getKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeyCclTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeyCclTimestr(self, seqid, iprot, oprot):
    args = getKeyCclTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeyCclTimestr_result()
    try:
      result.success = self._handler.getKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeyCclTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysCriteria(self, seqid, iprot, oprot):
    args = getKeysCriteria_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysCriteria_result()
    try:
      result.success = self._handler.getKeysCriteria(args.keys, args.criteria, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeysCriteria", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysCcl(self, seqid, iprot, oprot):
    args = getKeysCcl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysCcl_result()
    try:
      result.success = self._handler.getKeysCcl(args.keys, args.ccl, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeysCcl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysCriteriaTime(self, seqid, iprot, oprot):
    args = getKeysCriteriaTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysCriteriaTime_result()
    try:
      result.success = self._handler.getKeysCriteriaTime(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getKeysCriteriaTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysCriteriaTimestr(self, seqid, iprot, oprot):
    args = getKeysCriteriaTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysCriteriaTimestr_result()
    try:
      result.success = self._handler.getKeysCriteriaTimestr(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeysCriteriaTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysCclTime(self, seqid, iprot, oprot):
    args = getKeysCclTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysCclTime_result()
    try:
      result.success = self._handler.getKeysCclTime(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeysCclTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getKeysCclTimestr(self, seqid, iprot, oprot):
    args = getKeysCclTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getKeysCclTimestr_result()
    try:
      result.success = self._handler.getKeysCclTimestr(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("getKeysCclTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_verifyKeyValueRecord(self, seqid, iprot, oprot):
    args = verifyKeyValueRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = verifyKeyValueRecord_result()
    try:
      result.success = self._handler.verifyKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("verifyKeyValueRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_verifyKeyValueRecordTime(self, seqid, iprot, oprot):
    args = verifyKeyValueRecordTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = verifyKeyValueRecordTime_result()
    try:
      result.success = self._handler.verifyKeyValueRecordTime(args.key, args.value, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("verifyKeyValueRecordTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_verifyKeyValueRecordTimestr(self, seqid, iprot, oprot):
    args = verifyKeyValueRecordTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = verifyKeyValueRecordTimestr_result()
    try:
      result.success = self._handler.verifyKeyValueRecordTimestr(args.key, args.value, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("verifyKeyValueRecordTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_jsonifyRecords(self, seqid, iprot, oprot):
    args = jsonifyRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = jsonifyRecords_result()
    try:
      result.success = self._handler.jsonifyRecords(args.records, args.identifier, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("jsonifyRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_jsonifyRecordsTime(self, seqid, iprot, oprot):
    args = jsonifyRecordsTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = jsonifyRecordsTime_result()
    try:
      result.success = self._handler.jsonifyRecordsTime(args.records, args.timestamp, args.identifier, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("jsonifyRecordsTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_jsonifyRecordsTimestr(self, seqid, iprot, oprot):
    args = jsonifyRecordsTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = jsonifyRecordsTimestr_result()
    try:
      result.success = self._handler.jsonifyRecordsTimestr(args.records, args.timestamp, args.identifier, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("jsonifyRecordsTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findCriteria(self, seqid, iprot, oprot):
    args = findCriteria_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findCriteria_result()
    try:
      result.success = self._handler.findCriteria(args.criteria, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("findCriteria", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findCcl(self, seqid, iprot, oprot):
    args = findCcl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findCcl_result()
    try:
      result.success = self._handler.findCcl(args.ccl, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("findCcl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findKeyOperatorValues(self, seqid, iprot, oprot):
    args = findKeyOperatorValues_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findKeyOperatorValues_result()
    try:
      result.success = self._handler.findKeyOperatorValues(args.key, args.operator, args.values, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("findKeyOperatorValues", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findKeyOperatorValuesTime(self, seqid, iprot, oprot):
    args = findKeyOperatorValuesTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findKeyOperatorValuesTime_result()
    try:
      result.success = self._handler.findKeyOperatorValuesTime(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("findKeyOperatorValuesTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findKeyOperatorValuesTimestr(self, seqid, iprot, oprot):
    args = findKeyOperatorValuesTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findKeyOperatorValuesTimestr_result()
    try:
      result.success = self._handler.findKeyOperatorValuesTimestr(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("findKeyOperatorValuesTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findKeyOperatorstrValues(self, seqid, iprot, oprot):
    args = findKeyOperatorstrValues_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findKeyOperatorstrValues_result()
    try:
      result.success = self._handler.findKeyOperatorstrValues(args.key, args.operator, args.values, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("findKeyOperatorstrValues", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findKeyOperatorstrValuesTime(self, seqid, iprot, oprot):
    args = findKeyOperatorstrValuesTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findKeyOperatorstrValuesTime_result()
    try:
      result.success = self._handler.findKeyOperatorstrValuesTime(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("findKeyOperatorstrValuesTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findKeyOperatorstrValuesTimestr(self, seqid, iprot, oprot):
    args = findKeyOperatorstrValuesTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findKeyOperatorstrValuesTimestr_result()
    try:
      result.success = self._handler.findKeyOperatorstrValuesTimestr(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("findKeyOperatorstrValuesTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_search(self, seqid, iprot, oprot):
    args = search_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = search_result()
    try:
      result.success = self._handler.search(args.key, args.query, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("search", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_auditRecord(self, seqid, iprot, oprot):
    args = auditRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = auditRecord_result()
    try:
      result.success = self._handler.auditRecord(args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("auditRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_auditRecordStart(self, seqid, iprot, oprot):
    args = auditRecordStart_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = auditRecordStart_result()
    try:
      result.success = self._handler.auditRecordStart(args.record, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("auditRecordStart", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_auditRecordStartstr(self, seqid, iprot, oprot):
    args = auditRecordStartstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = auditRecordStartstr_result()
    try:
      result.success = self._handler.auditRecordStartstr(args.record, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("auditRecordStartstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_auditRecordStartEnd(self, seqid, iprot, oprot):
    args = auditRecordStartEnd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = auditRecordStartEnd_result()
    try:
      result.success = self._handler.auditRecordStartEnd(args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("auditRecordStartEnd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_auditRecordStartstrEndstr(self, seqid, iprot, oprot):
    args = auditRecordStartstrEndstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = auditRecordStartstrEndstr_result()
    try:
      result.success = self._handler.auditRecordStartstrEndstr(args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("auditRecordStartstrEndstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_auditKeyRecord(self, seqid, iprot, oprot):
    args = auditKeyRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = auditKeyRecord_result()
    try:
      result.success = self._handler.auditKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("auditKeyRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_auditKeyRecordStart(self, seqid, iprot, oprot):
    args = auditKeyRecordStart_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = auditKeyRecordStart_result()
    try:
      result.success = self._handler.auditKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("auditKeyRecordStart", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_auditKeyRecordStartstr(self, seqid, iprot, oprot):
    args = auditKeyRecordStartstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = auditKeyRecordStartstr_result()
    try:
      result.success = self._handler.auditKeyRecordStartstr(args.key, args.record, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("auditKeyRecordStartstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_auditKeyRecordStartEnd(self, seqid, iprot, oprot):
    args = auditKeyRecordStartEnd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = auditKeyRecordStartEnd_result()
    try:
      result.success = self._handler.auditKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("auditKeyRecordStartEnd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_auditKeyRecordStartstrEndstr(self, seqid, iprot, oprot):
    args = auditKeyRecordStartstrEndstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = auditKeyRecordStartstrEndstr_result()
    try:
      result.success = self._handler.auditKeyRecordStartstrEndstr(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("auditKeyRecordStartstrEndstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_chronologizeKeyRecord(self, seqid, iprot, oprot):
    args = chronologizeKeyRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = chronologizeKeyRecord_result()
    try:
      result.success = self._handler.chronologizeKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("chronologizeKeyRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_chronologizeKeyRecordStart(self, seqid, iprot, oprot):
    args = chronologizeKeyRecordStart_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = chronologizeKeyRecordStart_result()
    try:
      result.success = self._handler.chronologizeKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("chronologizeKeyRecordStart", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_chronologizeKeyRecordStartstr(self, seqid, iprot, oprot):
    args = chronologizeKeyRecordStartstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = chronologizeKeyRecordStartstr_result()
    try:
      result.success = self._handler.chronologizeKeyRecordStartstr(args.key, args.record, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("chronologizeKeyRecordStartstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_chronologizeKeyRecordStartEnd(self, seqid, iprot, oprot):
    args = chronologizeKeyRecordStartEnd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = chronologizeKeyRecordStartEnd_result()
    try:
      result.success = self._handler.chronologizeKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("chronologizeKeyRecordStartEnd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_chronologizeKeyRecordStartstrEndstr(self, seqid, iprot, oprot):
    args = chronologizeKeyRecordStartstrEndstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = chronologizeKeyRecordStartstrEndstr_result()
    try:
      result.success = self._handler.chronologizeKeyRecordStartstrEndstr(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffRecordStart(self, seqid, iprot, oprot):
    args = diffRecordStart_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffRecordStart_result()
    try:
      result.success = self._handler.diffRecordStart(args.record, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("diffRecordStart", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffRecordStartstr(self, seqid, iprot, oprot):
    args = diffRecordStartstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffRecordStartstr_result()
    try:
      result.success = self._handler.diffRecordStartstr(args.record, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("diffRecordStartstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffRecordStartEnd(self, seqid, iprot, oprot):
    args = diffRecordStartEnd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffRecordStartEnd_result()
    try:
      result.success = self._handler.diffRecordStartEnd(args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("diffRecordStartEnd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffRecordStartstrEndstr(self, seqid, iprot, oprot):
    args = diffRecordStartstrEndstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffRecordStartstrEndstr_result()
    try:
      result.success = self._handler.diffRecordStartstrEndstr(args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("diffRecordStartstrEndstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffKeyRecordStart(self, seqid, iprot, oprot):
    args = diffKeyRecordStart_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffKeyRecordStart_result()
    try:
      result.success = self._handler.diffKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("diffKeyRecordStart", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffKeyRecordStartstr(self, seqid, iprot, oprot):
    args = diffKeyRecordStartstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffKeyRecordStartstr_result()
    try:
      result.success = self._handler.diffKeyRecordStartstr(args.key, args.record, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("diffKeyRecordStartstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffKeyRecordStartEnd(self, seqid, iprot, oprot):
    args = diffKeyRecordStartEnd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffKeyRecordStartEnd_result()
    try:
      result.success = self._handler.diffKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("diffKeyRecordStartEnd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffKeyRecordStartstrEndstr(self, seqid, iprot, oprot):
    args = diffKeyRecordStartstrEndstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffKeyRecordStartstrEndstr_result()
    try:
      result.success = self._handler.diffKeyRecordStartstrEndstr(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("diffKeyRecordStartstrEndstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffKeyStart(self, seqid, iprot, oprot):
    args = diffKeyStart_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffKeyStart_result()
    try:
      result.success = self._handler.diffKeyStart(args.key, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("diffKeyStart", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffKeyStartstr(self, seqid, iprot, oprot):
    args = diffKeyStartstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffKeyStartstr_result()
    try:
      result.success = self._handler.diffKeyStartstr(args.key, args.start, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("diffKeyStartstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffKeyStartEnd(self, seqid, iprot, oprot):
    args = diffKeyStartEnd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffKeyStartEnd_result()
    try:
      result.success = self._handler.diffKeyStartEnd(args.key, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("diffKeyStartEnd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_diffKeyStartstrEndstr(self, seqid, iprot, oprot):
    args = diffKeyStartstrEndstr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = diffKeyStartstrEndstr_result()
    try:
      result.success = self._handler.diffKeyStartstrEndstr(args.key, args.start, args.tend, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("diffKeyStartstrEndstr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_revertKeysRecordsTime(self, seqid, iprot, oprot):
    args = revertKeysRecordsTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = revertKeysRecordsTime_result()
    try:
      self._handler.revertKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("revertKeysRecordsTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_revertKeysRecordsTimestr(self, seqid, iprot, oprot):
    args = revertKeysRecordsTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = revertKeysRecordsTimestr_result()
    try:
      self._handler.revertKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("revertKeysRecordsTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_revertKeysRecordTime(self, seqid, iprot, oprot):
    args = revertKeysRecordTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = revertKeysRecordTime_result()
    try:
      self._handler.revertKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("revertKeysRecordTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_revertKeysRecordTimestr(self, seqid, iprot, oprot):
    args = revertKeysRecordTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = revertKeysRecordTimestr_result()
    try:
      self._handler.revertKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("revertKeysRecordTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_revertKeyRecordsTime(self, seqid, iprot, oprot):
    args = revertKeyRecordsTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = revertKeyRecordsTime_result()
    try:
      self._handler.revertKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("revertKeyRecordsTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_revertKeyRecordsTimestr(self, seqid, iprot, oprot):
    args = revertKeyRecordsTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = revertKeyRecordsTimestr_result()
    try:
      self._handler.revertKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("revertKeyRecordsTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_revertKeyRecordTime(self, seqid, iprot, oprot):
    args = revertKeyRecordTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = revertKeyRecordTime_result()
    try:
      self._handler.revertKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("revertKeyRecordTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_revertKeyRecordTimestr(self, seqid, iprot, oprot):
    args = revertKeyRecordTimestr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = revertKeyRecordTimestr_result()
    try:
      self._handler.revertKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("revertKeyRecordTimestr", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_pingRecords(self, seqid, iprot, oprot):
    args = pingRecords_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = pingRecords_result()
    try:
      result.success = self._handler.pingRecords(args.records, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("pingRecords", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_pingRecord(self, seqid, iprot, oprot):
    args = pingRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = pingRecord_result()
    try:
      result.success = self._handler.pingRecord(args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("pingRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_verifyAndSwap(self, seqid, iprot, oprot):
    args = verifyAndSwap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = verifyAndSwap_result()
    try:
      result.success = self._handler.verifyAndSwap(args.key, args.expected, args.record, args.replacement, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("verifyAndSwap", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_verifyOrSet(self, seqid, iprot, oprot):
    args = verifyOrSet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = verifyOrSet_result()
    try:
      self._handler.verifyOrSet(args.key, args.value, args.record, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("verifyOrSet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findOrAddKeyValue(self, seqid, iprot, oprot):
    args = findOrAddKeyValue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findOrAddKeyValue_result()
    try:
      result.success = self._handler.findOrAddKeyValue(args.key, args.value, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except DuplicateEntryException as ex3:
      result.ex3 = ex3
    except InvalidArgumentException as ex4:
      result.ex4 = ex4
    oprot.writeMessageBegin("findOrAddKeyValue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findOrInsertCriteriaJson(self, seqid, iprot, oprot):
    args = findOrInsertCriteriaJson_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findOrInsertCriteriaJson_result()
    try:
      result.success = self._handler.findOrInsertCriteriaJson(args.criteria, args.json, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except DuplicateEntryException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("findOrInsertCriteriaJson", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findOrInsertCclJson(self, seqid, iprot, oprot):
    args = findOrInsertCclJson_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findOrInsertCclJson_result()
    try:
      result.success = self._handler.findOrInsertCclJson(args.ccl, args.json, args.creds, args.transaction, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    except DuplicateEntryException as ex4:
      result.ex4 = ex4
    oprot.writeMessageBegin("findOrInsertCclJson", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getServerEnvironment(self, seqid, iprot, oprot):
    args = getServerEnvironment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getServerEnvironment_result()
    try:
      result.success = self._handler.getServerEnvironment(args.creds, args.token, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getServerEnvironment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getServerVersion(self, seqid, iprot, oprot):
    args = getServerVersion_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getServerVersion_result()
    try:
      result.success = self._handler.getServerVersion()
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("getServerVersion", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_time(self, seqid, iprot, oprot):
    args = time_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = time_result()
    try:
      result.success = self._handler.time(args.creds, args.token, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    oprot.writeMessageBegin("time", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_timePhrase(self, seqid, iprot, oprot):
    args = timePhrase_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = timePhrase_result()
    try:
      result.success = self._handler.timePhrase(args.phrase, args.creds, args.token, args.environment)
    except SecurityException as ex:
      result.ex = ex
    except TransactionException as ex2:
      result.ex2 = ex2
    except ParseException as ex3:
      result.ex3 = ex3
    oprot.writeMessageBegin("timePhrase", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class addKeyValueRecord_args:
  """
  Attributes:
   - key
   - value
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.I64, 'record', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, value=None, record=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addKeyValueRecord_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 3)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addKeyValueRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addKeyValueRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addKeyValue_args:
  """
  Attributes:
   - key
   - value
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, value=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addKeyValue_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addKeyValue_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addKeyValue_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addKeyValueRecords_args:
  """
  Attributes:
   - key
   - value
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.LIST, 'records', (TType.I64,None), None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, value=None, records=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.records = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in range(_size0):
            _elem5 = iprot.readI64();
            self.records.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addKeyValueRecords_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter6 in self.records:
        oprot.writeI64(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addKeyValueRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.BOOL,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in range(_size7):
            _key12 = iprot.readI64();
            _val13 = iprot.readBool();
            self.success[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addKeyValueRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.BOOL, len(self.success))
      for kiter14,viter15 in list(self.success.items()):
        oprot.writeI64(kiter14)
        oprot.writeBool(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class abort_args:
  """
  Attributes:
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 2
    (3, TType.STRING, 'environment', None, None, ), # 3
  )

  def __init__(self, creds=None, transaction=None, environment=None,):
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('abort_args')
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 1)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 2)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 3)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class abort_result:
  """
  Attributes:
   - ex
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, ex=None,):
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('abort_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class commit_args:
  """
  Attributes:
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 2
    (3, TType.STRING, 'environment', None, None, ), # 3
  )

  def __init__(self, creds=None, transaction=None, environment=None,):
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('commit_args')
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 1)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 2)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 3)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class commit_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('commit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class login_args:
  """
  Attributes:
   - username
   - password
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
    (3, TType.STRING, 'environment', None, None, ), # 3
  )

  def __init__(self, username=None, password=None, environment=None,):
    self.username = username
    self.password = password
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('login_args')
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 3)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.password)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class login_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (AccessToken, AccessToken.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = AccessToken()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('login_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logout_args:
  """
  Attributes:
   - token
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'token', (AccessToken, AccessToken.thrift_spec), None, ), # 1
    (2, TType.STRING, 'environment', None, None, ), # 2
  )

  def __init__(self, token=None, environment=None,):
    self.token = token
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.token = AccessToken()
          self.token.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logout_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRUCT, 1)
      self.token.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 2)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logout_result:
  """
  Attributes:
   - ex
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, ex=None,):
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logout_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stage_args:
  """
  Attributes:
   - token
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'token', (AccessToken, AccessToken.thrift_spec), None, ), # 1
    (2, TType.STRING, 'environment', None, None, ), # 2
  )

  def __init__(self, token=None, environment=None,):
    self.token = token
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.token = AccessToken()
          self.token.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stage_args')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRUCT, 1)
      self.token.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 2)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stage_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TransactionToken, TransactionToken.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TransactionToken()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearRecord_args:
  """
  Attributes:
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, record=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearRecord_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearRecord_result:
  """
  Attributes:
   - ex
   - ex2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, ex=None, ex2=None,):
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearRecord_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearRecords_args:
  """
  Attributes:
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, records=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in range(_size16):
            _elem21 = iprot.readI64();
            self.records.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearRecords_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter22 in self.records:
        oprot.writeI64(iter22)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearRecords_result:
  """
  Attributes:
   - ex
   - ex2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, ex=None, ex2=None,):
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearRecords_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearKeyRecord_args:
  """
  Attributes:
   - key
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, record=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearKeyRecord_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearKeyRecord_result:
  """
  Attributes:
   - ex
   - ex2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, ex=None, ex2=None,):
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearKeyRecord_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearKeysRecord_args:
  """
  Attributes:
   - keys
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, record=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in range(_size23):
            _elem28 = iprot.readString();
            self.keys.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearKeysRecord_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter29 in self.keys:
        oprot.writeString(iter29)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearKeysRecord_result:
  """
  Attributes:
   - ex
   - ex2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, ex=None, ex2=None,):
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearKeysRecord_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearKeyRecords_args:
  """
  Attributes:
   - key
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, records=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in range(_size30):
            _elem35 = iprot.readI64();
            self.records.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearKeyRecords_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter36 in self.records:
        oprot.writeI64(iter36)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearKeyRecords_result:
  """
  Attributes:
   - ex
   - ex2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, ex=None, ex2=None,):
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearKeyRecords_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearKeysRecords_args:
  """
  Attributes:
   - keys
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, records=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in range(_size37):
            _elem42 = iprot.readString();
            self.keys.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype46, _size43) = iprot.readListBegin()
          for _i47 in range(_size43):
            _elem48 = iprot.readI64();
            self.records.append(_elem48)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearKeysRecords_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter49 in self.keys:
        oprot.writeString(iter49)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter50 in self.records:
        oprot.writeI64(iter50)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearKeysRecords_result:
  """
  Attributes:
   - ex
   - ex2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, ex=None, ex2=None,):
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearKeysRecords_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class insertJson_args:
  """
  Attributes:
   - json
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'json', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, json=None, creds=None, transaction=None, environment=None,):
    self.json = json
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('insertJson_args')
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 1)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.json)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class insertJson_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype54, _size51) = iprot.readSetBegin()
          for _i55 in range(_size51):
            _elem56 = iprot.readI64();
            self.success.append(_elem56)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('insertJson_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter57 in self.success:
        oprot.writeI64(iter57)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class insertJsonRecord_args:
  """
  Attributes:
   - json
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'json', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, json=None, record=None, creds=None, transaction=None, environment=None,):
    self.json = json
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('insertJsonRecord_args')
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 1)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.json)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class insertJsonRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('insertJsonRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class insertJsonRecords_args:
  """
  Attributes:
   - json
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'json', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, json=None, records=None, creds=None, transaction=None, environment=None,):
    self.json = json
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype61, _size58) = iprot.readListBegin()
          for _i62 in range(_size58):
            _elem63 = iprot.readI64();
            self.records.append(_elem63)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('insertJsonRecords_args')
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 1)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter64 in self.records:
        oprot.writeI64(iter64)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.json)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class insertJsonRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.BOOL,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype66, _vtype67, _size65 ) = iprot.readMapBegin()
          for _i69 in range(_size65):
            _key70 = iprot.readI64();
            _val71 = iprot.readBool();
            self.success[_key70] = _val71
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('insertJsonRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.BOOL, len(self.success))
      for kiter72,viter73 in list(self.success.items()):
        oprot.writeI64(kiter72)
        oprot.writeBool(viter73)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeKeyValueRecord_args:
  """
  Attributes:
   - key
   - value
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.I64, 'record', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, value=None, record=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeKeyValueRecord_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 3)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeKeyValueRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeKeyValueRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeKeyValueRecords_args:
  """
  Attributes:
   - key
   - value
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.LIST, 'records', (TType.I64,None), None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, value=None, records=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.records = []
          (_etype77, _size74) = iprot.readListBegin()
          for _i78 in range(_size74):
            _elem79 = iprot.readI64();
            self.records.append(_elem79)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeKeyValueRecords_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter80 in self.records:
        oprot.writeI64(iter80)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeKeyValueRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.BOOL,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype82, _vtype83, _size81 ) = iprot.readMapBegin()
          for _i85 in range(_size81):
            _key86 = iprot.readI64();
            _val87 = iprot.readBool();
            self.success[_key86] = _val87
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeKeyValueRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.BOOL, len(self.success))
      for kiter88,viter89 in list(self.success.items()):
        oprot.writeI64(kiter88)
        oprot.writeBool(viter89)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setKeyValueRecord_args:
  """
  Attributes:
   - key
   - value
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.I64, 'record', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, value=None, record=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setKeyValueRecord_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 3)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setKeyValueRecord_result:
  """
  Attributes:
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, ex=None, ex2=None, ex3=None,):
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setKeyValueRecord_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setKeyValue_args:
  """
  Attributes:
   - key
   - value
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, value=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setKeyValue_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setKeyValue_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setKeyValue_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setKeyValueRecords_args:
  """
  Attributes:
   - key
   - value
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.LIST, 'records', (TType.I64,None), None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, value=None, records=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.records = []
          (_etype93, _size90) = iprot.readListBegin()
          for _i94 in range(_size90):
            _elem95 = iprot.readI64();
            self.records.append(_elem95)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setKeyValueRecords_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter96 in self.records:
        oprot.writeI64(iter96)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setKeyValueRecords_result:
  """
  Attributes:
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, ex=None, ex2=None, ex3=None,):
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setKeyValueRecords_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inventory_args:
  """
  Attributes:
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 2
    (3, TType.STRING, 'environment', None, None, ), # 3
  )

  def __init__(self, creds=None, transaction=None, environment=None,):
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inventory_args')
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 1)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 2)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 3)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inventory_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype100, _size97) = iprot.readSetBegin()
          for _i101 in range(_size97):
            _elem102 = iprot.readI64();
            self.success.append(_elem102)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inventory_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter103 in self.success:
        oprot.writeI64(iter103)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecord_args:
  """
  Attributes:
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, record=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecord_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype105, _vtype106, _size104 ) = iprot.readMapBegin()
          for _i108 in range(_size104):
            _key109 = iprot.readString();
            _val110 = []
            (_etype114, _size111) = iprot.readSetBegin()
            for _i115 in range(_size111):
              _elem116 = TObject()
              _elem116.read(iprot)
              _val110.append(_elem116)
            iprot.readSetEnd()
            self.success[_key109] = _val110
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.SET, len(self.success))
      for kiter117,viter118 in list(self.success.items()):
        oprot.writeString(kiter117)
        oprot.writeSetBegin(TType.STRUCT, len(viter118))
        for iter119 in viter118:
          iter119.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecords_args:
  """
  Attributes:
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, records=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype123, _size120) = iprot.readListBegin()
          for _i124 in range(_size120):
            _elem125 = iprot.readI64();
            self.records.append(_elem125)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecords_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter126 in self.records:
        oprot.writeI64(iter126)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype128, _vtype129, _size127 ) = iprot.readMapBegin()
          for _i131 in range(_size127):
            _key132 = iprot.readI64();
            _val133 = {}
            (_ktype135, _vtype136, _size134 ) = iprot.readMapBegin()
            for _i138 in range(_size134):
              _key139 = iprot.readString();
              _val140 = []
              (_etype144, _size141) = iprot.readSetBegin()
              for _i145 in range(_size141):
                _elem146 = TObject()
                _elem146.read(iprot)
                _val140.append(_elem146)
              iprot.readSetEnd()
              _val133[_key139] = _val140
            iprot.readMapEnd()
            self.success[_key132] = _val133
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter147,viter148 in list(self.success.items()):
        oprot.writeI64(kiter147)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter148))
        for kiter149,viter150 in list(viter148.items()):
          oprot.writeString(kiter149)
          oprot.writeSetBegin(TType.STRUCT, len(viter150))
          for iter151 in viter150:
            iter151.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecordTime_args:
  """
  Attributes:
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecordTime_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecordTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype153, _vtype154, _size152 ) = iprot.readMapBegin()
          for _i156 in range(_size152):
            _key157 = iprot.readString();
            _val158 = []
            (_etype162, _size159) = iprot.readSetBegin()
            for _i163 in range(_size159):
              _elem164 = TObject()
              _elem164.read(iprot)
              _val158.append(_elem164)
            iprot.readSetEnd()
            self.success[_key157] = _val158
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecordTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.SET, len(self.success))
      for kiter165,viter166 in list(self.success.items()):
        oprot.writeString(kiter165)
        oprot.writeSetBegin(TType.STRUCT, len(viter166))
        for iter167 in viter166:
          iter167.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecordTimestr_args:
  """
  Attributes:
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecordTimestr_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecordTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype169, _vtype170, _size168 ) = iprot.readMapBegin()
          for _i172 in range(_size168):
            _key173 = iprot.readString();
            _val174 = []
            (_etype178, _size175) = iprot.readSetBegin()
            for _i179 in range(_size175):
              _elem180 = TObject()
              _elem180.read(iprot)
              _val174.append(_elem180)
            iprot.readSetEnd()
            self.success[_key173] = _val174
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecordTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.SET, len(self.success))
      for kiter181,viter182 in list(self.success.items()):
        oprot.writeString(kiter181)
        oprot.writeSetBegin(TType.STRUCT, len(viter182))
        for iter183 in viter182:
          iter183.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecordsTime_args:
  """
  Attributes:
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype187, _size184) = iprot.readListBegin()
          for _i188 in range(_size184):
            _elem189 = iprot.readI64();
            self.records.append(_elem189)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecordsTime_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter190 in self.records:
        oprot.writeI64(iter190)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecordsTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype192, _vtype193, _size191 ) = iprot.readMapBegin()
          for _i195 in range(_size191):
            _key196 = iprot.readI64();
            _val197 = {}
            (_ktype199, _vtype200, _size198 ) = iprot.readMapBegin()
            for _i202 in range(_size198):
              _key203 = iprot.readString();
              _val204 = []
              (_etype208, _size205) = iprot.readSetBegin()
              for _i209 in range(_size205):
                _elem210 = TObject()
                _elem210.read(iprot)
                _val204.append(_elem210)
              iprot.readSetEnd()
              _val197[_key203] = _val204
            iprot.readMapEnd()
            self.success[_key196] = _val197
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecordsTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter211,viter212 in list(self.success.items()):
        oprot.writeI64(kiter211)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter212))
        for kiter213,viter214 in list(viter212.items()):
          oprot.writeString(kiter213)
          oprot.writeSetBegin(TType.STRUCT, len(viter214))
          for iter215 in viter214:
            iter215.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecordsTimestr_args:
  """
  Attributes:
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype219, _size216) = iprot.readListBegin()
          for _i220 in range(_size216):
            _elem221 = iprot.readI64();
            self.records.append(_elem221)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecordsTimestr_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter222 in self.records:
        oprot.writeI64(iter222)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectRecordsTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype224, _vtype225, _size223 ) = iprot.readMapBegin()
          for _i227 in range(_size223):
            _key228 = iprot.readI64();
            _val229 = {}
            (_ktype231, _vtype232, _size230 ) = iprot.readMapBegin()
            for _i234 in range(_size230):
              _key235 = iprot.readString();
              _val236 = []
              (_etype240, _size237) = iprot.readSetBegin()
              for _i241 in range(_size237):
                _elem242 = TObject()
                _elem242.read(iprot)
                _val236.append(_elem242)
              iprot.readSetEnd()
              _val229[_key235] = _val236
            iprot.readMapEnd()
            self.success[_key228] = _val229
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectRecordsTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter243,viter244 in list(self.success.items()):
        oprot.writeI64(kiter243)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter244))
        for kiter245,viter246 in list(viter244.items()):
          oprot.writeString(kiter245)
          oprot.writeSetBegin(TType.STRUCT, len(viter246))
          for iter247 in viter246:
            iter247.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKey_args:
  """
  Attributes:
   - key
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, key=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKey_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKey_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRUCT,(TObject, TObject.thrift_spec),TType.SET,(TType.I64,None)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype249, _vtype250, _size248 ) = iprot.readMapBegin()
          for _i252 in range(_size248):
            _key253 = TObject()
            _key253.read(iprot)
            _val254 = []
            (_etype258, _size255) = iprot.readSetBegin()
            for _i259 in range(_size255):
              _elem260 = iprot.readI64();
              _val254.append(_elem260)
            iprot.readSetEnd()
            self.success[_key253] = _val254
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKey_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRUCT, TType.SET, len(self.success))
      for kiter261,viter262 in list(self.success.items()):
        kiter261.write(oprot)
        oprot.writeSetBegin(TType.I64, len(viter262))
        for iter263 in viter262:
          oprot.writeI64(iter263)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKeys_args:
  """
  Attributes:
   - keys
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, keys=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype267, _size264) = iprot.readListBegin()
          for _i268 in range(_size264):
            _elem269 = iprot.readString();
            self.keys.append(_elem269)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKeys_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter270 in self.keys:
        oprot.writeString(iter270)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKeys_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.STRUCT,(TObject, TObject.thrift_spec),TType.SET,(TType.I64,None))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype272, _vtype273, _size271 ) = iprot.readMapBegin()
          for _i275 in range(_size271):
            _key276 = iprot.readString();
            _val277 = {}
            (_ktype279, _vtype280, _size278 ) = iprot.readMapBegin()
            for _i282 in range(_size278):
              _key283 = TObject()
              _key283.read(iprot)
              _val284 = []
              (_etype288, _size285) = iprot.readSetBegin()
              for _i289 in range(_size285):
                _elem290 = iprot.readI64();
                _val284.append(_elem290)
              iprot.readSetEnd()
              _val277[_key283] = _val284
            iprot.readMapEnd()
            self.success[_key276] = _val277
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKeys_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter291,viter292 in list(self.success.items()):
        oprot.writeString(kiter291)
        oprot.writeMapBegin(TType.STRUCT, TType.SET, len(viter292))
        for kiter293,viter294 in list(viter292.items()):
          kiter293.write(oprot)
          oprot.writeSetBegin(TType.I64, len(viter294))
          for iter295 in viter294:
            oprot.writeI64(iter295)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKeyTime_args:
  """
  Attributes:
   - key
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKeyTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKeyTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRUCT,(TObject, TObject.thrift_spec),TType.SET,(TType.I64,None)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype297, _vtype298, _size296 ) = iprot.readMapBegin()
          for _i300 in range(_size296):
            _key301 = TObject()
            _key301.read(iprot)
            _val302 = []
            (_etype306, _size303) = iprot.readSetBegin()
            for _i307 in range(_size303):
              _elem308 = iprot.readI64();
              _val302.append(_elem308)
            iprot.readSetEnd()
            self.success[_key301] = _val302
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKeyTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRUCT, TType.SET, len(self.success))
      for kiter309,viter310 in list(self.success.items()):
        kiter309.write(oprot)
        oprot.writeSetBegin(TType.I64, len(viter310))
        for iter311 in viter310:
          oprot.writeI64(iter311)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKeyTimestr_args:
  """
  Attributes:
   - key
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKeyTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKeyTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRUCT,(TObject, TObject.thrift_spec),TType.SET,(TType.I64,None)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype313, _vtype314, _size312 ) = iprot.readMapBegin()
          for _i316 in range(_size312):
            _key317 = TObject()
            _key317.read(iprot)
            _val318 = []
            (_etype322, _size319) = iprot.readSetBegin()
            for _i323 in range(_size319):
              _elem324 = iprot.readI64();
              _val318.append(_elem324)
            iprot.readSetEnd()
            self.success[_key317] = _val318
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKeyTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRUCT, TType.SET, len(self.success))
      for kiter325,viter326 in list(self.success.items()):
        kiter325.write(oprot)
        oprot.writeSetBegin(TType.I64, len(viter326))
        for iter327 in viter326:
          oprot.writeI64(iter327)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKeysTime_args:
  """
  Attributes:
   - keys
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype331, _size328) = iprot.readListBegin()
          for _i332 in range(_size328):
            _elem333 = iprot.readString();
            self.keys.append(_elem333)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKeysTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter334 in self.keys:
        oprot.writeString(iter334)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKeysTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.STRUCT,(TObject, TObject.thrift_spec),TType.SET,(TType.I64,None))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype336, _vtype337, _size335 ) = iprot.readMapBegin()
          for _i339 in range(_size335):
            _key340 = iprot.readString();
            _val341 = {}
            (_ktype343, _vtype344, _size342 ) = iprot.readMapBegin()
            for _i346 in range(_size342):
              _key347 = TObject()
              _key347.read(iprot)
              _val348 = []
              (_etype352, _size349) = iprot.readSetBegin()
              for _i353 in range(_size349):
                _elem354 = iprot.readI64();
                _val348.append(_elem354)
              iprot.readSetEnd()
              _val341[_key347] = _val348
            iprot.readMapEnd()
            self.success[_key340] = _val341
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKeysTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter355,viter356 in list(self.success.items()):
        oprot.writeString(kiter355)
        oprot.writeMapBegin(TType.STRUCT, TType.SET, len(viter356))
        for kiter357,viter358 in list(viter356.items()):
          kiter357.write(oprot)
          oprot.writeSetBegin(TType.I64, len(viter358))
          for iter359 in viter358:
            oprot.writeI64(iter359)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKeysTimestr_args:
  """
  Attributes:
   - keys
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype363, _size360) = iprot.readListBegin()
          for _i364 in range(_size360):
            _elem365 = iprot.readString();
            self.keys.append(_elem365)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKeysTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter366 in self.keys:
        oprot.writeString(iter366)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class browseKeysTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.STRUCT,(TObject, TObject.thrift_spec),TType.SET,(TType.I64,None))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype368, _vtype369, _size367 ) = iprot.readMapBegin()
          for _i371 in range(_size367):
            _key372 = iprot.readString();
            _val373 = {}
            (_ktype375, _vtype376, _size374 ) = iprot.readMapBegin()
            for _i378 in range(_size374):
              _key379 = TObject()
              _key379.read(iprot)
              _val380 = []
              (_etype384, _size381) = iprot.readSetBegin()
              for _i385 in range(_size381):
                _elem386 = iprot.readI64();
                _val380.append(_elem386)
              iprot.readSetEnd()
              _val373[_key379] = _val380
            iprot.readMapEnd()
            self.success[_key372] = _val373
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('browseKeysTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter387,viter388 in list(self.success.items()):
        oprot.writeString(kiter387)
        oprot.writeMapBegin(TType.STRUCT, TType.SET, len(viter388))
        for kiter389,viter390 in list(viter388.items()):
          kiter389.write(oprot)
          oprot.writeSetBegin(TType.I64, len(viter390))
          for iter391 in viter390:
            oprot.writeI64(iter391)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecord_args:
  """
  Attributes:
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, record=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecord_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype395, _size392) = iprot.readSetBegin()
          for _i396 in range(_size392):
            _elem397 = iprot.readString();
            self.success.append(_elem397)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.STRING, len(self.success))
      for iter398 in self.success:
        oprot.writeString(iter398)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecordTime_args:
  """
  Attributes:
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecordTime_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecordTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype402, _size399) = iprot.readSetBegin()
          for _i403 in range(_size399):
            _elem404 = iprot.readString();
            self.success.append(_elem404)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecordTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.STRING, len(self.success))
      for iter405 in self.success:
        oprot.writeString(iter405)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecordTimestr_args:
  """
  Attributes:
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecordTimestr_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecordTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype409, _size406) = iprot.readSetBegin()
          for _i410 in range(_size406):
            _elem411 = iprot.readString();
            self.success.append(_elem411)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecordTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.STRING, len(self.success))
      for iter412 in self.success:
        oprot.writeString(iter412)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecords_args:
  """
  Attributes:
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, records=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype416, _size413) = iprot.readListBegin()
          for _i417 in range(_size413):
            _elem418 = iprot.readI64();
            self.records.append(_elem418)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecords_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter419 in self.records:
        oprot.writeI64(iter419)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype421, _vtype422, _size420 ) = iprot.readMapBegin()
          for _i424 in range(_size420):
            _key425 = iprot.readI64();
            _val426 = []
            (_etype430, _size427) = iprot.readSetBegin()
            for _i431 in range(_size427):
              _elem432 = iprot.readString();
              _val426.append(_elem432)
            iprot.readSetEnd()
            self.success[_key425] = _val426
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter433,viter434 in list(self.success.items()):
        oprot.writeI64(kiter433)
        oprot.writeSetBegin(TType.STRING, len(viter434))
        for iter435 in viter434:
          oprot.writeString(iter435)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecordsTime_args:
  """
  Attributes:
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype439, _size436) = iprot.readListBegin()
          for _i440 in range(_size436):
            _elem441 = iprot.readI64();
            self.records.append(_elem441)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecordsTime_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter442 in self.records:
        oprot.writeI64(iter442)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecordsTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype444, _vtype445, _size443 ) = iprot.readMapBegin()
          for _i447 in range(_size443):
            _key448 = iprot.readI64();
            _val449 = []
            (_etype453, _size450) = iprot.readSetBegin()
            for _i454 in range(_size450):
              _elem455 = iprot.readString();
              _val449.append(_elem455)
            iprot.readSetEnd()
            self.success[_key448] = _val449
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecordsTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter456,viter457 in list(self.success.items()):
        oprot.writeI64(kiter456)
        oprot.writeSetBegin(TType.STRING, len(viter457))
        for iter458 in viter457:
          oprot.writeString(iter458)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecordsTimestr_args:
  """
  Attributes:
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype462, _size459) = iprot.readListBegin()
          for _i463 in range(_size459):
            _elem464 = iprot.readI64();
            self.records.append(_elem464)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecordsTimestr_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter465 in self.records:
        oprot.writeI64(iter465)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class describeRecordsTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype467, _vtype468, _size466 ) = iprot.readMapBegin()
          for _i470 in range(_size466):
            _key471 = iprot.readI64();
            _val472 = []
            (_etype476, _size473) = iprot.readSetBegin()
            for _i477 in range(_size473):
              _elem478 = iprot.readString();
              _val472.append(_elem478)
            iprot.readSetEnd()
            self.success[_key471] = _val472
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('describeRecordsTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter479,viter480 in list(self.success.items()):
        oprot.writeI64(kiter479)
        oprot.writeSetBegin(TType.STRING, len(viter480))
        for iter481 in viter480:
          oprot.writeString(iter481)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecord_args:
  """
  Attributes:
   - key
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, record=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecord_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype485, _size482) = iprot.readSetBegin()
          for _i486 in range(_size482):
            _elem487 = TObject()
            _elem487.read(iprot)
            self.success.append(_elem487)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.STRUCT, len(self.success))
      for iter488 in self.success:
        iter488.write(oprot)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecordTime_args:
  """
  Attributes:
   - key
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecordTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecordTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype492, _size489) = iprot.readSetBegin()
          for _i493 in range(_size489):
            _elem494 = TObject()
            _elem494.read(iprot)
            self.success.append(_elem494)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecordTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.STRUCT, len(self.success))
      for iter495 in self.success:
        iter495.write(oprot)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecordTimestr_args:
  """
  Attributes:
   - key
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecordTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecordTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype499, _size496) = iprot.readSetBegin()
          for _i500 in range(_size496):
            _elem501 = TObject()
            _elem501.read(iprot)
            self.success.append(_elem501)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecordTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.STRUCT, len(self.success))
      for iter502 in self.success:
        iter502.write(oprot)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecord_args:
  """
  Attributes:
   - keys
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, record=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype506, _size503) = iprot.readListBegin()
          for _i507 in range(_size503):
            _elem508 = iprot.readString();
            self.keys.append(_elem508)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecord_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter509 in self.keys:
        oprot.writeString(iter509)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype511, _vtype512, _size510 ) = iprot.readMapBegin()
          for _i514 in range(_size510):
            _key515 = iprot.readString();
            _val516 = []
            (_etype520, _size517) = iprot.readSetBegin()
            for _i521 in range(_size517):
              _elem522 = TObject()
              _elem522.read(iprot)
              _val516.append(_elem522)
            iprot.readSetEnd()
            self.success[_key515] = _val516
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.SET, len(self.success))
      for kiter523,viter524 in list(self.success.items()):
        oprot.writeString(kiter523)
        oprot.writeSetBegin(TType.STRUCT, len(viter524))
        for iter525 in viter524:
          iter525.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecordTime_args:
  """
  Attributes:
   - keys
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype529, _size526) = iprot.readListBegin()
          for _i530 in range(_size526):
            _elem531 = iprot.readString();
            self.keys.append(_elem531)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecordTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter532 in self.keys:
        oprot.writeString(iter532)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecordTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype534, _vtype535, _size533 ) = iprot.readMapBegin()
          for _i537 in range(_size533):
            _key538 = iprot.readString();
            _val539 = []
            (_etype543, _size540) = iprot.readSetBegin()
            for _i544 in range(_size540):
              _elem545 = TObject()
              _elem545.read(iprot)
              _val539.append(_elem545)
            iprot.readSetEnd()
            self.success[_key538] = _val539
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecordTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.SET, len(self.success))
      for kiter546,viter547 in list(self.success.items()):
        oprot.writeString(kiter546)
        oprot.writeSetBegin(TType.STRUCT, len(viter547))
        for iter548 in viter547:
          iter548.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecordTimestr_args:
  """
  Attributes:
   - keys
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype552, _size549) = iprot.readListBegin()
          for _i553 in range(_size549):
            _elem554 = iprot.readString();
            self.keys.append(_elem554)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecordTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter555 in self.keys:
        oprot.writeString(iter555)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecordTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype557, _vtype558, _size556 ) = iprot.readMapBegin()
          for _i560 in range(_size556):
            _key561 = iprot.readString();
            _val562 = []
            (_etype566, _size563) = iprot.readSetBegin()
            for _i567 in range(_size563):
              _elem568 = TObject()
              _elem568.read(iprot)
              _val562.append(_elem568)
            iprot.readSetEnd()
            self.success[_key561] = _val562
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecordTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.SET, len(self.success))
      for kiter569,viter570 in list(self.success.items()):
        oprot.writeString(kiter569)
        oprot.writeSetBegin(TType.STRUCT, len(viter570))
        for iter571 in viter570:
          iter571.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecords_args:
  """
  Attributes:
   - keys
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, records=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype575, _size572) = iprot.readListBegin()
          for _i576 in range(_size572):
            _elem577 = iprot.readString();
            self.keys.append(_elem577)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype581, _size578) = iprot.readListBegin()
          for _i582 in range(_size578):
            _elem583 = iprot.readI64();
            self.records.append(_elem583)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecords_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter584 in self.keys:
        oprot.writeString(iter584)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter585 in self.records:
        oprot.writeI64(iter585)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype587, _vtype588, _size586 ) = iprot.readMapBegin()
          for _i590 in range(_size586):
            _key591 = iprot.readI64();
            _val592 = {}
            (_ktype594, _vtype595, _size593 ) = iprot.readMapBegin()
            for _i597 in range(_size593):
              _key598 = iprot.readString();
              _val599 = []
              (_etype603, _size600) = iprot.readSetBegin()
              for _i604 in range(_size600):
                _elem605 = TObject()
                _elem605.read(iprot)
                _val599.append(_elem605)
              iprot.readSetEnd()
              _val592[_key598] = _val599
            iprot.readMapEnd()
            self.success[_key591] = _val592
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter606,viter607 in list(self.success.items()):
        oprot.writeI64(kiter606)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter607))
        for kiter608,viter609 in list(viter607.items()):
          oprot.writeString(kiter608)
          oprot.writeSetBegin(TType.STRUCT, len(viter609))
          for iter610 in viter609:
            iter610.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecords_args:
  """
  Attributes:
   - key
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, records=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype614, _size611) = iprot.readListBegin()
          for _i615 in range(_size611):
            _elem616 = iprot.readI64();
            self.records.append(_elem616)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecords_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter617 in self.records:
        oprot.writeI64(iter617)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype619, _vtype620, _size618 ) = iprot.readMapBegin()
          for _i622 in range(_size618):
            _key623 = iprot.readI64();
            _val624 = []
            (_etype628, _size625) = iprot.readSetBegin()
            for _i629 in range(_size625):
              _elem630 = TObject()
              _elem630.read(iprot)
              _val624.append(_elem630)
            iprot.readSetEnd()
            self.success[_key623] = _val624
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter631,viter632 in list(self.success.items()):
        oprot.writeI64(kiter631)
        oprot.writeSetBegin(TType.STRUCT, len(viter632))
        for iter633 in viter632:
          iter633.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecordsTime_args:
  """
  Attributes:
   - key
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype637, _size634) = iprot.readListBegin()
          for _i638 in range(_size634):
            _elem639 = iprot.readI64();
            self.records.append(_elem639)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecordsTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter640 in self.records:
        oprot.writeI64(iter640)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecordsTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype642, _vtype643, _size641 ) = iprot.readMapBegin()
          for _i645 in range(_size641):
            _key646 = iprot.readI64();
            _val647 = []
            (_etype651, _size648) = iprot.readSetBegin()
            for _i652 in range(_size648):
              _elem653 = TObject()
              _elem653.read(iprot)
              _val647.append(_elem653)
            iprot.readSetEnd()
            self.success[_key646] = _val647
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecordsTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter654,viter655 in list(self.success.items()):
        oprot.writeI64(kiter654)
        oprot.writeSetBegin(TType.STRUCT, len(viter655))
        for iter656 in viter655:
          iter656.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecordsTimestr_args:
  """
  Attributes:
   - key
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype660, _size657) = iprot.readListBegin()
          for _i661 in range(_size657):
            _elem662 = iprot.readI64();
            self.records.append(_elem662)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecordsTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter663 in self.records:
        oprot.writeI64(iter663)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyRecordsTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype665, _vtype666, _size664 ) = iprot.readMapBegin()
          for _i668 in range(_size664):
            _key669 = iprot.readI64();
            _val670 = []
            (_etype674, _size671) = iprot.readSetBegin()
            for _i675 in range(_size671):
              _elem676 = TObject()
              _elem676.read(iprot)
              _val670.append(_elem676)
            iprot.readSetEnd()
            self.success[_key669] = _val670
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyRecordsTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter677,viter678 in list(self.success.items()):
        oprot.writeI64(kiter677)
        oprot.writeSetBegin(TType.STRUCT, len(viter678))
        for iter679 in viter678:
          iter679.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecordsTime_args:
  """
  Attributes:
   - keys
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype683, _size680) = iprot.readListBegin()
          for _i684 in range(_size680):
            _elem685 = iprot.readString();
            self.keys.append(_elem685)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype689, _size686) = iprot.readListBegin()
          for _i690 in range(_size686):
            _elem691 = iprot.readI64();
            self.records.append(_elem691)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecordsTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter692 in self.keys:
        oprot.writeString(iter692)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter693 in self.records:
        oprot.writeI64(iter693)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecordsTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype695, _vtype696, _size694 ) = iprot.readMapBegin()
          for _i698 in range(_size694):
            _key699 = iprot.readI64();
            _val700 = {}
            (_ktype702, _vtype703, _size701 ) = iprot.readMapBegin()
            for _i705 in range(_size701):
              _key706 = iprot.readString();
              _val707 = []
              (_etype711, _size708) = iprot.readSetBegin()
              for _i712 in range(_size708):
                _elem713 = TObject()
                _elem713.read(iprot)
                _val707.append(_elem713)
              iprot.readSetEnd()
              _val700[_key706] = _val707
            iprot.readMapEnd()
            self.success[_key699] = _val700
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecordsTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter714,viter715 in list(self.success.items()):
        oprot.writeI64(kiter714)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter715))
        for kiter716,viter717 in list(viter715.items()):
          oprot.writeString(kiter716)
          oprot.writeSetBegin(TType.STRUCT, len(viter717))
          for iter718 in viter717:
            iter718.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecordsTimestr_args:
  """
  Attributes:
   - keys
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype722, _size719) = iprot.readListBegin()
          for _i723 in range(_size719):
            _elem724 = iprot.readString();
            self.keys.append(_elem724)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype728, _size725) = iprot.readListBegin()
          for _i729 in range(_size725):
            _elem730 = iprot.readI64();
            self.records.append(_elem730)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecordsTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter731 in self.keys:
        oprot.writeString(iter731)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter732 in self.records:
        oprot.writeI64(iter732)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysRecordsTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype734, _vtype735, _size733 ) = iprot.readMapBegin()
          for _i737 in range(_size733):
            _key738 = iprot.readI64();
            _val739 = {}
            (_ktype741, _vtype742, _size740 ) = iprot.readMapBegin()
            for _i744 in range(_size740):
              _key745 = iprot.readString();
              _val746 = []
              (_etype750, _size747) = iprot.readSetBegin()
              for _i751 in range(_size747):
                _elem752 = TObject()
                _elem752.read(iprot)
                _val746.append(_elem752)
              iprot.readSetEnd()
              _val739[_key745] = _val746
            iprot.readMapEnd()
            self.success[_key738] = _val739
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysRecordsTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter753,viter754 in list(self.success.items()):
        oprot.writeI64(kiter753)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter754))
        for kiter755,viter756 in list(viter754.items()):
          oprot.writeString(kiter755)
          oprot.writeSetBegin(TType.STRUCT, len(viter756))
          for iter757 in viter756:
            iter757.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCriteria_args:
  """
  Attributes:
   - criteria
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, criteria=None, creds=None, transaction=None, environment=None,):
    self.criteria = criteria
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCriteria_args')
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 1)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCriteria_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype759, _vtype760, _size758 ) = iprot.readMapBegin()
          for _i762 in range(_size758):
            _key763 = iprot.readI64();
            _val764 = {}
            (_ktype766, _vtype767, _size765 ) = iprot.readMapBegin()
            for _i769 in range(_size765):
              _key770 = iprot.readString();
              _val771 = []
              (_etype775, _size772) = iprot.readSetBegin()
              for _i776 in range(_size772):
                _elem777 = TObject()
                _elem777.read(iprot)
                _val771.append(_elem777)
              iprot.readSetEnd()
              _val764[_key770] = _val771
            iprot.readMapEnd()
            self.success[_key763] = _val764
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCriteria_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter778,viter779 in list(self.success.items()):
        oprot.writeI64(kiter778)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter779))
        for kiter780,viter781 in list(viter779.items()):
          oprot.writeString(kiter780)
          oprot.writeSetBegin(TType.STRUCT, len(viter781))
          for iter782 in viter781:
            iter782.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCcl_args:
  """
  Attributes:
   - ccl
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ccl', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, ccl=None, creds=None, transaction=None, environment=None,):
    self.ccl = ccl
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCcl_args')
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 1)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCcl_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype784, _vtype785, _size783 ) = iprot.readMapBegin()
          for _i787 in range(_size783):
            _key788 = iprot.readI64();
            _val789 = {}
            (_ktype791, _vtype792, _size790 ) = iprot.readMapBegin()
            for _i794 in range(_size790):
              _key795 = iprot.readString();
              _val796 = []
              (_etype800, _size797) = iprot.readSetBegin()
              for _i801 in range(_size797):
                _elem802 = TObject()
                _elem802.read(iprot)
                _val796.append(_elem802)
              iprot.readSetEnd()
              _val789[_key795] = _val796
            iprot.readMapEnd()
            self.success[_key788] = _val789
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCcl_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter803,viter804 in list(self.success.items()):
        oprot.writeI64(kiter803)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter804))
        for kiter805,viter806 in list(viter804.items()):
          oprot.writeString(kiter805)
          oprot.writeSetBegin(TType.STRUCT, len(viter806))
          for iter807 in viter806:
            iter807.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCriteriaTime_args:
  """
  Attributes:
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCriteriaTime_args')
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 1)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCriteriaTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype809, _vtype810, _size808 ) = iprot.readMapBegin()
          for _i812 in range(_size808):
            _key813 = iprot.readI64();
            _val814 = {}
            (_ktype816, _vtype817, _size815 ) = iprot.readMapBegin()
            for _i819 in range(_size815):
              _key820 = iprot.readString();
              _val821 = []
              (_etype825, _size822) = iprot.readSetBegin()
              for _i826 in range(_size822):
                _elem827 = TObject()
                _elem827.read(iprot)
                _val821.append(_elem827)
              iprot.readSetEnd()
              _val814[_key820] = _val821
            iprot.readMapEnd()
            self.success[_key813] = _val814
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCriteriaTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter828,viter829 in list(self.success.items()):
        oprot.writeI64(kiter828)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter829))
        for kiter830,viter831 in list(viter829.items()):
          oprot.writeString(kiter830)
          oprot.writeSetBegin(TType.STRUCT, len(viter831))
          for iter832 in viter831:
            iter832.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCriteriaTimestr_args:
  """
  Attributes:
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCriteriaTimestr_args')
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 1)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCriteriaTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype834, _vtype835, _size833 ) = iprot.readMapBegin()
          for _i837 in range(_size833):
            _key838 = iprot.readI64();
            _val839 = {}
            (_ktype841, _vtype842, _size840 ) = iprot.readMapBegin()
            for _i844 in range(_size840):
              _key845 = iprot.readString();
              _val846 = []
              (_etype850, _size847) = iprot.readSetBegin()
              for _i851 in range(_size847):
                _elem852 = TObject()
                _elem852.read(iprot)
                _val846.append(_elem852)
              iprot.readSetEnd()
              _val839[_key845] = _val846
            iprot.readMapEnd()
            self.success[_key838] = _val839
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCriteriaTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter853,viter854 in list(self.success.items()):
        oprot.writeI64(kiter853)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter854))
        for kiter855,viter856 in list(viter854.items()):
          oprot.writeString(kiter855)
          oprot.writeSetBegin(TType.STRUCT, len(viter856))
          for iter857 in viter856:
            iter857.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCclTime_args:
  """
  Attributes:
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ccl', None, None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCclTime_args')
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 1)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCclTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype859, _vtype860, _size858 ) = iprot.readMapBegin()
          for _i862 in range(_size858):
            _key863 = iprot.readI64();
            _val864 = {}
            (_ktype866, _vtype867, _size865 ) = iprot.readMapBegin()
            for _i869 in range(_size865):
              _key870 = iprot.readString();
              _val871 = []
              (_etype875, _size872) = iprot.readSetBegin()
              for _i876 in range(_size872):
                _elem877 = TObject()
                _elem877.read(iprot)
                _val871.append(_elem877)
              iprot.readSetEnd()
              _val864[_key870] = _val871
            iprot.readMapEnd()
            self.success[_key863] = _val864
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCclTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter878,viter879 in list(self.success.items()):
        oprot.writeI64(kiter878)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter879))
        for kiter880,viter881 in list(viter879.items()):
          oprot.writeString(kiter880)
          oprot.writeSetBegin(TType.STRUCT, len(viter881))
          for iter882 in viter881:
            iter882.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCclTimestr_args:
  """
  Attributes:
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ccl', None, None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCclTimestr_args')
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 1)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectCclTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype884, _vtype885, _size883 ) = iprot.readMapBegin()
          for _i887 in range(_size883):
            _key888 = iprot.readI64();
            _val889 = {}
            (_ktype891, _vtype892, _size890 ) = iprot.readMapBegin()
            for _i894 in range(_size890):
              _key895 = iprot.readString();
              _val896 = []
              (_etype900, _size897) = iprot.readSetBegin()
              for _i901 in range(_size897):
                _elem902 = TObject()
                _elem902.read(iprot)
                _val896.append(_elem902)
              iprot.readSetEnd()
              _val889[_key895] = _val896
            iprot.readMapEnd()
            self.success[_key888] = _val889
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectCclTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter903,viter904 in list(self.success.items()):
        oprot.writeI64(kiter903)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter904))
        for kiter905,viter906 in list(viter904.items()):
          oprot.writeString(kiter905)
          oprot.writeSetBegin(TType.STRUCT, len(viter906))
          for iter907 in viter906:
            iter907.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCriteria_args:
  """
  Attributes:
   - key
   - criteria
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, criteria=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.criteria = criteria
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCriteria_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCriteria_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype909, _vtype910, _size908 ) = iprot.readMapBegin()
          for _i912 in range(_size908):
            _key913 = iprot.readI64();
            _val914 = []
            (_etype918, _size915) = iprot.readSetBegin()
            for _i919 in range(_size915):
              _elem920 = TObject()
              _elem920.read(iprot)
              _val914.append(_elem920)
            iprot.readSetEnd()
            self.success[_key913] = _val914
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCriteria_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter921,viter922 in list(self.success.items()):
        oprot.writeI64(kiter921)
        oprot.writeSetBegin(TType.STRUCT, len(viter922))
        for iter923 in viter922:
          iter923.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCcl_args:
  """
  Attributes:
   - key
   - ccl
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, ccl=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.ccl = ccl
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCcl_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCcl_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype925, _vtype926, _size924 ) = iprot.readMapBegin()
          for _i928 in range(_size924):
            _key929 = iprot.readI64();
            _val930 = []
            (_etype934, _size931) = iprot.readSetBegin()
            for _i935 in range(_size931):
              _elem936 = TObject()
              _elem936.read(iprot)
              _val930.append(_elem936)
            iprot.readSetEnd()
            self.success[_key929] = _val930
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCcl_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter937,viter938 in list(self.success.items()):
        oprot.writeI64(kiter937)
        oprot.writeSetBegin(TType.STRUCT, len(viter938))
        for iter939 in viter938:
          iter939.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCriteriaTime_args:
  """
  Attributes:
   - key
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCriteriaTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCriteriaTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype941, _vtype942, _size940 ) = iprot.readMapBegin()
          for _i944 in range(_size940):
            _key945 = iprot.readI64();
            _val946 = []
            (_etype950, _size947) = iprot.readSetBegin()
            for _i951 in range(_size947):
              _elem952 = TObject()
              _elem952.read(iprot)
              _val946.append(_elem952)
            iprot.readSetEnd()
            self.success[_key945] = _val946
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCriteriaTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter953,viter954 in list(self.success.items()):
        oprot.writeI64(kiter953)
        oprot.writeSetBegin(TType.STRUCT, len(viter954))
        for iter955 in viter954:
          iter955.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCriteriaTimestr_args:
  """
  Attributes:
   - key
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCriteriaTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCriteriaTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype957, _vtype958, _size956 ) = iprot.readMapBegin()
          for _i960 in range(_size956):
            _key961 = iprot.readI64();
            _val962 = []
            (_etype966, _size963) = iprot.readSetBegin()
            for _i967 in range(_size963):
              _elem968 = TObject()
              _elem968.read(iprot)
              _val962.append(_elem968)
            iprot.readSetEnd()
            self.success[_key961] = _val962
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCriteriaTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter969,viter970 in list(self.success.items()):
        oprot.writeI64(kiter969)
        oprot.writeSetBegin(TType.STRUCT, len(viter970))
        for iter971 in viter970:
          iter971.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCclTime_args:
  """
  Attributes:
   - key
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCclTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCclTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype973, _vtype974, _size972 ) = iprot.readMapBegin()
          for _i976 in range(_size972):
            _key977 = iprot.readI64();
            _val978 = []
            (_etype982, _size979) = iprot.readSetBegin()
            for _i983 in range(_size979):
              _elem984 = TObject()
              _elem984.read(iprot)
              _val978.append(_elem984)
            iprot.readSetEnd()
            self.success[_key977] = _val978
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCclTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter985,viter986 in list(self.success.items()):
        oprot.writeI64(kiter985)
        oprot.writeSetBegin(TType.STRUCT, len(viter986))
        for iter987 in viter986:
          iter987.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCclTimestr_args:
  """
  Attributes:
   - key
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCclTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeyCclTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype989, _vtype990, _size988 ) = iprot.readMapBegin()
          for _i992 in range(_size988):
            _key993 = iprot.readI64();
            _val994 = []
            (_etype998, _size995) = iprot.readSetBegin()
            for _i999 in range(_size995):
              _elem1000 = TObject()
              _elem1000.read(iprot)
              _val994.append(_elem1000)
            iprot.readSetEnd()
            self.success[_key993] = _val994
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeyCclTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter1001,viter1002 in list(self.success.items()):
        oprot.writeI64(kiter1001)
        oprot.writeSetBegin(TType.STRUCT, len(viter1002))
        for iter1003 in viter1002:
          iter1003.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCriteria_args:
  """
  Attributes:
   - keys
   - criteria
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, criteria=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.criteria = criteria
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1007, _size1004) = iprot.readListBegin()
          for _i1008 in range(_size1004):
            _elem1009 = iprot.readString();
            self.keys.append(_elem1009)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCriteria_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1010 in self.keys:
        oprot.writeString(iter1010)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCriteria_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1012, _vtype1013, _size1011 ) = iprot.readMapBegin()
          for _i1015 in range(_size1011):
            _key1016 = iprot.readI64();
            _val1017 = {}
            (_ktype1019, _vtype1020, _size1018 ) = iprot.readMapBegin()
            for _i1022 in range(_size1018):
              _key1023 = iprot.readString();
              _val1024 = []
              (_etype1028, _size1025) = iprot.readSetBegin()
              for _i1029 in range(_size1025):
                _elem1030 = TObject()
                _elem1030.read(iprot)
                _val1024.append(_elem1030)
              iprot.readSetEnd()
              _val1017[_key1023] = _val1024
            iprot.readMapEnd()
            self.success[_key1016] = _val1017
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCriteria_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1031,viter1032 in list(self.success.items()):
        oprot.writeI64(kiter1031)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter1032))
        for kiter1033,viter1034 in list(viter1032.items()):
          oprot.writeString(kiter1033)
          oprot.writeSetBegin(TType.STRUCT, len(viter1034))
          for iter1035 in viter1034:
            iter1035.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCcl_args:
  """
  Attributes:
   - keys
   - ccl
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, ccl=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.ccl = ccl
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1039, _size1036) = iprot.readListBegin()
          for _i1040 in range(_size1036):
            _elem1041 = iprot.readString();
            self.keys.append(_elem1041)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCcl_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1042 in self.keys:
        oprot.writeString(iter1042)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCcl_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1044, _vtype1045, _size1043 ) = iprot.readMapBegin()
          for _i1047 in range(_size1043):
            _key1048 = iprot.readI64();
            _val1049 = {}
            (_ktype1051, _vtype1052, _size1050 ) = iprot.readMapBegin()
            for _i1054 in range(_size1050):
              _key1055 = iprot.readString();
              _val1056 = []
              (_etype1060, _size1057) = iprot.readSetBegin()
              for _i1061 in range(_size1057):
                _elem1062 = TObject()
                _elem1062.read(iprot)
                _val1056.append(_elem1062)
              iprot.readSetEnd()
              _val1049[_key1055] = _val1056
            iprot.readMapEnd()
            self.success[_key1048] = _val1049
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCcl_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1063,viter1064 in list(self.success.items()):
        oprot.writeI64(kiter1063)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter1064))
        for kiter1065,viter1066 in list(viter1064.items()):
          oprot.writeString(kiter1065)
          oprot.writeSetBegin(TType.STRUCT, len(viter1066))
          for iter1067 in viter1066:
            iter1067.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCriteriaTime_args:
  """
  Attributes:
   - keys
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1071, _size1068) = iprot.readListBegin()
          for _i1072 in range(_size1068):
            _elem1073 = iprot.readString();
            self.keys.append(_elem1073)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCriteriaTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1074 in self.keys:
        oprot.writeString(iter1074)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCriteriaTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1076, _vtype1077, _size1075 ) = iprot.readMapBegin()
          for _i1079 in range(_size1075):
            _key1080 = iprot.readI64();
            _val1081 = {}
            (_ktype1083, _vtype1084, _size1082 ) = iprot.readMapBegin()
            for _i1086 in range(_size1082):
              _key1087 = iprot.readString();
              _val1088 = []
              (_etype1092, _size1089) = iprot.readSetBegin()
              for _i1093 in range(_size1089):
                _elem1094 = TObject()
                _elem1094.read(iprot)
                _val1088.append(_elem1094)
              iprot.readSetEnd()
              _val1081[_key1087] = _val1088
            iprot.readMapEnd()
            self.success[_key1080] = _val1081
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCriteriaTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1095,viter1096 in list(self.success.items()):
        oprot.writeI64(kiter1095)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter1096))
        for kiter1097,viter1098 in list(viter1096.items()):
          oprot.writeString(kiter1097)
          oprot.writeSetBegin(TType.STRUCT, len(viter1098))
          for iter1099 in viter1098:
            iter1099.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCriteriaTimestr_args:
  """
  Attributes:
   - keys
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1103, _size1100) = iprot.readListBegin()
          for _i1104 in range(_size1100):
            _elem1105 = iprot.readString();
            self.keys.append(_elem1105)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCriteriaTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1106 in self.keys:
        oprot.writeString(iter1106)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCriteriaTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1108, _vtype1109, _size1107 ) = iprot.readMapBegin()
          for _i1111 in range(_size1107):
            _key1112 = iprot.readI64();
            _val1113 = {}
            (_ktype1115, _vtype1116, _size1114 ) = iprot.readMapBegin()
            for _i1118 in range(_size1114):
              _key1119 = iprot.readString();
              _val1120 = []
              (_etype1124, _size1121) = iprot.readSetBegin()
              for _i1125 in range(_size1121):
                _elem1126 = TObject()
                _elem1126.read(iprot)
                _val1120.append(_elem1126)
              iprot.readSetEnd()
              _val1113[_key1119] = _val1120
            iprot.readMapEnd()
            self.success[_key1112] = _val1113
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCriteriaTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1127,viter1128 in list(self.success.items()):
        oprot.writeI64(kiter1127)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter1128))
        for kiter1129,viter1130 in list(viter1128.items()):
          oprot.writeString(kiter1129)
          oprot.writeSetBegin(TType.STRUCT, len(viter1130))
          for iter1131 in viter1130:
            iter1131.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCclTime_args:
  """
  Attributes:
   - keys
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1135, _size1132) = iprot.readListBegin()
          for _i1136 in range(_size1132):
            _elem1137 = iprot.readString();
            self.keys.append(_elem1137)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCclTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1138 in self.keys:
        oprot.writeString(iter1138)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCclTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1140, _vtype1141, _size1139 ) = iprot.readMapBegin()
          for _i1143 in range(_size1139):
            _key1144 = iprot.readI64();
            _val1145 = {}
            (_ktype1147, _vtype1148, _size1146 ) = iprot.readMapBegin()
            for _i1150 in range(_size1146):
              _key1151 = iprot.readString();
              _val1152 = []
              (_etype1156, _size1153) = iprot.readSetBegin()
              for _i1157 in range(_size1153):
                _elem1158 = TObject()
                _elem1158.read(iprot)
                _val1152.append(_elem1158)
              iprot.readSetEnd()
              _val1145[_key1151] = _val1152
            iprot.readMapEnd()
            self.success[_key1144] = _val1145
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCclTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1159,viter1160 in list(self.success.items()):
        oprot.writeI64(kiter1159)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter1160))
        for kiter1161,viter1162 in list(viter1160.items()):
          oprot.writeString(kiter1161)
          oprot.writeSetBegin(TType.STRUCT, len(viter1162))
          for iter1163 in viter1162:
            iter1163.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCclTimestr_args:
  """
  Attributes:
   - keys
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1167, _size1164) = iprot.readListBegin()
          for _i1168 in range(_size1164):
            _elem1169 = iprot.readString();
            self.keys.append(_elem1169)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCclTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1170 in self.keys:
        oprot.writeString(iter1170)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class selectKeysCclTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1172, _vtype1173, _size1171 ) = iprot.readMapBegin()
          for _i1175 in range(_size1171):
            _key1176 = iprot.readI64();
            _val1177 = {}
            (_ktype1179, _vtype1180, _size1178 ) = iprot.readMapBegin()
            for _i1182 in range(_size1178):
              _key1183 = iprot.readString();
              _val1184 = []
              (_etype1188, _size1185) = iprot.readSetBegin()
              for _i1189 in range(_size1185):
                _elem1190 = TObject()
                _elem1190.read(iprot)
                _val1184.append(_elem1190)
              iprot.readSetEnd()
              _val1177[_key1183] = _val1184
            iprot.readMapEnd()
            self.success[_key1176] = _val1177
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('selectKeysCclTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1191,viter1192 in list(self.success.items()):
        oprot.writeI64(kiter1191)
        oprot.writeMapBegin(TType.STRING, TType.SET, len(viter1192))
        for kiter1193,viter1194 in list(viter1192.items()):
          oprot.writeString(kiter1193)
          oprot.writeSetBegin(TType.STRUCT, len(viter1194))
          for iter1195 in viter1194:
            iter1195.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecord_args:
  """
  Attributes:
   - key
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, record=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecord_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TObject, TObject.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TObject()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecordTime_args:
  """
  Attributes:
   - key
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecordTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecordTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TObject, TObject.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TObject()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecordTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecordTimestr_args:
  """
  Attributes:
   - key
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecordTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecordTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TObject, TObject.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TObject()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecordTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecord_args:
  """
  Attributes:
   - keys
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, record=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1199, _size1196) = iprot.readListBegin()
          for _i1200 in range(_size1196):
            _elem1201 = iprot.readString();
            self.keys.append(_elem1201)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecord_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1202 in self.keys:
        oprot.writeString(iter1202)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1204, _vtype1205, _size1203 ) = iprot.readMapBegin()
          for _i1207 in range(_size1203):
            _key1208 = iprot.readString();
            _val1209 = TObject()
            _val1209.read(iprot)
            self.success[_key1208] = _val1209
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
      for kiter1210,viter1211 in list(self.success.items()):
        oprot.writeString(kiter1210)
        viter1211.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecordTime_args:
  """
  Attributes:
   - keys
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1215, _size1212) = iprot.readListBegin()
          for _i1216 in range(_size1212):
            _elem1217 = iprot.readString();
            self.keys.append(_elem1217)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecordTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1218 in self.keys:
        oprot.writeString(iter1218)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecordTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1220, _vtype1221, _size1219 ) = iprot.readMapBegin()
          for _i1223 in range(_size1219):
            _key1224 = iprot.readString();
            _val1225 = TObject()
            _val1225.read(iprot)
            self.success[_key1224] = _val1225
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecordTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
      for kiter1226,viter1227 in list(self.success.items()):
        oprot.writeString(kiter1226)
        viter1227.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecordTimestr_args:
  """
  Attributes:
   - keys
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1231, _size1228) = iprot.readListBegin()
          for _i1232 in range(_size1228):
            _elem1233 = iprot.readString();
            self.keys.append(_elem1233)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecordTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1234 in self.keys:
        oprot.writeString(iter1234)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecordTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1236, _vtype1237, _size1235 ) = iprot.readMapBegin()
          for _i1239 in range(_size1235):
            _key1240 = iprot.readString();
            _val1241 = TObject()
            _val1241.read(iprot)
            self.success[_key1240] = _val1241
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecordTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
      for kiter1242,viter1243 in list(self.success.items()):
        oprot.writeString(kiter1242)
        viter1243.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecords_args:
  """
  Attributes:
   - keys
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, records=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1247, _size1244) = iprot.readListBegin()
          for _i1248 in range(_size1244):
            _elem1249 = iprot.readString();
            self.keys.append(_elem1249)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype1253, _size1250) = iprot.readListBegin()
          for _i1254 in range(_size1250):
            _elem1255 = iprot.readI64();
            self.records.append(_elem1255)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecords_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1256 in self.keys:
        oprot.writeString(iter1256)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter1257 in self.records:
        oprot.writeI64(iter1257)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1259, _vtype1260, _size1258 ) = iprot.readMapBegin()
          for _i1262 in range(_size1258):
            _key1263 = iprot.readI64();
            _val1264 = {}
            (_ktype1266, _vtype1267, _size1265 ) = iprot.readMapBegin()
            for _i1269 in range(_size1265):
              _key1270 = iprot.readString();
              _val1271 = TObject()
              _val1271.read(iprot)
              _val1264[_key1270] = _val1271
            iprot.readMapEnd()
            self.success[_key1263] = _val1264
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1272,viter1273 in list(self.success.items()):
        oprot.writeI64(kiter1272)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1273))
        for kiter1274,viter1275 in list(viter1273.items()):
          oprot.writeString(kiter1274)
          viter1275.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecords_args:
  """
  Attributes:
   - key
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, records=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype1279, _size1276) = iprot.readListBegin()
          for _i1280 in range(_size1276):
            _elem1281 = iprot.readI64();
            self.records.append(_elem1281)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecords_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter1282 in self.records:
        oprot.writeI64(iter1282)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1284, _vtype1285, _size1283 ) = iprot.readMapBegin()
          for _i1287 in range(_size1283):
            _key1288 = iprot.readI64();
            _val1289 = TObject()
            _val1289.read(iprot)
            self.success[_key1288] = _val1289
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter1290,viter1291 in list(self.success.items()):
        oprot.writeI64(kiter1290)
        viter1291.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecordsTime_args:
  """
  Attributes:
   - key
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype1295, _size1292) = iprot.readListBegin()
          for _i1296 in range(_size1292):
            _elem1297 = iprot.readI64();
            self.records.append(_elem1297)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecordsTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter1298 in self.records:
        oprot.writeI64(iter1298)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecordsTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1300, _vtype1301, _size1299 ) = iprot.readMapBegin()
          for _i1303 in range(_size1299):
            _key1304 = iprot.readI64();
            _val1305 = TObject()
            _val1305.read(iprot)
            self.success[_key1304] = _val1305
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecordsTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter1306,viter1307 in list(self.success.items()):
        oprot.writeI64(kiter1306)
        viter1307.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecordsTimestr_args:
  """
  Attributes:
   - key
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype1311, _size1308) = iprot.readListBegin()
          for _i1312 in range(_size1308):
            _elem1313 = iprot.readI64();
            self.records.append(_elem1313)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecordsTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter1314 in self.records:
        oprot.writeI64(iter1314)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyRecordsTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1316, _vtype1317, _size1315 ) = iprot.readMapBegin()
          for _i1319 in range(_size1315):
            _key1320 = iprot.readI64();
            _val1321 = TObject()
            _val1321.read(iprot)
            self.success[_key1320] = _val1321
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyRecordsTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter1322,viter1323 in list(self.success.items()):
        oprot.writeI64(kiter1322)
        viter1323.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecordsTime_args:
  """
  Attributes:
   - keys
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1327, _size1324) = iprot.readListBegin()
          for _i1328 in range(_size1324):
            _elem1329 = iprot.readString();
            self.keys.append(_elem1329)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype1333, _size1330) = iprot.readListBegin()
          for _i1334 in range(_size1330):
            _elem1335 = iprot.readI64();
            self.records.append(_elem1335)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecordsTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1336 in self.keys:
        oprot.writeString(iter1336)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter1337 in self.records:
        oprot.writeI64(iter1337)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecordsTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1339, _vtype1340, _size1338 ) = iprot.readMapBegin()
          for _i1342 in range(_size1338):
            _key1343 = iprot.readI64();
            _val1344 = {}
            (_ktype1346, _vtype1347, _size1345 ) = iprot.readMapBegin()
            for _i1349 in range(_size1345):
              _key1350 = iprot.readString();
              _val1351 = TObject()
              _val1351.read(iprot)
              _val1344[_key1350] = _val1351
            iprot.readMapEnd()
            self.success[_key1343] = _val1344
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecordsTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1352,viter1353 in list(self.success.items()):
        oprot.writeI64(kiter1352)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1353))
        for kiter1354,viter1355 in list(viter1353.items()):
          oprot.writeString(kiter1354)
          viter1355.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecordsTimestr_args:
  """
  Attributes:
   - keys
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1359, _size1356) = iprot.readListBegin()
          for _i1360 in range(_size1356):
            _elem1361 = iprot.readString();
            self.keys.append(_elem1361)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype1365, _size1362) = iprot.readListBegin()
          for _i1366 in range(_size1362):
            _elem1367 = iprot.readI64();
            self.records.append(_elem1367)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecordsTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1368 in self.keys:
        oprot.writeString(iter1368)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter1369 in self.records:
        oprot.writeI64(iter1369)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysRecordsTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1371, _vtype1372, _size1370 ) = iprot.readMapBegin()
          for _i1374 in range(_size1370):
            _key1375 = iprot.readI64();
            _val1376 = {}
            (_ktype1378, _vtype1379, _size1377 ) = iprot.readMapBegin()
            for _i1381 in range(_size1377):
              _key1382 = iprot.readString();
              _val1383 = TObject()
              _val1383.read(iprot)
              _val1376[_key1382] = _val1383
            iprot.readMapEnd()
            self.success[_key1375] = _val1376
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysRecordsTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1384,viter1385 in list(self.success.items()):
        oprot.writeI64(kiter1384)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1385))
        for kiter1386,viter1387 in list(viter1385.items()):
          oprot.writeString(kiter1386)
          viter1387.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCriteria_args:
  """
  Attributes:
   - key
   - criteria
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, criteria=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.criteria = criteria
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCriteria_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCriteria_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1389, _vtype1390, _size1388 ) = iprot.readMapBegin()
          for _i1392 in range(_size1388):
            _key1393 = iprot.readI64();
            _val1394 = TObject()
            _val1394.read(iprot)
            self.success[_key1393] = _val1394
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCriteria_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter1395,viter1396 in list(self.success.items()):
        oprot.writeI64(kiter1395)
        viter1396.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCriteria_args:
  """
  Attributes:
   - criteria
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, criteria=None, creds=None, transaction=None, environment=None,):
    self.criteria = criteria
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCriteria_args')
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 1)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCriteria_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1398, _vtype1399, _size1397 ) = iprot.readMapBegin()
          for _i1401 in range(_size1397):
            _key1402 = iprot.readI64();
            _val1403 = {}
            (_ktype1405, _vtype1406, _size1404 ) = iprot.readMapBegin()
            for _i1408 in range(_size1404):
              _key1409 = iprot.readString();
              _val1410 = TObject()
              _val1410.read(iprot)
              _val1403[_key1409] = _val1410
            iprot.readMapEnd()
            self.success[_key1402] = _val1403
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCriteria_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1411,viter1412 in list(self.success.items()):
        oprot.writeI64(kiter1411)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1412))
        for kiter1413,viter1414 in list(viter1412.items()):
          oprot.writeString(kiter1413)
          viter1414.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCcl_args:
  """
  Attributes:
   - ccl
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ccl', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, ccl=None, creds=None, transaction=None, environment=None,):
    self.ccl = ccl
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCcl_args')
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 1)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCcl_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1416, _vtype1417, _size1415 ) = iprot.readMapBegin()
          for _i1419 in range(_size1415):
            _key1420 = iprot.readI64();
            _val1421 = {}
            (_ktype1423, _vtype1424, _size1422 ) = iprot.readMapBegin()
            for _i1426 in range(_size1422):
              _key1427 = iprot.readString();
              _val1428 = TObject()
              _val1428.read(iprot)
              _val1421[_key1427] = _val1428
            iprot.readMapEnd()
            self.success[_key1420] = _val1421
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCcl_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1429,viter1430 in list(self.success.items()):
        oprot.writeI64(kiter1429)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1430))
        for kiter1431,viter1432 in list(viter1430.items()):
          oprot.writeString(kiter1431)
          viter1432.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCriteriaTime_args:
  """
  Attributes:
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCriteriaTime_args')
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 1)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCriteriaTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1434, _vtype1435, _size1433 ) = iprot.readMapBegin()
          for _i1437 in range(_size1433):
            _key1438 = iprot.readI64();
            _val1439 = {}
            (_ktype1441, _vtype1442, _size1440 ) = iprot.readMapBegin()
            for _i1444 in range(_size1440):
              _key1445 = iprot.readString();
              _val1446 = TObject()
              _val1446.read(iprot)
              _val1439[_key1445] = _val1446
            iprot.readMapEnd()
            self.success[_key1438] = _val1439
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCriteriaTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1447,viter1448 in list(self.success.items()):
        oprot.writeI64(kiter1447)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1448))
        for kiter1449,viter1450 in list(viter1448.items()):
          oprot.writeString(kiter1449)
          viter1450.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCriteriaTimestr_args:
  """
  Attributes:
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCriteriaTimestr_args')
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 1)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCriteriaTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1452, _vtype1453, _size1451 ) = iprot.readMapBegin()
          for _i1455 in range(_size1451):
            _key1456 = iprot.readI64();
            _val1457 = {}
            (_ktype1459, _vtype1460, _size1458 ) = iprot.readMapBegin()
            for _i1462 in range(_size1458):
              _key1463 = iprot.readString();
              _val1464 = TObject()
              _val1464.read(iprot)
              _val1457[_key1463] = _val1464
            iprot.readMapEnd()
            self.success[_key1456] = _val1457
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCriteriaTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1465,viter1466 in list(self.success.items()):
        oprot.writeI64(kiter1465)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1466))
        for kiter1467,viter1468 in list(viter1466.items()):
          oprot.writeString(kiter1467)
          viter1468.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCclTime_args:
  """
  Attributes:
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ccl', None, None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCclTime_args')
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 1)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCclTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1470, _vtype1471, _size1469 ) = iprot.readMapBegin()
          for _i1473 in range(_size1469):
            _key1474 = iprot.readI64();
            _val1475 = {}
            (_ktype1477, _vtype1478, _size1476 ) = iprot.readMapBegin()
            for _i1480 in range(_size1476):
              _key1481 = iprot.readString();
              _val1482 = TObject()
              _val1482.read(iprot)
              _val1475[_key1481] = _val1482
            iprot.readMapEnd()
            self.success[_key1474] = _val1475
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCclTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1483,viter1484 in list(self.success.items()):
        oprot.writeI64(kiter1483)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1484))
        for kiter1485,viter1486 in list(viter1484.items()):
          oprot.writeString(kiter1485)
          viter1486.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCclTimestr_args:
  """
  Attributes:
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ccl', None, None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCclTimestr_args')
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 1)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCclTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1488, _vtype1489, _size1487 ) = iprot.readMapBegin()
          for _i1491 in range(_size1487):
            _key1492 = iprot.readI64();
            _val1493 = {}
            (_ktype1495, _vtype1496, _size1494 ) = iprot.readMapBegin()
            for _i1498 in range(_size1494):
              _key1499 = iprot.readString();
              _val1500 = TObject()
              _val1500.read(iprot)
              _val1493[_key1499] = _val1500
            iprot.readMapEnd()
            self.success[_key1492] = _val1493
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCclTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1501,viter1502 in list(self.success.items()):
        oprot.writeI64(kiter1501)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1502))
        for kiter1503,viter1504 in list(viter1502.items()):
          oprot.writeString(kiter1503)
          viter1504.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCcl_args:
  """
  Attributes:
   - key
   - ccl
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, ccl=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.ccl = ccl
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCcl_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCcl_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1506, _vtype1507, _size1505 ) = iprot.readMapBegin()
          for _i1509 in range(_size1505):
            _key1510 = iprot.readI64();
            _val1511 = TObject()
            _val1511.read(iprot)
            self.success[_key1510] = _val1511
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCcl_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter1512,viter1513 in list(self.success.items()):
        oprot.writeI64(kiter1512)
        viter1513.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCriteriaTime_args:
  """
  Attributes:
   - key
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCriteriaTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCriteriaTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1515, _vtype1516, _size1514 ) = iprot.readMapBegin()
          for _i1518 in range(_size1514):
            _key1519 = iprot.readI64();
            _val1520 = TObject()
            _val1520.read(iprot)
            self.success[_key1519] = _val1520
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCriteriaTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter1521,viter1522 in list(self.success.items()):
        oprot.writeI64(kiter1521)
        viter1522.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCriteriaTimestr_args:
  """
  Attributes:
   - key
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCriteriaTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCriteriaTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1524, _vtype1525, _size1523 ) = iprot.readMapBegin()
          for _i1527 in range(_size1523):
            _key1528 = iprot.readI64();
            _val1529 = TObject()
            _val1529.read(iprot)
            self.success[_key1528] = _val1529
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCriteriaTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter1530,viter1531 in list(self.success.items()):
        oprot.writeI64(kiter1530)
        viter1531.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCclTime_args:
  """
  Attributes:
   - key
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCclTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCclTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1533, _vtype1534, _size1532 ) = iprot.readMapBegin()
          for _i1536 in range(_size1532):
            _key1537 = iprot.readI64();
            _val1538 = TObject()
            _val1538.read(iprot)
            self.success[_key1537] = _val1538
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCclTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter1539,viter1540 in list(self.success.items()):
        oprot.writeI64(kiter1539)
        viter1540.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCclTimestr_args:
  """
  Attributes:
   - key
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCclTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeyCclTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1542, _vtype1543, _size1541 ) = iprot.readMapBegin()
          for _i1545 in range(_size1541):
            _key1546 = iprot.readI64();
            _val1547 = TObject()
            _val1547.read(iprot)
            self.success[_key1546] = _val1547
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeyCclTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter1548,viter1549 in list(self.success.items()):
        oprot.writeI64(kiter1548)
        viter1549.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCriteria_args:
  """
  Attributes:
   - keys
   - criteria
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, criteria=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.criteria = criteria
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1553, _size1550) = iprot.readListBegin()
          for _i1554 in range(_size1550):
            _elem1555 = iprot.readString();
            self.keys.append(_elem1555)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCriteria_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1556 in self.keys:
        oprot.writeString(iter1556)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCriteria_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1558, _vtype1559, _size1557 ) = iprot.readMapBegin()
          for _i1561 in range(_size1557):
            _key1562 = iprot.readI64();
            _val1563 = {}
            (_ktype1565, _vtype1566, _size1564 ) = iprot.readMapBegin()
            for _i1568 in range(_size1564):
              _key1569 = iprot.readString();
              _val1570 = TObject()
              _val1570.read(iprot)
              _val1563[_key1569] = _val1570
            iprot.readMapEnd()
            self.success[_key1562] = _val1563
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCriteria_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1571,viter1572 in list(self.success.items()):
        oprot.writeI64(kiter1571)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1572))
        for kiter1573,viter1574 in list(viter1572.items()):
          oprot.writeString(kiter1573)
          viter1574.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCcl_args:
  """
  Attributes:
   - keys
   - ccl
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, keys=None, ccl=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.ccl = ccl
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1578, _size1575) = iprot.readListBegin()
          for _i1579 in range(_size1575):
            _elem1580 = iprot.readString();
            self.keys.append(_elem1580)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCcl_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1581 in self.keys:
        oprot.writeString(iter1581)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCcl_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1583, _vtype1584, _size1582 ) = iprot.readMapBegin()
          for _i1586 in range(_size1582):
            _key1587 = iprot.readI64();
            _val1588 = {}
            (_ktype1590, _vtype1591, _size1589 ) = iprot.readMapBegin()
            for _i1593 in range(_size1589):
              _key1594 = iprot.readString();
              _val1595 = TObject()
              _val1595.read(iprot)
              _val1588[_key1594] = _val1595
            iprot.readMapEnd()
            self.success[_key1587] = _val1588
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCcl_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1596,viter1597 in list(self.success.items()):
        oprot.writeI64(kiter1596)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1597))
        for kiter1598,viter1599 in list(viter1597.items()):
          oprot.writeString(kiter1598)
          viter1599.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCriteriaTime_args:
  """
  Attributes:
   - keys
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1603, _size1600) = iprot.readListBegin()
          for _i1604 in range(_size1600):
            _elem1605 = iprot.readString();
            self.keys.append(_elem1605)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCriteriaTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1606 in self.keys:
        oprot.writeString(iter1606)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCriteriaTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1608, _vtype1609, _size1607 ) = iprot.readMapBegin()
          for _i1611 in range(_size1607):
            _key1612 = iprot.readI64();
            _val1613 = {}
            (_ktype1615, _vtype1616, _size1614 ) = iprot.readMapBegin()
            for _i1618 in range(_size1614):
              _key1619 = iprot.readString();
              _val1620 = TObject()
              _val1620.read(iprot)
              _val1613[_key1619] = _val1620
            iprot.readMapEnd()
            self.success[_key1612] = _val1613
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCriteriaTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1621,viter1622 in list(self.success.items()):
        oprot.writeI64(kiter1621)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1622))
        for kiter1623,viter1624 in list(viter1622.items()):
          oprot.writeString(kiter1623)
          viter1624.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCriteriaTimestr_args:
  """
  Attributes:
   - keys
   - criteria
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, criteria=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.criteria = criteria
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1628, _size1625) = iprot.readListBegin()
          for _i1629 in range(_size1625):
            _elem1630 = iprot.readString();
            self.keys.append(_elem1630)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCriteriaTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1631 in self.keys:
        oprot.writeString(iter1631)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 2)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCriteriaTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1633, _vtype1634, _size1632 ) = iprot.readMapBegin()
          for _i1636 in range(_size1632):
            _key1637 = iprot.readI64();
            _val1638 = {}
            (_ktype1640, _vtype1641, _size1639 ) = iprot.readMapBegin()
            for _i1643 in range(_size1639):
              _key1644 = iprot.readString();
              _val1645 = TObject()
              _val1645.read(iprot)
              _val1638[_key1644] = _val1645
            iprot.readMapEnd()
            self.success[_key1637] = _val1638
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCriteriaTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1646,viter1647 in list(self.success.items()):
        oprot.writeI64(kiter1646)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1647))
        for kiter1648,viter1649 in list(viter1647.items()):
          oprot.writeString(kiter1648)
          viter1649.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCclTime_args:
  """
  Attributes:
   - keys
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1653, _size1650) = iprot.readListBegin()
          for _i1654 in range(_size1650):
            _elem1655 = iprot.readString();
            self.keys.append(_elem1655)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCclTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1656 in self.keys:
        oprot.writeString(iter1656)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCclTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1658, _vtype1659, _size1657 ) = iprot.readMapBegin()
          for _i1661 in range(_size1657):
            _key1662 = iprot.readI64();
            _val1663 = {}
            (_ktype1665, _vtype1666, _size1664 ) = iprot.readMapBegin()
            for _i1668 in range(_size1664):
              _key1669 = iprot.readString();
              _val1670 = TObject()
              _val1670.read(iprot)
              _val1663[_key1669] = _val1670
            iprot.readMapEnd()
            self.success[_key1662] = _val1663
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCclTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1671,viter1672 in list(self.success.items()):
        oprot.writeI64(kiter1671)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1672))
        for kiter1673,viter1674 in list(viter1672.items()):
          oprot.writeString(kiter1673)
          viter1674.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCclTimestr_args:
  """
  Attributes:
   - keys
   - ccl
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'ccl', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, ccl=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.ccl = ccl
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype1678, _size1675) = iprot.readListBegin()
          for _i1679 in range(_size1675):
            _elem1680 = iprot.readString();
            self.keys.append(_elem1680)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCclTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter1681 in self.keys:
        oprot.writeString(iter1681)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 2)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getKeysCclTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1683, _vtype1684, _size1682 ) = iprot.readMapBegin()
          for _i1686 in range(_size1682):
            _key1687 = iprot.readI64();
            _val1688 = {}
            (_ktype1690, _vtype1691, _size1689 ) = iprot.readMapBegin()
            for _i1693 in range(_size1689):
              _key1694 = iprot.readString();
              _val1695 = TObject()
              _val1695.read(iprot)
              _val1688[_key1694] = _val1695
            iprot.readMapEnd()
            self.success[_key1687] = _val1688
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getKeysCclTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter1696,viter1697 in list(self.success.items()):
        oprot.writeI64(kiter1696)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter1697))
        for kiter1698,viter1699 in list(viter1697.items()):
          oprot.writeString(kiter1698)
          viter1699.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyKeyValueRecord_args:
  """
  Attributes:
   - key
   - value
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.I64, 'record', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, value=None, record=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyKeyValueRecord_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 3)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyKeyValueRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyKeyValueRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyKeyValueRecordTime_args:
  """
  Attributes:
   - key
   - value
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.I64, 'record', None, None, ), # 3
    (4, TType.I64, 'timestamp', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, value=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyKeyValueRecordTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 3)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 4)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyKeyValueRecordTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyKeyValueRecordTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyKeyValueRecordTimestr_args:
  """
  Attributes:
   - key
   - value
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.I64, 'record', None, None, ), # 3
    (4, TType.STRING, 'timestamp', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, value=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyKeyValueRecordTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 3)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 4)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyKeyValueRecordTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyKeyValueRecordTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class jsonifyRecords_args:
  """
  Attributes:
   - records
   - identifier
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.BOOL, 'identifier', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, records=None, identifier=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.identifier = identifier
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype1703, _size1700) = iprot.readListBegin()
          for _i1704 in range(_size1700):
            _elem1705 = iprot.readI64();
            self.records.append(_elem1705)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.identifier = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('jsonifyRecords_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter1706 in self.records:
        oprot.writeI64(iter1706)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.identifier is not None:
      oprot.writeFieldBegin('identifier', TType.BOOL, 2)
      oprot.writeBool(self.identifier)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.identifier)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class jsonifyRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('jsonifyRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class jsonifyRecordsTime_args:
  """
  Attributes:
   - records
   - timestamp
   - identifier
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.BOOL, 'identifier', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, records=None, timestamp=None, identifier=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.timestamp = timestamp
    self.identifier = identifier
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype1710, _size1707) = iprot.readListBegin()
          for _i1711 in range(_size1707):
            _elem1712 = iprot.readI64();
            self.records.append(_elem1712)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.identifier = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('jsonifyRecordsTime_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter1713 in self.records:
        oprot.writeI64(iter1713)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.identifier is not None:
      oprot.writeFieldBegin('identifier', TType.BOOL, 3)
      oprot.writeBool(self.identifier)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.identifier)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class jsonifyRecordsTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('jsonifyRecordsTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class jsonifyRecordsTimestr_args:
  """
  Attributes:
   - records
   - timestamp
   - identifier
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.BOOL, 'identifier', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, records=None, timestamp=None, identifier=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.timestamp = timestamp
    self.identifier = identifier
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype1717, _size1714) = iprot.readListBegin()
          for _i1718 in range(_size1714):
            _elem1719 = iprot.readI64();
            self.records.append(_elem1719)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.identifier = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('jsonifyRecordsTimestr_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter1720 in self.records:
        oprot.writeI64(iter1720)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.identifier is not None:
      oprot.writeFieldBegin('identifier', TType.BOOL, 3)
      oprot.writeBool(self.identifier)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.identifier)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class jsonifyRecordsTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('jsonifyRecordsTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findCriteria_args:
  """
  Attributes:
   - criteria
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, criteria=None, creds=None, transaction=None, environment=None,):
    self.criteria = criteria
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findCriteria_args')
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 1)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findCriteria_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype1724, _size1721) = iprot.readSetBegin()
          for _i1725 in range(_size1721):
            _elem1726 = iprot.readI64();
            self.success.append(_elem1726)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findCriteria_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter1727 in self.success:
        oprot.writeI64(iter1727)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findCcl_args:
  """
  Attributes:
   - ccl
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ccl', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, ccl=None, creds=None, transaction=None, environment=None,):
    self.ccl = ccl
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findCcl_args')
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 1)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findCcl_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype1731, _size1728) = iprot.readSetBegin()
          for _i1732 in range(_size1728):
            _elem1733 = iprot.readI64();
            self.success.append(_elem1733)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findCcl_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter1734 in self.success:
        oprot.writeI64(iter1734)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorValues_args:
  """
  Attributes:
   - key
   - operator
   - values
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I32, 'operator', None, None, ), # 2
    (3, TType.LIST, 'values', (TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, operator=None, values=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.operator = operator
    self.values = values
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.operator = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.values = []
          (_etype1738, _size1735) = iprot.readListBegin()
          for _i1739 in range(_size1735):
            _elem1740 = TObject()
            _elem1740.read(iprot)
            self.values.append(_elem1740)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorValues_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.operator is not None:
      oprot.writeFieldBegin('operator', TType.I32, 2)
      oprot.writeI32(self.operator)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.values))
      for iter1741 in self.values:
        iter1741.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.operator)
    value = (value * 31) ^ hash(self.values)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorValues_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype1745, _size1742) = iprot.readSetBegin()
          for _i1746 in range(_size1742):
            _elem1747 = iprot.readI64();
            self.success.append(_elem1747)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorValues_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter1748 in self.success:
        oprot.writeI64(iter1748)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorValuesTime_args:
  """
  Attributes:
   - key
   - operator
   - values
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I32, 'operator', None, None, ), # 2
    (3, TType.LIST, 'values', (TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 3
    (4, TType.I64, 'timestamp', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, operator=None, values=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.operator = operator
    self.values = values
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.operator = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.values = []
          (_etype1752, _size1749) = iprot.readListBegin()
          for _i1753 in range(_size1749):
            _elem1754 = TObject()
            _elem1754.read(iprot)
            self.values.append(_elem1754)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorValuesTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.operator is not None:
      oprot.writeFieldBegin('operator', TType.I32, 2)
      oprot.writeI32(self.operator)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.values))
      for iter1755 in self.values:
        iter1755.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 4)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.operator)
    value = (value * 31) ^ hash(self.values)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorValuesTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype1759, _size1756) = iprot.readSetBegin()
          for _i1760 in range(_size1756):
            _elem1761 = iprot.readI64();
            self.success.append(_elem1761)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorValuesTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter1762 in self.success:
        oprot.writeI64(iter1762)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorValuesTimestr_args:
  """
  Attributes:
   - key
   - operator
   - values
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I32, 'operator', None, None, ), # 2
    (3, TType.LIST, 'values', (TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 3
    (4, TType.STRING, 'timestamp', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, operator=None, values=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.operator = operator
    self.values = values
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.operator = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.values = []
          (_etype1766, _size1763) = iprot.readListBegin()
          for _i1767 in range(_size1763):
            _elem1768 = TObject()
            _elem1768.read(iprot)
            self.values.append(_elem1768)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorValuesTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.operator is not None:
      oprot.writeFieldBegin('operator', TType.I32, 2)
      oprot.writeI32(self.operator)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.values))
      for iter1769 in self.values:
        iter1769.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 4)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.operator)
    value = (value * 31) ^ hash(self.values)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorValuesTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype1773, _size1770) = iprot.readSetBegin()
          for _i1774 in range(_size1770):
            _elem1775 = iprot.readI64();
            self.success.append(_elem1775)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorValuesTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter1776 in self.success:
        oprot.writeI64(iter1776)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorstrValues_args:
  """
  Attributes:
   - key
   - operator
   - values
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'operator', None, None, ), # 2
    (3, TType.LIST, 'values', (TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, operator=None, values=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.operator = operator
    self.values = values
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.operator = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.values = []
          (_etype1780, _size1777) = iprot.readListBegin()
          for _i1781 in range(_size1777):
            _elem1782 = TObject()
            _elem1782.read(iprot)
            self.values.append(_elem1782)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorstrValues_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.operator is not None:
      oprot.writeFieldBegin('operator', TType.STRING, 2)
      oprot.writeString(self.operator)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.values))
      for iter1783 in self.values:
        iter1783.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.operator)
    value = (value * 31) ^ hash(self.values)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorstrValues_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype1787, _size1784) = iprot.readSetBegin()
          for _i1788 in range(_size1784):
            _elem1789 = iprot.readI64();
            self.success.append(_elem1789)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorstrValues_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter1790 in self.success:
        oprot.writeI64(iter1790)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorstrValuesTime_args:
  """
  Attributes:
   - key
   - operator
   - values
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'operator', None, None, ), # 2
    (3, TType.LIST, 'values', (TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 3
    (4, TType.I64, 'timestamp', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, operator=None, values=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.operator = operator
    self.values = values
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.operator = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.values = []
          (_etype1794, _size1791) = iprot.readListBegin()
          for _i1795 in range(_size1791):
            _elem1796 = TObject()
            _elem1796.read(iprot)
            self.values.append(_elem1796)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorstrValuesTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.operator is not None:
      oprot.writeFieldBegin('operator', TType.STRING, 2)
      oprot.writeString(self.operator)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.values))
      for iter1797 in self.values:
        iter1797.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 4)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.operator)
    value = (value * 31) ^ hash(self.values)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorstrValuesTime_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype1801, _size1798) = iprot.readSetBegin()
          for _i1802 in range(_size1798):
            _elem1803 = iprot.readI64();
            self.success.append(_elem1803)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorstrValuesTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter1804 in self.success:
        oprot.writeI64(iter1804)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorstrValuesTimestr_args:
  """
  Attributes:
   - key
   - operator
   - values
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'operator', None, None, ), # 2
    (3, TType.LIST, 'values', (TType.STRUCT,(TObject, TObject.thrift_spec)), None, ), # 3
    (4, TType.STRING, 'timestamp', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, operator=None, values=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.operator = operator
    self.values = values
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.operator = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.values = []
          (_etype1808, _size1805) = iprot.readListBegin()
          for _i1809 in range(_size1805):
            _elem1810 = TObject()
            _elem1810.read(iprot)
            self.values.append(_elem1810)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorstrValuesTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.operator is not None:
      oprot.writeFieldBegin('operator', TType.STRING, 2)
      oprot.writeString(self.operator)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.values))
      for iter1811 in self.values:
        iter1811.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 4)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.operator)
    value = (value * 31) ^ hash(self.values)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findKeyOperatorstrValuesTimestr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype1815, _size1812) = iprot.readSetBegin()
          for _i1816 in range(_size1812):
            _elem1817 = iprot.readI64();
            self.success.append(_elem1817)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findKeyOperatorstrValuesTimestr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter1818 in self.success:
        oprot.writeI64(iter1818)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class search_args:
  """
  Attributes:
   - key
   - query
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'query', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, query=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.query = query
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.query = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('search_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.query is not None:
      oprot.writeFieldBegin('query', TType.STRING, 2)
      oprot.writeString(self.query)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.query)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class search_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = []
          (_etype1822, _size1819) = iprot.readSetBegin()
          for _i1823 in range(_size1819):
            _elem1824 = iprot.readI64();
            self.success.append(_elem1824)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('search_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.I64, len(self.success))
      for iter1825 in self.success:
        oprot.writeI64(iter1825)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditRecord_args:
  """
  Attributes:
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, record=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditRecord_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1827, _vtype1828, _size1826 ) = iprot.readMapBegin()
          for _i1830 in range(_size1826):
            _key1831 = iprot.readI64();
            _val1832 = iprot.readString();
            self.success[_key1831] = _val1832
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter1833,viter1834 in list(self.success.items()):
        oprot.writeI64(kiter1833)
        oprot.writeString(viter1834)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditRecordStart_args:
  """
  Attributes:
   - record
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.I64, 'start', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, record=None, start=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditRecordStart_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 2)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditRecordStart_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1836, _vtype1837, _size1835 ) = iprot.readMapBegin()
          for _i1839 in range(_size1835):
            _key1840 = iprot.readI64();
            _val1841 = iprot.readString();
            self.success[_key1840] = _val1841
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditRecordStart_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter1842,viter1843 in list(self.success.items()):
        oprot.writeI64(kiter1842)
        oprot.writeString(viter1843)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditRecordStartstr_args:
  """
  Attributes:
   - record
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRING, 'start', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, record=None, start=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditRecordStartstr_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 2)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditRecordStartstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1845, _vtype1846, _size1844 ) = iprot.readMapBegin()
          for _i1848 in range(_size1844):
            _key1849 = iprot.readI64();
            _val1850 = iprot.readString();
            self.success[_key1849] = _val1850
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditRecordStartstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter1851,viter1852 in list(self.success.items()):
        oprot.writeI64(kiter1851)
        oprot.writeString(viter1852)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditRecordStartEnd_args:
  """
  Attributes:
   - record
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.I64, 'start', None, None, ), # 2
    (3, TType.I64, 'tend', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, record=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tend = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditRecordStartEnd_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 2)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.I64, 3)
      oprot.writeI64(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditRecordStartEnd_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1854, _vtype1855, _size1853 ) = iprot.readMapBegin()
          for _i1857 in range(_size1853):
            _key1858 = iprot.readI64();
            _val1859 = iprot.readString();
            self.success[_key1858] = _val1859
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditRecordStartEnd_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter1860,viter1861 in list(self.success.items()):
        oprot.writeI64(kiter1860)
        oprot.writeString(viter1861)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditRecordStartstrEndstr_args:
  """
  Attributes:
   - record
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRING, 'start', None, None, ), # 2
    (3, TType.STRING, 'tend', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, record=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.tend = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditRecordStartstrEndstr_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 2)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.STRING, 3)
      oprot.writeString(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditRecordStartstrEndstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1863, _vtype1864, _size1862 ) = iprot.readMapBegin()
          for _i1866 in range(_size1862):
            _key1867 = iprot.readI64();
            _val1868 = iprot.readString();
            self.success[_key1867] = _val1868
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditRecordStartstrEndstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter1869,viter1870 in list(self.success.items()):
        oprot.writeI64(kiter1869)
        oprot.writeString(viter1870)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditKeyRecord_args:
  """
  Attributes:
   - key
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, record=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditKeyRecord_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditKeyRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1872, _vtype1873, _size1871 ) = iprot.readMapBegin()
          for _i1875 in range(_size1871):
            _key1876 = iprot.readI64();
            _val1877 = iprot.readString();
            self.success[_key1876] = _val1877
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditKeyRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter1878,viter1879 in list(self.success.items()):
        oprot.writeI64(kiter1878)
        oprot.writeString(viter1879)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditKeyRecordStart_args:
  """
  Attributes:
   - key
   - record
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'start', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, start=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditKeyRecordStart_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 3)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditKeyRecordStart_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1881, _vtype1882, _size1880 ) = iprot.readMapBegin()
          for _i1884 in range(_size1880):
            _key1885 = iprot.readI64();
            _val1886 = iprot.readString();
            self.success[_key1885] = _val1886
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditKeyRecordStart_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter1887,viter1888 in list(self.success.items()):
        oprot.writeI64(kiter1887)
        oprot.writeString(viter1888)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditKeyRecordStartstr_args:
  """
  Attributes:
   - key
   - record
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'start', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, start=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditKeyRecordStartstr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 3)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditKeyRecordStartstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1890, _vtype1891, _size1889 ) = iprot.readMapBegin()
          for _i1893 in range(_size1889):
            _key1894 = iprot.readI64();
            _val1895 = iprot.readString();
            self.success[_key1894] = _val1895
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditKeyRecordStartstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter1896,viter1897 in list(self.success.items()):
        oprot.writeI64(kiter1896)
        oprot.writeString(viter1897)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditKeyRecordStartEnd_args:
  """
  Attributes:
   - key
   - record
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'start', None, None, ), # 3
    (4, TType.I64, 'tend', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, record=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.tend = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditKeyRecordStartEnd_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 3)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.I64, 4)
      oprot.writeI64(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditKeyRecordStartEnd_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1899, _vtype1900, _size1898 ) = iprot.readMapBegin()
          for _i1902 in range(_size1898):
            _key1903 = iprot.readI64();
            _val1904 = iprot.readString();
            self.success[_key1903] = _val1904
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditKeyRecordStartEnd_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter1905,viter1906 in list(self.success.items()):
        oprot.writeI64(kiter1905)
        oprot.writeString(viter1906)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditKeyRecordStartstrEndstr_args:
  """
  Attributes:
   - key
   - record
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'start', None, None, ), # 3
    (4, TType.STRING, 'tend', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, record=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.tend = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditKeyRecordStartstrEndstr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 3)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.STRING, 4)
      oprot.writeString(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class auditKeyRecordStartstrEndstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1908, _vtype1909, _size1907 ) = iprot.readMapBegin()
          for _i1911 in range(_size1907):
            _key1912 = iprot.readI64();
            _val1913 = iprot.readString();
            self.success[_key1912] = _val1913
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('auditKeyRecordStartstrEndstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRING, len(self.success))
      for kiter1914,viter1915 in list(self.success.items()):
        oprot.writeI64(kiter1914)
        oprot.writeString(viter1915)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chronologizeKeyRecord_args:
  """
  Attributes:
   - key
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, record=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chronologizeKeyRecord_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chronologizeKeyRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1917, _vtype1918, _size1916 ) = iprot.readMapBegin()
          for _i1920 in range(_size1916):
            _key1921 = iprot.readI64();
            _val1922 = []
            (_etype1926, _size1923) = iprot.readSetBegin()
            for _i1927 in range(_size1923):
              _elem1928 = TObject()
              _elem1928.read(iprot)
              _val1922.append(_elem1928)
            iprot.readSetEnd()
            self.success[_key1921] = _val1922
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chronologizeKeyRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter1929,viter1930 in list(self.success.items()):
        oprot.writeI64(kiter1929)
        oprot.writeSetBegin(TType.STRUCT, len(viter1930))
        for iter1931 in viter1930:
          iter1931.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chronologizeKeyRecordStart_args:
  """
  Attributes:
   - key
   - record
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'start', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, start=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chronologizeKeyRecordStart_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 3)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chronologizeKeyRecordStart_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1933, _vtype1934, _size1932 ) = iprot.readMapBegin()
          for _i1936 in range(_size1932):
            _key1937 = iprot.readI64();
            _val1938 = []
            (_etype1942, _size1939) = iprot.readSetBegin()
            for _i1943 in range(_size1939):
              _elem1944 = TObject()
              _elem1944.read(iprot)
              _val1938.append(_elem1944)
            iprot.readSetEnd()
            self.success[_key1937] = _val1938
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chronologizeKeyRecordStart_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter1945,viter1946 in list(self.success.items()):
        oprot.writeI64(kiter1945)
        oprot.writeSetBegin(TType.STRUCT, len(viter1946))
        for iter1947 in viter1946:
          iter1947.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chronologizeKeyRecordStartstr_args:
  """
  Attributes:
   - key
   - record
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'start', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, start=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chronologizeKeyRecordStartstr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 3)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chronologizeKeyRecordStartstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1949, _vtype1950, _size1948 ) = iprot.readMapBegin()
          for _i1952 in range(_size1948):
            _key1953 = iprot.readI64();
            _val1954 = []
            (_etype1958, _size1955) = iprot.readSetBegin()
            for _i1959 in range(_size1955):
              _elem1960 = TObject()
              _elem1960.read(iprot)
              _val1954.append(_elem1960)
            iprot.readSetEnd()
            self.success[_key1953] = _val1954
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chronologizeKeyRecordStartstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter1961,viter1962 in list(self.success.items()):
        oprot.writeI64(kiter1961)
        oprot.writeSetBegin(TType.STRUCT, len(viter1962))
        for iter1963 in viter1962:
          iter1963.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chronologizeKeyRecordStartEnd_args:
  """
  Attributes:
   - key
   - record
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'start', None, None, ), # 3
    (4, TType.I64, 'tend', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, record=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.tend = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chronologizeKeyRecordStartEnd_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 3)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.I64, 4)
      oprot.writeI64(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chronologizeKeyRecordStartEnd_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1965, _vtype1966, _size1964 ) = iprot.readMapBegin()
          for _i1968 in range(_size1964):
            _key1969 = iprot.readI64();
            _val1970 = []
            (_etype1974, _size1971) = iprot.readSetBegin()
            for _i1975 in range(_size1971):
              _elem1976 = TObject()
              _elem1976.read(iprot)
              _val1970.append(_elem1976)
            iprot.readSetEnd()
            self.success[_key1969] = _val1970
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chronologizeKeyRecordStartEnd_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter1977,viter1978 in list(self.success.items()):
        oprot.writeI64(kiter1977)
        oprot.writeSetBegin(TType.STRUCT, len(viter1978))
        for iter1979 in viter1978:
          iter1979.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chronologizeKeyRecordStartstrEndstr_args:
  """
  Attributes:
   - key
   - record
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'start', None, None, ), # 3
    (4, TType.STRING, 'tend', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, record=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.tend = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chronologizeKeyRecordStartstrEndstr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 3)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.STRING, 4)
      oprot.writeString(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chronologizeKeyRecordStartstrEndstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1981, _vtype1982, _size1980 ) = iprot.readMapBegin()
          for _i1984 in range(_size1980):
            _key1985 = iprot.readI64();
            _val1986 = []
            (_etype1990, _size1987) = iprot.readSetBegin()
            for _i1991 in range(_size1987):
              _elem1992 = TObject()
              _elem1992.read(iprot)
              _val1986.append(_elem1992)
            iprot.readSetEnd()
            self.success[_key1985] = _val1986
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chronologizeKeyRecordStartstrEndstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.SET, len(self.success))
      for kiter1993,viter1994 in list(self.success.items()):
        oprot.writeI64(kiter1993)
        oprot.writeSetBegin(TType.STRUCT, len(viter1994))
        for iter1995 in viter1994:
          iter1995.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffRecordStart_args:
  """
  Attributes:
   - record
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.I64, 'start', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, record=None, start=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffRecordStart_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 2)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffRecordStart_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.I32,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1997, _vtype1998, _size1996 ) = iprot.readMapBegin()
          for _i2000 in range(_size1996):
            _key2001 = iprot.readString();
            _val2002 = {}
            (_ktype2004, _vtype2005, _size2003 ) = iprot.readMapBegin()
            for _i2007 in range(_size2003):
              _key2008 = iprot.readI32();
              _val2009 = []
              (_etype2013, _size2010) = iprot.readSetBegin()
              for _i2014 in range(_size2010):
                _elem2015 = TObject()
                _elem2015.read(iprot)
                _val2009.append(_elem2015)
              iprot.readSetEnd()
              _val2002[_key2008] = _val2009
            iprot.readMapEnd()
            self.success[_key2001] = _val2002
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffRecordStart_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter2016,viter2017 in list(self.success.items()):
        oprot.writeString(kiter2016)
        oprot.writeMapBegin(TType.I32, TType.SET, len(viter2017))
        for kiter2018,viter2019 in list(viter2017.items()):
          oprot.writeI32(kiter2018)
          oprot.writeSetBegin(TType.STRUCT, len(viter2019))
          for iter2020 in viter2019:
            iter2020.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffRecordStartstr_args:
  """
  Attributes:
   - record
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRING, 'start', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, record=None, start=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffRecordStartstr_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 2)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffRecordStartstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.I32,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2022, _vtype2023, _size2021 ) = iprot.readMapBegin()
          for _i2025 in range(_size2021):
            _key2026 = iprot.readString();
            _val2027 = {}
            (_ktype2029, _vtype2030, _size2028 ) = iprot.readMapBegin()
            for _i2032 in range(_size2028):
              _key2033 = iprot.readI32();
              _val2034 = []
              (_etype2038, _size2035) = iprot.readSetBegin()
              for _i2039 in range(_size2035):
                _elem2040 = TObject()
                _elem2040.read(iprot)
                _val2034.append(_elem2040)
              iprot.readSetEnd()
              _val2027[_key2033] = _val2034
            iprot.readMapEnd()
            self.success[_key2026] = _val2027
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffRecordStartstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter2041,viter2042 in list(self.success.items()):
        oprot.writeString(kiter2041)
        oprot.writeMapBegin(TType.I32, TType.SET, len(viter2042))
        for kiter2043,viter2044 in list(viter2042.items()):
          oprot.writeI32(kiter2043)
          oprot.writeSetBegin(TType.STRUCT, len(viter2044))
          for iter2045 in viter2044:
            iter2045.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffRecordStartEnd_args:
  """
  Attributes:
   - record
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.I64, 'start', None, None, ), # 2
    (3, TType.I64, 'tend', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, record=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tend = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffRecordStartEnd_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 2)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.I64, 3)
      oprot.writeI64(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffRecordStartEnd_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.I32,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2047, _vtype2048, _size2046 ) = iprot.readMapBegin()
          for _i2050 in range(_size2046):
            _key2051 = iprot.readString();
            _val2052 = {}
            (_ktype2054, _vtype2055, _size2053 ) = iprot.readMapBegin()
            for _i2057 in range(_size2053):
              _key2058 = iprot.readI32();
              _val2059 = []
              (_etype2063, _size2060) = iprot.readSetBegin()
              for _i2064 in range(_size2060):
                _elem2065 = TObject()
                _elem2065.read(iprot)
                _val2059.append(_elem2065)
              iprot.readSetEnd()
              _val2052[_key2058] = _val2059
            iprot.readMapEnd()
            self.success[_key2051] = _val2052
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffRecordStartEnd_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter2066,viter2067 in list(self.success.items()):
        oprot.writeString(kiter2066)
        oprot.writeMapBegin(TType.I32, TType.SET, len(viter2067))
        for kiter2068,viter2069 in list(viter2067.items()):
          oprot.writeI32(kiter2068)
          oprot.writeSetBegin(TType.STRUCT, len(viter2069))
          for iter2070 in viter2069:
            iter2070.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffRecordStartstrEndstr_args:
  """
  Attributes:
   - record
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRING, 'start', None, None, ), # 2
    (3, TType.STRING, 'tend', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, record=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.tend = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffRecordStartstrEndstr_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 2)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.STRING, 3)
      oprot.writeString(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffRecordStartstrEndstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.I32,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec)))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2072, _vtype2073, _size2071 ) = iprot.readMapBegin()
          for _i2075 in range(_size2071):
            _key2076 = iprot.readString();
            _val2077 = {}
            (_ktype2079, _vtype2080, _size2078 ) = iprot.readMapBegin()
            for _i2082 in range(_size2078):
              _key2083 = iprot.readI32();
              _val2084 = []
              (_etype2088, _size2085) = iprot.readSetBegin()
              for _i2089 in range(_size2085):
                _elem2090 = TObject()
                _elem2090.read(iprot)
                _val2084.append(_elem2090)
              iprot.readSetEnd()
              _val2077[_key2083] = _val2084
            iprot.readMapEnd()
            self.success[_key2076] = _val2077
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffRecordStartstrEndstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter2091,viter2092 in list(self.success.items()):
        oprot.writeString(kiter2091)
        oprot.writeMapBegin(TType.I32, TType.SET, len(viter2092))
        for kiter2093,viter2094 in list(viter2092.items()):
          oprot.writeI32(kiter2093)
          oprot.writeSetBegin(TType.STRUCT, len(viter2094))
          for iter2095 in viter2094:
            iter2095.write(oprot)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyRecordStart_args:
  """
  Attributes:
   - key
   - record
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'start', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, start=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyRecordStart_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 3)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyRecordStart_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2097, _vtype2098, _size2096 ) = iprot.readMapBegin()
          for _i2100 in range(_size2096):
            _key2101 = iprot.readI32();
            _val2102 = []
            (_etype2106, _size2103) = iprot.readSetBegin()
            for _i2107 in range(_size2103):
              _elem2108 = TObject()
              _elem2108.read(iprot)
              _val2102.append(_elem2108)
            iprot.readSetEnd()
            self.success[_key2101] = _val2102
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyRecordStart_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.SET, len(self.success))
      for kiter2109,viter2110 in list(self.success.items()):
        oprot.writeI32(kiter2109)
        oprot.writeSetBegin(TType.STRUCT, len(viter2110))
        for iter2111 in viter2110:
          iter2111.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyRecordStartstr_args:
  """
  Attributes:
   - key
   - record
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'start', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, start=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyRecordStartstr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 3)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyRecordStartstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2113, _vtype2114, _size2112 ) = iprot.readMapBegin()
          for _i2116 in range(_size2112):
            _key2117 = iprot.readI32();
            _val2118 = []
            (_etype2122, _size2119) = iprot.readSetBegin()
            for _i2123 in range(_size2119):
              _elem2124 = TObject()
              _elem2124.read(iprot)
              _val2118.append(_elem2124)
            iprot.readSetEnd()
            self.success[_key2117] = _val2118
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyRecordStartstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.SET, len(self.success))
      for kiter2125,viter2126 in list(self.success.items()):
        oprot.writeI32(kiter2125)
        oprot.writeSetBegin(TType.STRUCT, len(viter2126))
        for iter2127 in viter2126:
          iter2127.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyRecordStartEnd_args:
  """
  Attributes:
   - key
   - record
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'start', None, None, ), # 3
    (4, TType.I64, 'tend', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, record=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.tend = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyRecordStartEnd_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 3)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.I64, 4)
      oprot.writeI64(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyRecordStartEnd_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2129, _vtype2130, _size2128 ) = iprot.readMapBegin()
          for _i2132 in range(_size2128):
            _key2133 = iprot.readI32();
            _val2134 = []
            (_etype2138, _size2135) = iprot.readSetBegin()
            for _i2139 in range(_size2135):
              _elem2140 = TObject()
              _elem2140.read(iprot)
              _val2134.append(_elem2140)
            iprot.readSetEnd()
            self.success[_key2133] = _val2134
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyRecordStartEnd_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.SET, len(self.success))
      for kiter2141,viter2142 in list(self.success.items()):
        oprot.writeI32(kiter2141)
        oprot.writeSetBegin(TType.STRUCT, len(viter2142))
        for iter2143 in viter2142:
          iter2143.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyRecordStartstrEndstr_args:
  """
  Attributes:
   - key
   - record
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'start', None, None, ), # 3
    (4, TType.STRING, 'tend', None, None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, record=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.tend = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyRecordStartstrEndstr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 3)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.STRING, 4)
      oprot.writeString(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyRecordStartstrEndstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.SET,(TType.STRUCT,(TObject, TObject.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2145, _vtype2146, _size2144 ) = iprot.readMapBegin()
          for _i2148 in range(_size2144):
            _key2149 = iprot.readI32();
            _val2150 = []
            (_etype2154, _size2151) = iprot.readSetBegin()
            for _i2155 in range(_size2151):
              _elem2156 = TObject()
              _elem2156.read(iprot)
              _val2150.append(_elem2156)
            iprot.readSetEnd()
            self.success[_key2149] = _val2150
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyRecordStartstrEndstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.SET, len(self.success))
      for kiter2157,viter2158 in list(self.success.items()):
        oprot.writeI32(kiter2157)
        oprot.writeSetBegin(TType.STRUCT, len(viter2158))
        for iter2159 in viter2158:
          iter2159.write(oprot)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyStart_args:
  """
  Attributes:
   - key
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'start', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, start=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyStart_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 2)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyStart_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRUCT,(TObject, TObject.thrift_spec),TType.MAP,(TType.I32,None,TType.SET,(TType.I64,None))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2161, _vtype2162, _size2160 ) = iprot.readMapBegin()
          for _i2164 in range(_size2160):
            _key2165 = TObject()
            _key2165.read(iprot)
            _val2166 = {}
            (_ktype2168, _vtype2169, _size2167 ) = iprot.readMapBegin()
            for _i2171 in range(_size2167):
              _key2172 = iprot.readI32();
              _val2173 = []
              (_etype2177, _size2174) = iprot.readSetBegin()
              for _i2178 in range(_size2174):
                _elem2179 = iprot.readI64();
                _val2173.append(_elem2179)
              iprot.readSetEnd()
              _val2166[_key2172] = _val2173
            iprot.readMapEnd()
            self.success[_key2165] = _val2166
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyStart_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRUCT, TType.MAP, len(self.success))
      for kiter2180,viter2181 in list(self.success.items()):
        kiter2180.write(oprot)
        oprot.writeMapBegin(TType.I32, TType.SET, len(viter2181))
        for kiter2182,viter2183 in list(viter2181.items()):
          oprot.writeI32(kiter2182)
          oprot.writeSetBegin(TType.I64, len(viter2183))
          for iter2184 in viter2183:
            oprot.writeI64(iter2184)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyStartstr_args:
  """
  Attributes:
   - key
   - start
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'start', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, start=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.start = start
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyStartstr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 2)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyStartstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRUCT,(TObject, TObject.thrift_spec),TType.MAP,(TType.I32,None,TType.SET,(TType.I64,None))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2186, _vtype2187, _size2185 ) = iprot.readMapBegin()
          for _i2189 in range(_size2185):
            _key2190 = TObject()
            _key2190.read(iprot)
            _val2191 = {}
            (_ktype2193, _vtype2194, _size2192 ) = iprot.readMapBegin()
            for _i2196 in range(_size2192):
              _key2197 = iprot.readI32();
              _val2198 = []
              (_etype2202, _size2199) = iprot.readSetBegin()
              for _i2203 in range(_size2199):
                _elem2204 = iprot.readI64();
                _val2198.append(_elem2204)
              iprot.readSetEnd()
              _val2191[_key2197] = _val2198
            iprot.readMapEnd()
            self.success[_key2190] = _val2191
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyStartstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRUCT, TType.MAP, len(self.success))
      for kiter2205,viter2206 in list(self.success.items()):
        kiter2205.write(oprot)
        oprot.writeMapBegin(TType.I32, TType.SET, len(viter2206))
        for kiter2207,viter2208 in list(viter2206.items()):
          oprot.writeI32(kiter2207)
          oprot.writeSetBegin(TType.I64, len(viter2208))
          for iter2209 in viter2208:
            oprot.writeI64(iter2209)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyStartEnd_args:
  """
  Attributes:
   - key
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'start', None, None, ), # 2
    (3, TType.I64, 'tend', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.start = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tend = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyStartEnd_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I64, 2)
      oprot.writeI64(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.I64, 3)
      oprot.writeI64(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyStartEnd_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRUCT,(TObject, TObject.thrift_spec),TType.MAP,(TType.I32,None,TType.SET,(TType.I64,None))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2211, _vtype2212, _size2210 ) = iprot.readMapBegin()
          for _i2214 in range(_size2210):
            _key2215 = TObject()
            _key2215.read(iprot)
            _val2216 = {}
            (_ktype2218, _vtype2219, _size2217 ) = iprot.readMapBegin()
            for _i2221 in range(_size2217):
              _key2222 = iprot.readI32();
              _val2223 = []
              (_etype2227, _size2224) = iprot.readSetBegin()
              for _i2228 in range(_size2224):
                _elem2229 = iprot.readI64();
                _val2223.append(_elem2229)
              iprot.readSetEnd()
              _val2216[_key2222] = _val2223
            iprot.readMapEnd()
            self.success[_key2215] = _val2216
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyStartEnd_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRUCT, TType.MAP, len(self.success))
      for kiter2230,viter2231 in list(self.success.items()):
        kiter2230.write(oprot)
        oprot.writeMapBegin(TType.I32, TType.SET, len(viter2231))
        for kiter2232,viter2233 in list(viter2231.items()):
          oprot.writeI32(kiter2232)
          oprot.writeSetBegin(TType.I64, len(viter2233))
          for iter2234 in viter2233:
            oprot.writeI64(iter2234)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyStartstrEndstr_args:
  """
  Attributes:
   - key
   - start
   - tend
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'start', None, None, ), # 2
    (3, TType.STRING, 'tend', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, start=None, tend=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.start = start
    self.tend = tend
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.tend = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyStartstrEndstr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRING, 2)
      oprot.writeString(self.start)
      oprot.writeFieldEnd()
    if self.tend is not None:
      oprot.writeFieldBegin('tend', TType.STRING, 3)
      oprot.writeString(self.tend)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.start)
    value = (value * 31) ^ hash(self.tend)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class diffKeyStartstrEndstr_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRUCT,(TObject, TObject.thrift_spec),TType.MAP,(TType.I32,None,TType.SET,(TType.I64,None))), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2236, _vtype2237, _size2235 ) = iprot.readMapBegin()
          for _i2239 in range(_size2235):
            _key2240 = TObject()
            _key2240.read(iprot)
            _val2241 = {}
            (_ktype2243, _vtype2244, _size2242 ) = iprot.readMapBegin()
            for _i2246 in range(_size2242):
              _key2247 = iprot.readI32();
              _val2248 = []
              (_etype2252, _size2249) = iprot.readSetBegin()
              for _i2253 in range(_size2249):
                _elem2254 = iprot.readI64();
                _val2248.append(_elem2254)
              iprot.readSetEnd()
              _val2241[_key2247] = _val2248
            iprot.readMapEnd()
            self.success[_key2240] = _val2241
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('diffKeyStartstrEndstr_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRUCT, TType.MAP, len(self.success))
      for kiter2255,viter2256 in list(self.success.items()):
        kiter2255.write(oprot)
        oprot.writeMapBegin(TType.I32, TType.SET, len(viter2256))
        for kiter2257,viter2258 in list(viter2256.items()):
          oprot.writeI32(kiter2257)
          oprot.writeSetBegin(TType.I64, len(viter2258))
          for iter2259 in viter2258:
            oprot.writeI64(iter2259)
          oprot.writeSetEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeysRecordsTime_args:
  """
  Attributes:
   - keys
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype2263, _size2260) = iprot.readListBegin()
          for _i2264 in range(_size2260):
            _elem2265 = iprot.readString();
            self.keys.append(_elem2265)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype2269, _size2266) = iprot.readListBegin()
          for _i2270 in range(_size2266):
            _elem2271 = iprot.readI64();
            self.records.append(_elem2271)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeysRecordsTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter2272 in self.keys:
        oprot.writeString(iter2272)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter2273 in self.records:
        oprot.writeI64(iter2273)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeysRecordsTime_result:
  """
  Attributes:
   - ex
   - ex2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, ex=None, ex2=None,):
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeysRecordsTime_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeysRecordsTimestr_args:
  """
  Attributes:
   - keys
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype2277, _size2274) = iprot.readListBegin()
          for _i2278 in range(_size2274):
            _elem2279 = iprot.readString();
            self.keys.append(_elem2279)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype2283, _size2280) = iprot.readListBegin()
          for _i2284 in range(_size2280):
            _elem2285 = iprot.readI64();
            self.records.append(_elem2285)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeysRecordsTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter2286 in self.keys:
        oprot.writeString(iter2286)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter2287 in self.records:
        oprot.writeI64(iter2287)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeysRecordsTimestr_result:
  """
  Attributes:
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, ex=None, ex2=None, ex3=None,):
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeysRecordsTimestr_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeysRecordTime_args:
  """
  Attributes:
   - keys
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype2291, _size2288) = iprot.readListBegin()
          for _i2292 in range(_size2288):
            _elem2293 = iprot.readString();
            self.keys.append(_elem2293)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeysRecordTime_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter2294 in self.keys:
        oprot.writeString(iter2294)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeysRecordTime_result:
  """
  Attributes:
   - ex
   - ex2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, ex=None, ex2=None,):
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeysRecordTime_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeysRecordTimestr_args:
  """
  Attributes:
   - keys
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, keys=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.keys = keys
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype2298, _size2295) = iprot.readListBegin()
          for _i2299 in range(_size2295):
            _elem2300 = iprot.readString();
            self.keys.append(_elem2300)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeysRecordTimestr_args')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter2301 in self.keys:
        oprot.writeString(iter2301)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeysRecordTimestr_result:
  """
  Attributes:
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, ex=None, ex2=None, ex3=None,):
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeysRecordTimestr_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeyRecordsTime_args:
  """
  Attributes:
   - key
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype2305, _size2302) = iprot.readListBegin()
          for _i2306 in range(_size2302):
            _elem2307 = iprot.readI64();
            self.records.append(_elem2307)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeyRecordsTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter2308 in self.records:
        oprot.writeI64(iter2308)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeyRecordsTime_result:
  """
  Attributes:
   - ex
   - ex2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, ex=None, ex2=None,):
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeyRecordsTime_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeyRecordsTimestr_args:
  """
  Attributes:
   - key
   - records
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, records=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.records = records
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype2312, _size2309) = iprot.readListBegin()
          for _i2313 in range(_size2309):
            _elem2314 = iprot.readI64();
            self.records.append(_elem2314)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeyRecordsTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter2315 in self.records:
        oprot.writeI64(iter2315)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeyRecordsTimestr_result:
  """
  Attributes:
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, ex=None, ex2=None, ex3=None,):
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeyRecordsTimestr_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeyRecordTime_args:
  """
  Attributes:
   - key
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.I64, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeyRecordTime_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 3)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeyRecordTime_result:
  """
  Attributes:
   - ex
   - ex2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, ex=None, ex2=None,):
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeyRecordTime_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeyRecordTimestr_args:
  """
  Attributes:
   - key
   - record
   - timestamp
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.I64, 'record', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, record=None, timestamp=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.record = record
    self.timestamp = timestamp
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeyRecordTimestr_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 2)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class revertKeyRecordTimestr_result:
  """
  Attributes:
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, ex=None, ex2=None, ex3=None,):
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('revertKeyRecordTimestr_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pingRecords_args:
  """
  Attributes:
   - records
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'records', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, records=None, creds=None, transaction=None, environment=None,):
    self.records = records
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.records = []
          (_etype2319, _size2316) = iprot.readListBegin()
          for _i2320 in range(_size2316):
            _elem2321 = iprot.readI64();
            self.records.append(_elem2321)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pingRecords_args')
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.records))
      for iter2322 in self.records:
        oprot.writeI64(iter2322)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.records)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pingRecords_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.BOOL,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype2324, _vtype2325, _size2323 ) = iprot.readMapBegin()
          for _i2327 in range(_size2323):
            _key2328 = iprot.readI64();
            _val2329 = iprot.readBool();
            self.success[_key2328] = _val2329
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pingRecords_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.BOOL, len(self.success))
      for kiter2330,viter2331 in list(self.success.items()):
        oprot.writeI64(kiter2330)
        oprot.writeBool(viter2331)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pingRecord_args:
  """
  Attributes:
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'record', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, record=None, creds=None, transaction=None, environment=None,):
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pingRecord_args')
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 1)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pingRecord_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pingRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyAndSwap_args:
  """
  Attributes:
   - key
   - expected
   - record
   - replacement
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'expected', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.I64, 'record', None, None, ), # 3
    (4, TType.STRUCT, 'replacement', (TObject, TObject.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 6
    (7, TType.STRING, 'environment', None, None, ), # 7
  )

  def __init__(self, key=None, expected=None, record=None, replacement=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.expected = expected
    self.record = record
    self.replacement = replacement
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.expected = TObject()
          self.expected.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.replacement = TObject()
          self.replacement.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyAndSwap_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.expected is not None:
      oprot.writeFieldBegin('expected', TType.STRUCT, 2)
      self.expected.write(oprot)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 3)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.replacement is not None:
      oprot.writeFieldBegin('replacement', TType.STRUCT, 4)
      self.replacement.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 5)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 6)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 7)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.expected)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.replacement)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyAndSwap_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyAndSwap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyOrSet_args:
  """
  Attributes:
   - key
   - value
   - record
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.I64, 'record', None, None, ), # 3
    (4, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 5
    (6, TType.STRING, 'environment', None, None, ), # 6
  )

  def __init__(self, key=None, value=None, record=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.record = record
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.record = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyOrSet_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.record is not None:
      oprot.writeFieldBegin('record', TType.I64, 3)
      oprot.writeI64(self.record)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 4)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 6)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.record)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyOrSet_result:
  """
  Attributes:
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, ex=None, ex2=None, ex3=None,):
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyOrSet_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findOrAddKeyValue_args:
  """
  Attributes:
   - key
   - value
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'value', (TObject, TObject.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, key=None, value=None, creds=None, transaction=None, environment=None,):
    self.key = key
    self.value = value
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = TObject()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findOrAddKeyValue_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findOrAddKeyValue_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
   - ex4
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (DuplicateEntryException, DuplicateEntryException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ex4', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None, ex4=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3
    self.ex4 = ex4

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = DuplicateEntryException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ex4 = InvalidArgumentException()
          self.ex4.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findOrAddKeyValue_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    if self.ex4 is not None:
      oprot.writeFieldBegin('ex4', TType.STRUCT, 4)
      self.ex4.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    value = (value * 31) ^ hash(self.ex4)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findOrInsertCriteriaJson_args:
  """
  Attributes:
   - criteria
   - json
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'criteria', (TCriteria, TCriteria.thrift_spec), None, ), # 1
    (2, TType.STRING, 'json', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, criteria=None, json=None, creds=None, transaction=None, environment=None,):
    self.criteria = criteria
    self.json = json
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.criteria = TCriteria()
          self.criteria.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findOrInsertCriteriaJson_args')
    if self.criteria is not None:
      oprot.writeFieldBegin('criteria', TType.STRUCT, 1)
      self.criteria.write(oprot)
      oprot.writeFieldEnd()
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 2)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.criteria)
    value = (value * 31) ^ hash(self.json)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findOrInsertCriteriaJson_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (DuplicateEntryException, DuplicateEntryException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = DuplicateEntryException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findOrInsertCriteriaJson_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findOrInsertCclJson_args:
  """
  Attributes:
   - ccl
   - json
   - creds
   - transaction
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ccl', None, None, ), # 1
    (2, TType.STRING, 'json', None, None, ), # 2
    (3, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'transaction', (TransactionToken, TransactionToken.thrift_spec), None, ), # 4
    (5, TType.STRING, 'environment', None, None, ), # 5
  )

  def __init__(self, ccl=None, json=None, creds=None, transaction=None, environment=None,):
    self.ccl = ccl
    self.json = json
    self.creds = creds
    self.transaction = transaction
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ccl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.transaction = TransactionToken()
          self.transaction.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findOrInsertCclJson_args')
    if self.ccl is not None:
      oprot.writeFieldBegin('ccl', TType.STRING, 1)
      oprot.writeString(self.ccl)
      oprot.writeFieldEnd()
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 2)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 3)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.transaction is not None:
      oprot.writeFieldBegin('transaction', TType.STRUCT, 4)
      self.transaction.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 5)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ccl)
    value = (value * 31) ^ hash(self.json)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.transaction)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findOrInsertCclJson_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
   - ex4
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ex4', (DuplicateEntryException, DuplicateEntryException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None, ex4=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3
    self.ex4 = ex4

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ex4 = DuplicateEntryException()
          self.ex4.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findOrInsertCclJson_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    if self.ex4 is not None:
      oprot.writeFieldBegin('ex4', TType.STRUCT, 4)
      self.ex4.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    value = (value * 31) ^ hash(self.ex4)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getServerEnvironment_args:
  """
  Attributes:
   - creds
   - token
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'token', (TransactionToken, TransactionToken.thrift_spec), None, ), # 2
    (3, TType.STRING, 'environment', None, None, ), # 3
  )

  def __init__(self, creds=None, token=None, environment=None,):
    self.creds = creds
    self.token = token
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.token = TransactionToken()
          self.token.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getServerEnvironment_args')
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 1)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRUCT, 2)
      self.token.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 3)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getServerEnvironment_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getServerEnvironment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getServerVersion_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getServerVersion_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getServerVersion_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getServerVersion_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class time_args:
  """
  Attributes:
   - creds
   - token
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'token', (TransactionToken, TransactionToken.thrift_spec), None, ), # 2
    (3, TType.STRING, 'environment', None, None, ), # 3
  )

  def __init__(self, creds=None, token=None, environment=None,):
    self.creds = creds
    self.token = token
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.token = TransactionToken()
          self.token.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('time_args')
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 1)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRUCT, 2)
      self.token.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 3)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class time_result:
  """
  Attributes:
   - success
   - ex
   - ex2
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex=None, ex2=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('time_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class timePhrase_args:
  """
  Attributes:
   - phrase
   - creds
   - token
   - environment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'phrase', None, None, ), # 1
    (2, TType.STRUCT, 'creds', (AccessToken, AccessToken.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'token', (TransactionToken, TransactionToken.thrift_spec), None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
  )

  def __init__(self, phrase=None, creds=None, token=None, environment=None,):
    self.phrase = phrase
    self.creds = creds
    self.token = token
    self.environment = environment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.phrase = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.creds = AccessToken()
          self.creds.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.token = TransactionToken()
          self.token.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('timePhrase_args')
    if self.phrase is not None:
      oprot.writeFieldBegin('phrase', TType.STRING, 1)
      oprot.writeString(self.phrase)
      oprot.writeFieldEnd()
    if self.creds is not None:
      oprot.writeFieldBegin('creds', TType.STRUCT, 2)
      self.creds.write(oprot)
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRUCT, 3)
      self.token.write(oprot)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.phrase)
    value = (value * 31) ^ hash(self.creds)
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.environment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class timePhrase_result:
  """
  Attributes:
   - success
   - ex
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (SecurityException, SecurityException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (TransactionException, TransactionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (ParseException, ParseException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex=None, ex2=None, ex3=None,):
    self.success = success
    self.ex = ex
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = SecurityException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = TransactionException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = ParseException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('timePhrase_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

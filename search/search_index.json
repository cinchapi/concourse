{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Concourse Guide # Welcome to the Concourse Guide! Concourse is an open source , distributed database warehouse for transactions, search and analytics across time. This Guide covers key concepts in Concourse, explains the API through examples and provides advice for operations and administration. For more information about new features in the latest release please see the Concourse Release Notes . Getting Started # Community # Getting help # Visit the Cinchapi Support Center at [https://support.cinchapi.com] to view knowledge base articles or file support requests. Licensing # Concourse is released under the Apache License, Version 2.0. For more information see the LICENSE and NOTICE files included in the Concourse repository. Additional Resources #","title":"Home"},{"location":"#the-concourse-guide","text":"Welcome to the Concourse Guide! Concourse is an open source , distributed database warehouse for transactions, search and analytics across time. This Guide covers key concepts in Concourse, explains the API through examples and provides advice for operations and administration. For more information about new features in the latest release please see the Concourse Release Notes .","title":"The Concourse Guide"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#community","text":"","title":"Community"},{"location":"#getting-help","text":"Visit the Cinchapi Support Center at [https://support.cinchapi.com] to view knowledge base articles or file support requests.","title":"Getting help"},{"location":"#licensing","text":"Concourse is released under the Apache License, Version 2.0. For more information see the LICENSE and NOTICE files included in the Concourse repository.","title":"Licensing"},{"location":"#additional-resources","text":"","title":"Additional Resources"},{"location":"administration/","text":"Concourse Administration # Debugging # Debug data files # Retrieve a JVM heap dump # Retrieve a JVM thread dump # Ad-hoc debugging with JMX # Environments # Plugins # Users #","title":"Administration"},{"location":"administration/#concourse-administration","text":"","title":"Concourse Administration"},{"location":"administration/#debugging","text":"","title":"Debugging"},{"location":"administration/#debug-data-files","text":"","title":"Debug data files"},{"location":"administration/#retrieve-a-jvm-heap-dump","text":"","title":"Retrieve a JVM heap dump"},{"location":"administration/#retrieve-a-jvm-thread-dump","text":"","title":"Retrieve a JVM thread dump"},{"location":"administration/#ad-hoc-debugging-with-jmx","text":"","title":"Ad-hoc debugging with JMX"},{"location":"administration/#environments","text":"","title":"Environments"},{"location":"administration/#plugins","text":"","title":"Plugins"},{"location":"administration/#users","text":"","title":"Users"},{"location":"aggregations/","text":"Aggregations and Calculations in Concourse # Coming Soon A feature to perform aggregations and calculations in Concourse will be released in version 0.6 .","title":"Aggregations"},{"location":"aggregations/#aggregations-and-calculations-in-concourse","text":"Coming Soon A feature to perform aggregations and calculations in Concourse will be released in version 0.6 .","title":"Aggregations and Calculations in Concourse"},{"location":"configuration/","text":"","title":"Configuration"},{"location":"data-types/","text":"Data Types # Concourse is a dynamically typed database which means that value types are intelligently inferred and comparisons can be made across value types. Values in Concourse can be Primitive Types # Boolean # Double # Float # Integer # Link # A Link is a pointer to another record. Links are used model relationship graphs within Concourse. Links can be created using the link(key, destination, source) method. Links can be queried using the LINKS_TO operator. Long # String # Tag # A Tag is a String that is not indexed for full-text search. Tags are only used to instruct Concourse that a String shouldn\u2019t be indexed for search. Therefore, once a Tag is processed, it is stored and treated as a String for all intents and purposes. This means that Tag values will be read as Strings when fetched. Additionally, when querying, Concourse treats any Tag values within the query as a String. Timestamp # A Timestamp is a a 64-bit integer that represents the number of microseconds since the Unix epoch (January 1, 1970 00:00:00 UTC). Timestamps are signed, so negative values represents dates prior to the epoch. Timestamps have a representable date range of about 290,000 years into the past and future. Advanced Types # Dynamic Link # Resolvable Link # A resolvable link is an instruction to create a link to all the records that match a criteria. Unlike dynamic links, a resolvable link is only evaluated once, at the time of write, so the linked records won\u2019t automatically change as the criteria\u2019s results do. Do not add resolvable links directly You cannot use the add methods to write resolvable links because the operation would not be atomic. You should only use resolvable links when writing data within a larger blob of information (e.g. a Map or JSON string being written using the insert method). In this case, you can add a resolvable link to the blob using the Link.toWhere(criteria) method.","title":"Data Types"},{"location":"data-types/#data-types","text":"Concourse is a dynamically typed database which means that value types are intelligently inferred and comparisons can be made across value types. Values in Concourse can be","title":"Data Types"},{"location":"data-types/#primitive-types","text":"","title":"Primitive Types"},{"location":"data-types/#boolean","text":"","title":"Boolean"},{"location":"data-types/#double","text":"","title":"Double"},{"location":"data-types/#float","text":"","title":"Float"},{"location":"data-types/#integer","text":"","title":"Integer"},{"location":"data-types/#link","text":"A Link is a pointer to another record. Links are used model relationship graphs within Concourse. Links can be created using the link(key, destination, source) method. Links can be queried using the LINKS_TO operator.","title":"Link"},{"location":"data-types/#long","text":"","title":"Long"},{"location":"data-types/#string","text":"","title":"String"},{"location":"data-types/#tag","text":"A Tag is a String that is not indexed for full-text search. Tags are only used to instruct Concourse that a String shouldn\u2019t be indexed for search. Therefore, once a Tag is processed, it is stored and treated as a String for all intents and purposes. This means that Tag values will be read as Strings when fetched. Additionally, when querying, Concourse treats any Tag values within the query as a String.","title":"Tag"},{"location":"data-types/#timestamp","text":"A Timestamp is a a 64-bit integer that represents the number of microseconds since the Unix epoch (January 1, 1970 00:00:00 UTC). Timestamps are signed, so negative values represents dates prior to the epoch. Timestamps have a representable date range of about 290,000 years into the past and future.","title":"Timestamp"},{"location":"data-types/#advanced-types","text":"","title":"Advanced Types"},{"location":"data-types/#dynamic-link","text":"","title":"Dynamic Link"},{"location":"data-types/#resolvable-link","text":"A resolvable link is an instruction to create a link to all the records that match a criteria. Unlike dynamic links, a resolvable link is only evaluated once, at the time of write, so the linked records won\u2019t automatically change as the criteria\u2019s results do. Do not add resolvable links directly You cannot use the add methods to write resolvable links because the operation would not be atomic. You should only use resolvable links when writing data within a larger blob of information (e.g. a Map or JSON string being written using the insert method). In this case, you can add a resolvable link to the blob using the Link.toWhere(criteria) method.","title":"Resolvable Link"},{"location":"distributed/","text":"Distributed Concourse # Coming Soon A feature to form a distributed cluster with multiple Concourse nodes will be released in version 0.6 .","title":"Distributed"},{"location":"distributed/#distributed-concourse","text":"Coming Soon A feature to form a distributed cluster with multiple Concourse nodes will be released in version 0.6 .","title":"Distributed Concourse"},{"location":"glossary/","text":"Glossary # Captain # Cluster # A group of Concourse nodes amongst which data is partitioned and replicated , but together form a single logical database. Cohort # Coordinator # The node to which a client connects to perform an operation. The coordinator is responsible for routing the request to the appropriate node(s) within the cluster and returning the result to the client. In Concourse, coordinators are chosen per operation and any node may serve as a coordinator. Ensemble Protocol # Gossip Protocol # Key # Leader # Node # A Concourse instance that is a member of distributed cluster . Optimistic Availability # A property of distributed systems that allows tolerance for arbitrary node failure while preserving availability for an operation as long as the coordinator and at least one relevant process agree on the state of the system. In laymen\u2019s terms: given sufficient partitioning and replication there is optimism that the system remains available in the face of failure or latency. Partition # A subset of nodes in a distributed cluster that each only contain data certain token ranges. Data is partitioned within Concourse to better distributed load across the cluster. Record # A schemaless group of fields mapping keys to values . A single record should map to a single person, place or thing in the real world. Replica # A node Schemaless # A Concourse feature that allows users to store data without first specifying the data format or data types with the database, and 2. allows records within the database to contain different formats and data types. Strong Consistency # A property of distributed systems where all processes observe state changes in the same order. According to the CAP Theorem , distributed database are strongly consistent if every read receives the most recent write or an error, in the event that the most recent write cannot be determined because of network failure or latency. Three-Phase Commit # Token # Value #","title":"Glossary"},{"location":"glossary/#glossary","text":"","title":"Glossary"},{"location":"glossary/#captain","text":"","title":"Captain"},{"location":"glossary/#cluster","text":"A group of Concourse nodes amongst which data is partitioned and replicated , but together form a single logical database.","title":"Cluster"},{"location":"glossary/#cohort","text":"","title":"Cohort"},{"location":"glossary/#coordinator","text":"The node to which a client connects to perform an operation. The coordinator is responsible for routing the request to the appropriate node(s) within the cluster and returning the result to the client. In Concourse, coordinators are chosen per operation and any node may serve as a coordinator.","title":"Coordinator"},{"location":"glossary/#ensemble-protocol","text":"","title":"Ensemble Protocol"},{"location":"glossary/#gossip-protocol","text":"","title":"Gossip Protocol"},{"location":"glossary/#key","text":"","title":"Key"},{"location":"glossary/#leader","text":"","title":"Leader"},{"location":"glossary/#node","text":"A Concourse instance that is a member of distributed cluster .","title":"Node"},{"location":"glossary/#optimistic-availability","text":"A property of distributed systems that allows tolerance for arbitrary node failure while preserving availability for an operation as long as the coordinator and at least one relevant process agree on the state of the system. In laymen\u2019s terms: given sufficient partitioning and replication there is optimism that the system remains available in the face of failure or latency.","title":"Optimistic Availability"},{"location":"glossary/#partition","text":"A subset of nodes in a distributed cluster that each only contain data certain token ranges. Data is partitioned within Concourse to better distributed load across the cluster.","title":"Partition"},{"location":"glossary/#record","text":"A schemaless group of fields mapping keys to values . A single record should map to a single person, place or thing in the real world.","title":"Record"},{"location":"glossary/#replica","text":"A node","title":"Replica"},{"location":"glossary/#schemaless","text":"A Concourse feature that allows users to store data without first specifying the data format or data types with the database, and 2. allows records within the database to contain different formats and data types.","title":"Schemaless"},{"location":"glossary/#strong-consistency","text":"A property of distributed systems where all processes observe state changes in the same order. According to the CAP Theorem , distributed database are strongly consistent if every read receives the most recent write or an error, in the event that the most recent write cannot be determined because of network failure or latency.","title":"Strong Consistency"},{"location":"glossary/#three-phase-commit","text":"","title":"Three-Phase Commit"},{"location":"glossary/#token","text":"","title":"Token"},{"location":"glossary/#value","text":"","title":"Value"},{"location":"graph/","text":"Graph Operations # Linking Records # Link Queries # Link Navigation #","title":"Graph"},{"location":"graph/#graph-operations","text":"","title":"Graph Operations"},{"location":"graph/#linking-records","text":"","title":"Linking Records"},{"location":"graph/#link-queries","text":"","title":"Link Queries"},{"location":"graph/#link-navigation","text":"","title":"Link Navigation"},{"location":"imports/","text":"Importing Data # Resolution #","title":"Imports"},{"location":"imports/#importing-data","text":"","title":"Importing Data"},{"location":"imports/#resolution","text":"","title":"Resolution"},{"location":"installation/","text":"Install Concourse # System Requirements JRE or JDK 1.8+ At least 256MB of available system memory Linux or macOS Binary Install # Download the installer. From the terminal, navigate to the location where you want to install Concourse and download the installer for the latest version: 1 curl - o concourse - server . bin - L http : // concoursedb . com / download / latest Run the installer. Execute the downloaded .bin file. You\u2019ll be prompted to enter an administrator password so the installer can add the Concourse scripts and log files to your $PATH. This is recommended but not required. If you don\u2019t want this level of system integration, simply press CTRL+C at the prompt. 1 sh concourse-server.bin Start Concourse. Concourse ships with reasonable default configuration so you can use it right out-the-box! If necessary, you can configure how Concourse runs by editing the conf/concourse.yaml configuration file located in Concourse\u2019s home directory . 1 concourse start Docker # You can also quickly get started with Concourse using one of our provided Docker images . Starting concourse with a persistent/shared data directory # 1 docker run -p 1717 :1717 -v </path/to/local/data>:/data --name concourse cinchapi/concourse NOTE: The above command will run Concourse in the foreground. To run in the background, add a -d flag immediately after the docker run command. Modifying the configuration # You can add or modifiy any configuration that would normally go in the conf/concourse.yaml file using environment variables that are passed to the docker container. Simply UPPERCASE the preference key and prepend it with CONCOURSE_ . For example, you can modify the heap_size preference by passing an environment variable named CONCOURSE_HEAP_SIZE to the docker container. 1 docker run -p 1717 :1717 -e CONCOURSE_HEAP_SIZE = <HEAP_SIZE> -v </path/to/local/data>:/data --name concourse cinchapi/concourse Using concourse shell # You can spin up an ad-hoc docker container running concourse shell to connect to the dockerized Concourse instance. 1 docker run -it --rm --link concourse:concourse cinchapi/concourse shell --host concourse --password admin Running client-side CLIs # Similar to concourse shell any client-side CLIs (e.g. those that can be run from a remote machine) can be dockerized using an ad-hoc container that is linked to the dockerized Concourse instance. For example, you can perform an interactive import that reads input from the command line: 1 docker run -it --rm --link concourse:concourse cinchapi/concourse import --host concourse --password admin And, you can similary import a file from the host machine to the dockerized Concourse instance: 1 xargs -I % docker run -i --rm --link concourse:concourse --mount type = bind,source = %,target = /data/% cinchapi/concourse import --host concourse --password admin -d /data/% <<< /absolute/path/to/file Running server-side CLIs # You can run server-side CLIs (e.g. those that must be run from the same machine as Concourse) by leveraging the docker exec functionality on the container running Concourse. 1 docker exec -it concourse concourse <command> <args> For example, you can call the concourse users sessions command: 1 docker exec -it concourse concourse users sessions --password admin","title":"Installation"},{"location":"installation/#install-concourse","text":"System Requirements JRE or JDK 1.8+ At least 256MB of available system memory Linux or macOS","title":"Install Concourse"},{"location":"installation/#binary-install","text":"Download the installer. From the terminal, navigate to the location where you want to install Concourse and download the installer for the latest version: 1 curl - o concourse - server . bin - L http : // concoursedb . com / download / latest Run the installer. Execute the downloaded .bin file. You\u2019ll be prompted to enter an administrator password so the installer can add the Concourse scripts and log files to your $PATH. This is recommended but not required. If you don\u2019t want this level of system integration, simply press CTRL+C at the prompt. 1 sh concourse-server.bin Start Concourse. Concourse ships with reasonable default configuration so you can use it right out-the-box! If necessary, you can configure how Concourse runs by editing the conf/concourse.yaml configuration file located in Concourse\u2019s home directory . 1 concourse start","title":"Binary Install"},{"location":"installation/#docker","text":"You can also quickly get started with Concourse using one of our provided Docker images .","title":"Docker"},{"location":"installation/#starting-concourse-with-a-persistentshared-data-directory","text":"1 docker run -p 1717 :1717 -v </path/to/local/data>:/data --name concourse cinchapi/concourse NOTE: The above command will run Concourse in the foreground. To run in the background, add a -d flag immediately after the docker run command.","title":"Starting concourse with a persistent/shared data directory"},{"location":"installation/#modifying-the-configuration","text":"You can add or modifiy any configuration that would normally go in the conf/concourse.yaml file using environment variables that are passed to the docker container. Simply UPPERCASE the preference key and prepend it with CONCOURSE_ . For example, you can modify the heap_size preference by passing an environment variable named CONCOURSE_HEAP_SIZE to the docker container. 1 docker run -p 1717 :1717 -e CONCOURSE_HEAP_SIZE = <HEAP_SIZE> -v </path/to/local/data>:/data --name concourse cinchapi/concourse","title":"Modifying the configuration"},{"location":"installation/#using-concourse-shell","text":"You can spin up an ad-hoc docker container running concourse shell to connect to the dockerized Concourse instance. 1 docker run -it --rm --link concourse:concourse cinchapi/concourse shell --host concourse --password admin","title":"Using concourse shell"},{"location":"installation/#running-client-side-clis","text":"Similar to concourse shell any client-side CLIs (e.g. those that can be run from a remote machine) can be dockerized using an ad-hoc container that is linked to the dockerized Concourse instance. For example, you can perform an interactive import that reads input from the command line: 1 docker run -it --rm --link concourse:concourse cinchapi/concourse import --host concourse --password admin And, you can similary import a file from the host machine to the dockerized Concourse instance: 1 xargs -I % docker run -i --rm --link concourse:concourse --mount type = bind,source = %,target = /data/% cinchapi/concourse import --host concourse --password admin -d /data/% <<< /absolute/path/to/file","title":"Running client-side CLIs"},{"location":"installation/#running-server-side-clis","text":"You can run server-side CLIs (e.g. those that must be run from the same machine as Concourse) by leveraging the docker exec functionality on the container running Concourse. 1 docker exec -it concourse concourse <command> <args> For example, you can call the concourse users sessions command: 1 docker exec -it concourse concourse users sessions --password admin","title":"Running server-side CLIs"},{"location":"internals/","text":"","title":"Internals"},{"location":"introduction/","text":"Introduction to Concourse # Concourse is an open source self-tuning database warehouse that provides strong consistency , decentralized coordination and optimistic availability . Concourse takes the best ideas from SQL and NoSQL databases to provide an intuitive and scalable platform for both transaction and analytic workflows. Document-Graph Database # Concourse is a document-graph database. A record in Concourse is a schemaless document, composed of a unique id and one or more fields. Each field is labeled with a key and may contain one or more distinct primitive values . Additionally, fields may contain links to other records, which facilitates modeling a rich graph of descriptive relationships. Concourse records are similar to linked JSON objects: The document-graph data model is ideal for development: Intuitively mirrors the way that developers think about data. Makes few assumptions and adapts to application changes without translation (goodbye object-relational impedance mismatch ). Models complex relationships with referential integrity while avoiding hacks. Automatic Indexing # Concourse automatically indexes data for search and analytics while guaranteeing constant time writes that are incredibly fast. This eliminates the need to plan queries in advance because Concourse fully supports ad-hoc, range, and predicate queries and caches frequently requested data for optimal performance. Version Control # Concourse automatically tracks changes to data\u2013like Git does for source code\u2013giving the power to query data from the past , audit changes on the fly and revert to previous states without downtime. Version control in Concourse makes it easy to build applications that leverage definitive data across time. ACID Transactions # Concourse uses a novel protocol to provide serializable distributed transactions . Internally, dynamic resource allocation and just-in-time locking ensure that transactions have both the highest performance and strongest consistency possible. So there is no need to guess when your data will eventually become consistent. When Concourse responds to a query, you can trust the results immediately . By default, each change is autocommited and written to the database immediately. However, you can explicitly start a transaction to control when a group of changes are atomically committed or aborted using the stage functionality. Start a transaction within concourse shell : 1 [ default/cash ] $ stage Use a transaction to atomically transfer $50 from one account to another in Java : 1 2 3 4 5 6 7 8 9 10 11 concourse . stage (); try { int balance1 = concourse . get ( \"balance\" , 1 ); int balance2 = concourse . get ( \"balance\" , 2 ); concourse . set ( \"balance\" , balance1 + 50 , 1 ); concourse . set ( \"balance\" , balance2 - 50 , 2 ); concourse . commit (); } catch ( TransactionException e ) { concourse . abort (); } The same example above using Java 8+ lambdas : 1 2 3 4 5 6 concourse . stage (() -> { int balance1 = concourse . get ( \"balance\" , 1 ); int balance2 = concourse . get ( \"balance\" , 2 ); concourse . set ( \"balance\" , balance1 + 50 , 1 ); concourse . set ( \"balance\" , balance2 - 50 , 2 ); }); Plugins # Concourse can be extended by plugins. Environments # Concourse separates records into environments , which are similar to databases , keyspaces , or schemas in a other database systems. Beyond that, Concourse doesn\u2019t impose any other organization such as tables or collections. You can specify the desired environment when connecting to Concourse. If no environment is specified, the default_environment defined in the concourse.prefs configuration file is used. Connect to the production environment using concourse shell : 1 concourse shell -e production Connect to the production environment using the Java Driver : 1 Concourse concourse = Concourse . connect ( \"production\" ); Warning It is not possible to interact with data in multiple environments simultaneously. Create an Environment # If an environment does not exist, Concourse creates it when you first store data within the environment. As such, you can connect to a non-existent environment and perform standard operations. For a list of restrictions on environment names, see Naming Restrictions .","title":"Introduction"},{"location":"introduction/#introduction-to-concourse","text":"Concourse is an open source self-tuning database warehouse that provides strong consistency , decentralized coordination and optimistic availability . Concourse takes the best ideas from SQL and NoSQL databases to provide an intuitive and scalable platform for both transaction and analytic workflows.","title":"Introduction to Concourse"},{"location":"introduction/#document-graph-database","text":"Concourse is a document-graph database. A record in Concourse is a schemaless document, composed of a unique id and one or more fields. Each field is labeled with a key and may contain one or more distinct primitive values . Additionally, fields may contain links to other records, which facilitates modeling a rich graph of descriptive relationships. Concourse records are similar to linked JSON objects: The document-graph data model is ideal for development: Intuitively mirrors the way that developers think about data. Makes few assumptions and adapts to application changes without translation (goodbye object-relational impedance mismatch ). Models complex relationships with referential integrity while avoiding hacks.","title":"Document-Graph Database"},{"location":"introduction/#automatic-indexing","text":"Concourse automatically indexes data for search and analytics while guaranteeing constant time writes that are incredibly fast. This eliminates the need to plan queries in advance because Concourse fully supports ad-hoc, range, and predicate queries and caches frequently requested data for optimal performance.","title":"Automatic Indexing"},{"location":"introduction/#version-control","text":"Concourse automatically tracks changes to data\u2013like Git does for source code\u2013giving the power to query data from the past , audit changes on the fly and revert to previous states without downtime. Version control in Concourse makes it easy to build applications that leverage definitive data across time.","title":"Version Control"},{"location":"introduction/#acid-transactions","text":"Concourse uses a novel protocol to provide serializable distributed transactions . Internally, dynamic resource allocation and just-in-time locking ensure that transactions have both the highest performance and strongest consistency possible. So there is no need to guess when your data will eventually become consistent. When Concourse responds to a query, you can trust the results immediately . By default, each change is autocommited and written to the database immediately. However, you can explicitly start a transaction to control when a group of changes are atomically committed or aborted using the stage functionality. Start a transaction within concourse shell : 1 [ default/cash ] $ stage Use a transaction to atomically transfer $50 from one account to another in Java : 1 2 3 4 5 6 7 8 9 10 11 concourse . stage (); try { int balance1 = concourse . get ( \"balance\" , 1 ); int balance2 = concourse . get ( \"balance\" , 2 ); concourse . set ( \"balance\" , balance1 + 50 , 1 ); concourse . set ( \"balance\" , balance2 - 50 , 2 ); concourse . commit (); } catch ( TransactionException e ) { concourse . abort (); } The same example above using Java 8+ lambdas : 1 2 3 4 5 6 concourse . stage (() -> { int balance1 = concourse . get ( \"balance\" , 1 ); int balance2 = concourse . get ( \"balance\" , 2 ); concourse . set ( \"balance\" , balance1 + 50 , 1 ); concourse . set ( \"balance\" , balance2 - 50 , 2 ); });","title":"ACID Transactions"},{"location":"introduction/#plugins","text":"Concourse can be extended by plugins.","title":"Plugins"},{"location":"introduction/#environments","text":"Concourse separates records into environments , which are similar to databases , keyspaces , or schemas in a other database systems. Beyond that, Concourse doesn\u2019t impose any other organization such as tables or collections. You can specify the desired environment when connecting to Concourse. If no environment is specified, the default_environment defined in the concourse.prefs configuration file is used. Connect to the production environment using concourse shell : 1 concourse shell -e production Connect to the production environment using the Java Driver : 1 Concourse concourse = Concourse . connect ( \"production\" ); Warning It is not possible to interact with data in multiple environments simultaneously.","title":"Environments"},{"location":"introduction/#create-an-environment","text":"If an environment does not exist, Concourse creates it when you first store data within the environment. As such, you can connect to a non-existent environment and perform standard operations. For a list of restrictions on environment names, see Naming Restrictions .","title":"Create an Environment"},{"location":"queries/","text":"Queries # Concourse Criteria Language (CCL) # Criteria Builder #","title":"Queries"},{"location":"queries/#queries","text":"","title":"Queries"},{"location":"queries/#concourse-criteria-language-ccl","text":"","title":"Concourse Criteria Language (CCL)"},{"location":"queries/#criteria-builder","text":"","title":"Criteria Builder"},{"location":"reads/","text":"Reading Data # Selecting all values # Getting the most recent value # Browsing values across a key #","title":"Reads"},{"location":"reads/#reading-data","text":"","title":"Reading Data"},{"location":"reads/#selecting-all-values","text":"","title":"Selecting all values"},{"location":"reads/#getting-the-most-recent-value","text":"","title":"Getting the most recent value"},{"location":"reads/#browsing-values-across-a-key","text":"","title":"Browsing values across a key"},{"location":"search/","text":"Search #","title":"Search"},{"location":"search/#search","text":"","title":"Search"},{"location":"shell/","text":"Concourse Shell # The concourse shell is a built-in interface to interact with Concourse. The concourse shell is backed by the full power of the Groovy scripting language, so you can use it to dynamically query and update data. Most examples in the Concourse Guide use concourse shell . Most client drivers also provide a similar interface to Concourse. Starting concourse shell # Warning Make sure that Concourse is running before attempting to start concourse shell . To start concourse shell and connect to the Concourse instance running on localhost with the default port into the default environment : At a prompt in a terminal window: 1 concourse shell Changing connection parameters # You can connect to a different environment or a Concourse instance running on a different server and/or a different port by specifying any combination of the the following command line options: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Usage : concourse - shell [ options ] Options : - e , -- environment The environment of the Concourse Server to use Default : < empty string > - h , -- host The hostname where the Concourse Server is located Default : localhost - p , -- port The port on which the Concourse Server is listening Default : 1717 - u , -- username The username with which to connect Default : admin Working with the concourse shell # Ad hoc commands # Run Commands File # You can use a run commands file to seed the shell with a script that is run before the prompt is displayed for the first time. By default, concourse shell checks the user\u2019s HOME directory for a groovy file named .cashrc . Alternatively, you can specify a different run-commands file by starting concourse shell using the --run-commands or -rc option: 1 concourse shell --run-commands /path/to/run-commands-file Usage # Using a run commands file allows you to automatically seed each concourse shell session with common configuration. NOTE : The script can access all the standard variables and methods defined in the shell\u2019s environment. Startup Commands # Custom Functions # You can define custom functions in the run commands file using standard groovy syntax. Custom functions are added to the shell\u2019s namespace so they can be invoked by the interpreter; however they are not run on startup. For example, create a function to display all the keys across all records in Concourse: 1 2 3 4 5 6 7 8 9 10 def showKeys () { allkeys = describe ( inventory ()). values () result = [] allkeys . each { keys -> keys . each { key -> result << key } } result . toSet () } Launch concourse shell and invoke the function: 1 2 [ default/cash ] $ showKeys () Returned '[manager, name, follows, age, friends]' in 0 .086 sec Custom Variables # Interacting with Concourse #","title":"Shell"},{"location":"shell/#concourse-shell","text":"The concourse shell is a built-in interface to interact with Concourse. The concourse shell is backed by the full power of the Groovy scripting language, so you can use it to dynamically query and update data. Most examples in the Concourse Guide use concourse shell . Most client drivers also provide a similar interface to Concourse.","title":"Concourse Shell"},{"location":"shell/#starting-concourse-shell","text":"Warning Make sure that Concourse is running before attempting to start concourse shell . To start concourse shell and connect to the Concourse instance running on localhost with the default port into the default environment : At a prompt in a terminal window: 1 concourse shell","title":"Starting concourse shell"},{"location":"shell/#changing-connection-parameters","text":"You can connect to a different environment or a Concourse instance running on a different server and/or a different port by specifying any combination of the the following command line options: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Usage : concourse - shell [ options ] Options : - e , -- environment The environment of the Concourse Server to use Default : < empty string > - h , -- host The hostname where the Concourse Server is located Default : localhost - p , -- port The port on which the Concourse Server is listening Default : 1717 - u , -- username The username with which to connect Default : admin","title":"Changing connection parameters"},{"location":"shell/#working-with-the-concourse-shell","text":"","title":"Working with the concourse shell"},{"location":"shell/#ad-hoc-commands","text":"","title":"Ad hoc commands"},{"location":"shell/#run-commands-file","text":"You can use a run commands file to seed the shell with a script that is run before the prompt is displayed for the first time. By default, concourse shell checks the user\u2019s HOME directory for a groovy file named .cashrc . Alternatively, you can specify a different run-commands file by starting concourse shell using the --run-commands or -rc option: 1 concourse shell --run-commands /path/to/run-commands-file","title":"Run Commands File"},{"location":"shell/#usage","text":"Using a run commands file allows you to automatically seed each concourse shell session with common configuration. NOTE : The script can access all the standard variables and methods defined in the shell\u2019s environment.","title":"Usage"},{"location":"shell/#startup-commands","text":"","title":"Startup Commands"},{"location":"shell/#custom-functions","text":"You can define custom functions in the run commands file using standard groovy syntax. Custom functions are added to the shell\u2019s namespace so they can be invoked by the interpreter; however they are not run on startup. For example, create a function to display all the keys across all records in Concourse: 1 2 3 4 5 6 7 8 9 10 def showKeys () { allkeys = describe ( inventory ()). values () result = [] allkeys . each { keys -> keys . each { key -> result << key } } result . toSet () } Launch concourse shell and invoke the function: 1 2 [ default/cash ] $ showKeys () Returned '[manager, name, follows, age, friends]' in 0 .086 sec","title":"Custom Functions"},{"location":"shell/#custom-variables","text":"","title":"Custom Variables"},{"location":"shell/#interacting-with-concourse","text":"","title":"Interacting with Concourse"},{"location":"time-travel/","text":"Time Travel # Read operations in Concourse support temporality in two ways: temporal queries and temporal reads . Temporal Queries # A temporal query evaluates its selection criteria based on the version of data at a previous timestamp. It is possible to perform a temporal query in conjunction with a present-state read. Temporal Reads # A temporal read retrieves the version of the data at a previous timestamp. It is possible to perform a temporal read in conjunction with a present-state query. Browse # Audit # Chronologize #","title":"Time Travel"},{"location":"time-travel/#time-travel","text":"Read operations in Concourse support temporality in two ways: temporal queries and temporal reads .","title":"Time Travel"},{"location":"time-travel/#temporal-queries","text":"A temporal query evaluates its selection criteria based on the version of data at a previous timestamp. It is possible to perform a temporal query in conjunction with a present-state read.","title":"Temporal Queries"},{"location":"time-travel/#temporal-reads","text":"A temporal read retrieves the version of the data at a previous timestamp. It is possible to perform a temporal read in conjunction with a present-state query.","title":"Temporal Reads"},{"location":"time-travel/#browse","text":"","title":"Browse"},{"location":"time-travel/#audit","text":"","title":"Audit"},{"location":"time-travel/#chronologize","text":"","title":"Chronologize"},{"location":"transactions/","text":"Transactions # Serializable Isolation # Just-in-Time Locking #","title":"Transactions"},{"location":"transactions/#transactions","text":"","title":"Transactions"},{"location":"transactions/#serializable-isolation","text":"","title":"Serializable Isolation"},{"location":"transactions/#just-in-time-locking","text":"","title":"Just-in-Time Locking"},{"location":"upgrade/","text":"Upgrade Concourse # Use the concourse upgrade command to check for and install a newer version.","title":"Upgrade"},{"location":"upgrade/#upgrade-concourse","text":"Use the concourse upgrade command to check for and install a newer version.","title":"Upgrade Concourse"},{"location":"writes/","text":"Writing Data # Create a new Record # A new record is created using the insert method. Data can be represented in the form of either a JSON formatted string, a java.util.Map<String, Set<Object>> or a com.google.common.collect.Multimap<String, Object> . 1 2 3 4 5 insert({ \"name\": \"Jeff Nelson\", \"company\": \"Cinchapi\", \"age\": 100, }) Adding values # Setting values # Clearing values # Atomic Writes # Simulating a unique index #","title":"Writes"},{"location":"writes/#writing-data","text":"","title":"Writing Data"},{"location":"writes/#create-a-new-record","text":"A new record is created using the insert method. Data can be represented in the form of either a JSON formatted string, a java.util.Map<String, Set<Object>> or a com.google.common.collect.Multimap<String, Object> . 1 2 3 4 5 insert({ \"name\": \"Jeff Nelson\", \"company\": \"Cinchapi\", \"age\": 100, })","title":"Create a new Record"},{"location":"writes/#adding-values","text":"","title":"Adding values"},{"location":"writes/#setting-values","text":"","title":"Setting values"},{"location":"writes/#clearing-values","text":"","title":"Clearing values"},{"location":"writes/#atomic-writes","text":"","title":"Atomic Writes"},{"location":"writes/#simulating-a-unique-index","text":"","title":"Simulating a unique index"},{"location":"plugins/","text":"Plugins # Concourse is extensible via plugins that enhance the database\u2019s core functionality. Each Concourse plugin runs alongside the database in a separate process, which maximizes safety and stability. Even though plugins are sandboxed, they have privileged access to the database through a well defined API over a secure communication channel. Next Steps # Learn more about using Concourse plugins. Learn more about developing Concourse plugins. Visit the Cinchapi marketplace to download Concourse plugins.","title":"Overview"},{"location":"plugins/#plugins","text":"Concourse is extensible via plugins that enhance the database\u2019s core functionality. Each Concourse plugin runs alongside the database in a separate process, which maximizes safety and stability. Even though plugins are sandboxed, they have privileged access to the database through a well defined API over a secure communication channel.","title":"Plugins"},{"location":"plugins/#next-steps","text":"Learn more about using Concourse plugins. Learn more about developing Concourse plugins. Visit the Cinchapi marketplace to download Concourse plugins.","title":"Next Steps"},{"location":"plugins/development/","text":"Developing Plugins # Getting Started # Concourse plugins must be implemented as Java classes that extend com.cinchapi.concourse.server.plugin.Plugin . To get started, create a Java project that depends on the concourse-plugin-core framework. Create a build.gradle file # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 plugins { id \"com.cinchapi.concourse-plugin\" version \"1.0.14\" id 'java' id 'eclipse' id 'maven' } group = 'com.cinchapi' version = getVersion () // Set the version for all Concourse dependencies ext . concourseVersion = '0.7.0' // Configure Concourse plugin bundle { bundleName project . name } task wrapper ( type: Wrapper ) { gradleVersion = '3.0' } repositories { mavenCentral () } dependencies { compile group: 'com.cinchapi' , name: 'concourse-plugin-core' , version: concourseVersion testCompile 'junit:junit:4.11' testCompile group: 'com.cinchapi' , name: 'concourse-ete-test-core' , version: concourseVersion } Download dependencies and generate IDE metadata # 1 ./gradlew clean eclipse Implement the plugin # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package com.company.concourse.plugin.sample ; import com.cinchapi.concourse.server.plugin.Plugin ; /** * Sample Plugin Boilerplate */ public class SamplePlugin extends Plugin { /** * Construct a new instance. * * @param fromServer * @param fromPlugin */ public Sample ( String fromServer , String fromPlugin ) { super ( fromServer , fromPlugin ); } } Any instance methods that are added to the plugin class will be dynamically added to the Concourse API. Create the plugin package # 1 ./gradlew bundleZip Check the build/distributions directory to see the generated .zip plugin package. Accessing Concourse within a Plugin # Concourse plugins have privileged access to the database using a special API. To interact with Concourse, use the runtime method inside the plugin class. 1 2 3 4 5 6 7 public void sampleWriteMethod ( String key , Object value ) { runtime . addKeyValue ( key , value ); } public Object sampleReadMethod ( String key ) { //TODO: fixme } If you need to access Concourse from a class that does not extend Plugin (i.e. a utility class) you can interact with the runtime by calling PluginRuntime.getRuntime() . Background Requests # Each Plugin has access to the host Concourse instance","title":"Developing Plugins"},{"location":"plugins/development/#developing-plugins","text":"","title":"Developing Plugins"},{"location":"plugins/development/#getting-started","text":"Concourse plugins must be implemented as Java classes that extend com.cinchapi.concourse.server.plugin.Plugin . To get started, create a Java project that depends on the concourse-plugin-core framework.","title":"Getting Started"},{"location":"plugins/development/#create-a-buildgradle-file","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 plugins { id \"com.cinchapi.concourse-plugin\" version \"1.0.14\" id 'java' id 'eclipse' id 'maven' } group = 'com.cinchapi' version = getVersion () // Set the version for all Concourse dependencies ext . concourseVersion = '0.7.0' // Configure Concourse plugin bundle { bundleName project . name } task wrapper ( type: Wrapper ) { gradleVersion = '3.0' } repositories { mavenCentral () } dependencies { compile group: 'com.cinchapi' , name: 'concourse-plugin-core' , version: concourseVersion testCompile 'junit:junit:4.11' testCompile group: 'com.cinchapi' , name: 'concourse-ete-test-core' , version: concourseVersion }","title":"Create a build.gradle file"},{"location":"plugins/development/#download-dependencies-and-generate-ide-metadata","text":"1 ./gradlew clean eclipse","title":"Download dependencies and generate IDE metadata"},{"location":"plugins/development/#implement-the-plugin","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package com.company.concourse.plugin.sample ; import com.cinchapi.concourse.server.plugin.Plugin ; /** * Sample Plugin Boilerplate */ public class SamplePlugin extends Plugin { /** * Construct a new instance. * * @param fromServer * @param fromPlugin */ public Sample ( String fromServer , String fromPlugin ) { super ( fromServer , fromPlugin ); } } Any instance methods that are added to the plugin class will be dynamically added to the Concourse API.","title":"Implement the plugin"},{"location":"plugins/development/#create-the-plugin-package","text":"1 ./gradlew bundleZip Check the build/distributions directory to see the generated .zip plugin package.","title":"Create the plugin package"},{"location":"plugins/development/#accessing-concourse-within-a-plugin","text":"Concourse plugins have privileged access to the database using a special API. To interact with Concourse, use the runtime method inside the plugin class. 1 2 3 4 5 6 7 public void sampleWriteMethod ( String key , Object value ) { runtime . addKeyValue ( key , value ); } public Object sampleReadMethod ( String key ) { //TODO: fixme } If you need to access Concourse from a class that does not extend Plugin (i.e. a utility class) you can interact with the runtime by calling PluginRuntime.getRuntime() .","title":"Accessing Concourse within a Plugin"},{"location":"plugins/development/#background-requests","text":"Each Plugin has access to the host Concourse instance","title":"Background Requests"},{"location":"plugins/usage/","text":"Using Plugins # Use the concourse plugins command to manage plugins. Installation # You can install plugins using a local plugin .zip package or by downloading from the the marketplace . Install a local plugin package # 1 concourse plugin install </path/to/plugin> Install a plugin from the marketplace # 1 concourse plugin install <plugin-name> Installing multiple plugins # Install all local plugin packages within a directory # If one of the arguments given to the concourse plugin install command is a directory, all the plugin packages in that directory will be installed. 1 concourse plugin install </path/to/directory> Install multiple local plugin packages # You can specify multiple local plugin packages as arguments to the concourse plugin install command. 1 concourse plugin install </path/to/plugin1> </path/to/plugin2> ... </path/to/plguinN> Install multiple plugins from the marketplace # You can specify multiple marketplace plugin names as arguments to the concourse plugin install command. 1 concourse plugin install <plugin-name1> <plugin-name2> Invoking plugin methods # Plugin methods are automatically added to the Concourse API and can be called from any driver using the invokePlugin method. 1 invokePlugin(pluginId, methodName, methodArgs...)","title":"Using Plugins"},{"location":"plugins/usage/#using-plugins","text":"Use the concourse plugins command to manage plugins.","title":"Using Plugins"},{"location":"plugins/usage/#installation","text":"You can install plugins using a local plugin .zip package or by downloading from the the marketplace .","title":"Installation"},{"location":"plugins/usage/#install-a-local-plugin-package","text":"1 concourse plugin install </path/to/plugin>","title":"Install a local plugin package"},{"location":"plugins/usage/#install-a-plugin-from-the-marketplace","text":"1 concourse plugin install <plugin-name>","title":"Install a plugin from the marketplace"},{"location":"plugins/usage/#installing-multiple-plugins","text":"","title":"Installing multiple plugins"},{"location":"plugins/usage/#install-all-local-plugin-packages-within-a-directory","text":"If one of the arguments given to the concourse plugin install command is a directory, all the plugin packages in that directory will be installed. 1 concourse plugin install </path/to/directory>","title":"Install all local plugin packages within a directory"},{"location":"plugins/usage/#install-multiple-local-plugin-packages","text":"You can specify multiple local plugin packages as arguments to the concourse plugin install command. 1 concourse plugin install </path/to/plugin1> </path/to/plugin2> ... </path/to/plguinN>","title":"Install multiple local plugin packages"},{"location":"plugins/usage/#install-multiple-plugins-from-the-marketplace","text":"You can specify multiple marketplace plugin names as arguments to the concourse plugin install command. 1 concourse plugin install <plugin-name1> <plugin-name2>","title":"Install multiple plugins from the marketplace"},{"location":"plugins/usage/#invoking-plugin-methods","text":"Plugin methods are automatically added to the Concourse API and can be called from any driver using the invokePlugin method. 1 invokePlugin(pluginId, methodName, methodArgs...)","title":"Invoking plugin methods"},{"location":"security/authentication/","text":"Authentication # Concourse uses a username and password combination to authenticate every user. For every request, Concourse requires the user\u2019s identity to be successfully verified. When connecting to Concourse via the a driver, the REST API or the shell, you must initially provide a username and password. Those credentials are transparently exchanged for an access token that is automatically used on subsequent requests to verify your identity. Access Tokens # Concourse issues access tokens in exchange for a valid username and password combination during a login request. The access tokens themselves contain no identifiable information about the users they represent but are associated with a user within a secure enclave of Concourse Server. Access Tokens are temporary and non-persistent. They automatically expire after 24 hours or when Concourse Server shutsdown, whichever is sooner. TODO: add note that some drivers will automatically renew tokens by keeping credentials client side","title":"Authentication"},{"location":"security/authentication/#authentication","text":"Concourse uses a username and password combination to authenticate every user. For every request, Concourse requires the user\u2019s identity to be successfully verified. When connecting to Concourse via the a driver, the REST API or the shell, you must initially provide a username and password. Those credentials are transparently exchanged for an access token that is automatically used on subsequent requests to verify your identity.","title":"Authentication"},{"location":"security/authentication/#access-tokens","text":"Concourse issues access tokens in exchange for a valid username and password combination during a login request. The access tokens themselves contain no identifiable information about the users they represent but are associated with a user within a secure enclave of Concourse Server. Access Tokens are temporary and non-persistent. They automatically expire after 24 hours or when Concourse Server shutsdown, whichever is sooner. TODO: add note that some drivers will automatically renew tokens by keeping credentials client side","title":"Access Tokens"}]}
//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;

const data_ttypes = require('./data_types');


const ttypes = module.exports = {};
ttypes.ComplexTObjectType = {
  'SCALAR' : 1,
  'MAP' : 2,
  'LIST' : 3,
  'SET' : 4,
  'TOBJECT' : 5,
  'TCRITERIA' : 6,
  'BINARY' : 7
};
const ComplexTObject = module.exports.ComplexTObject = class {
  constructor(args) {
    this.type = null;
    this.tscalar = null;
    this.tmap = null;
    this.tlist = null;
    this.tset = null;
    this.tobject = null;
    this.tcriteria = null;
    this.tbinary = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
      }
      if (args.tscalar !== undefined && args.tscalar !== null) {
        this.tscalar = new data_ttypes.TObject(args.tscalar);
      }
      if (args.tmap !== undefined && args.tmap !== null) {
        this.tmap = Thrift.copyMap(args.tmap, [null]);
      }
      if (args.tlist !== undefined && args.tlist !== null) {
        this.tlist = Thrift.copyList(args.tlist, [null]);
      }
      if (args.tset !== undefined && args.tset !== null) {
        this.tset = Thrift.copyList(args.tset, [null]);
      }
      if (args.tobject !== undefined && args.tobject !== null) {
        this.tobject = new data_ttypes.TObject(args.tobject);
      }
      if (args.tcriteria !== undefined && args.tcriteria !== null) {
        this.tcriteria = new data_ttypes.TCriteria(args.tcriteria);
      }
      if (args.tbinary !== undefined && args.tbinary !== null) {
        this.tbinary = args.tbinary;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.tscalar = new data_ttypes.TObject();
          this.tscalar.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.tmap = {};
          const _rtmp31 = input.readMapBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let key3 = null;
            let val4 = null;
            key3 = new ttypes.ComplexTObject();
            key3.read(input);
            val4 = new ttypes.ComplexTObject();
            val4.read(input);
            this.tmap[key3] = val4;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.tlist = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = new ttypes.ComplexTObject();
            elem8.read(input);
            this.tlist.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.SET) {
          this.tset = [];
          const _rtmp310 = input.readSetBegin();
          const _size9 = _rtmp310.size || 0;
          for (let _i11 = 0; _i11 < _size9; ++_i11) {
            let elem12 = null;
            elem12 = new ttypes.ComplexTObject();
            elem12.read(input);
            this.tset.push(elem12);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.tobject = new data_ttypes.TObject();
          this.tobject.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.tcriteria = new data_ttypes.TCriteria();
          this.tcriteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.tbinary = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ComplexTObject');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.tscalar !== null && this.tscalar !== undefined) {
      output.writeFieldBegin('tscalar', Thrift.Type.STRUCT, 2);
      this.tscalar.write(output);
      output.writeFieldEnd();
    }
    if (this.tmap !== null && this.tmap !== undefined) {
      output.writeFieldBegin('tmap', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, Thrift.objectLength(this.tmap));
      for (let kiter13 in this.tmap) {
        if (this.tmap.hasOwnProperty(kiter13)) {
          let viter14 = this.tmap[kiter13];
          kiter13.write(output);
          viter14.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.tlist !== null && this.tlist !== undefined) {
      output.writeFieldBegin('tlist', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.tlist.length);
      for (let iter15 in this.tlist) {
        if (this.tlist.hasOwnProperty(iter15)) {
          iter15 = this.tlist[iter15];
          iter15.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.tset !== null && this.tset !== undefined) {
      output.writeFieldBegin('tset', Thrift.Type.SET, 5);
      output.writeSetBegin(Thrift.Type.STRUCT, this.tset.length);
      for (let iter16 in this.tset) {
        if (this.tset.hasOwnProperty(iter16)) {
          iter16 = this.tset[iter16];
          iter16.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.tobject !== null && this.tobject !== undefined) {
      output.writeFieldBegin('tobject', Thrift.Type.STRUCT, 6);
      this.tobject.write(output);
      output.writeFieldEnd();
    }
    if (this.tcriteria !== null && this.tcriteria !== undefined) {
      output.writeFieldBegin('tcriteria', Thrift.Type.STRUCT, 7);
      this.tcriteria.write(output);
      output.writeFieldEnd();
    }
    if (this.tbinary !== null && this.tbinary !== undefined) {
      output.writeFieldBegin('tbinary', Thrift.Type.STRING, 8);
      output.writeBinary(this.tbinary);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};

//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;

const data_ttypes = require('./data_types');
const shared_ttypes = require('./shared_types');
const exceptions_ttypes = require('./exceptions_types');
const complex_ttypes = require('./complex_types');


const ttypes = require('./concourse_types');
//HELPER FUNCTIONS AND STRUCTURES

const ConcourseService_abort_args = class {
  constructor(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_abort_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_abort_result = class {
  constructor(args) {
    this.ex = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_addKeyValue_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_addKeyValue_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_addKeyValue_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_addKeyValueRecord_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_addKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_addKeyValueRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_addKeyValueRecords_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_addKeyValueRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter4 in this.records) {
        if (this.records.hasOwnProperty(iter4)) {
          iter4 = this.records[iter4];
          output.writeI64(iter4);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_addKeyValueRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp36 = input.readMapBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let key8 = null;
            let val9 = null;
            key8 = input.readI64();
            val9 = input.readBool();
            this.success.set(key8, val9);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_auditRecord_args = class {
  constructor(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_auditRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp313 = input.readMapBegin();
          const _size12 = _rtmp313.size || 0;
          for (let _i14 = 0; _i14 < _size12; ++_i14) {
            let key15 = null;
            let val16 = null;
            key15 = input.readI64();
            val16 = input.readString();
            this.success.set(key15, val16);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_auditRecordStart_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStart_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_auditRecordStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp320 = input.readMapBegin();
          const _size19 = _rtmp320.size || 0;
          for (let _i21 = 0; _i21 < _size19; ++_i21) {
            let key22 = null;
            let val23 = null;
            key22 = input.readI64();
            val23 = input.readString();
            this.success.set(key22, val23);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_auditRecordStartstr_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStartstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_auditRecordStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp327 = input.readMapBegin();
          const _size26 = _rtmp327.size || 0;
          for (let _i28 = 0; _i28 < _size26; ++_i28) {
            let key29 = null;
            let val30 = null;
            key29 = input.readI64();
            val30 = input.readString();
            this.success.set(key29, val30);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_auditRecordStartEnd_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStartEnd_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 3);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_auditRecordStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp334 = input.readMapBegin();
          const _size33 = _rtmp334.size || 0;
          for (let _i35 = 0; _i35 < _size33; ++_i35) {
            let key36 = null;
            let val37 = null;
            key36 = input.readI64();
            val37 = input.readString();
            this.success.set(key36, val37);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_auditRecordStartstrEndstr_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditRecordStartstrEndstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 3);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_auditRecordStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp341 = input.readMapBegin();
          const _size40 = _rtmp341.size || 0;
          for (let _i42 = 0; _i42 < _size40; ++_i42) {
            let key43 = null;
            let val44 = null;
            key43 = input.readI64();
            val44 = input.readString();
            this.success.set(key43, val44);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_auditKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_auditKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp348 = input.readMapBegin();
          const _size47 = _rtmp348.size || 0;
          for (let _i49 = 0; _i49 < _size47; ++_i49) {
            let key50 = null;
            let val51 = null;
            key50 = input.readI64();
            val51 = input.readString();
            this.success.set(key50, val51);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_auditKeyRecordStart_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_auditKeyRecordStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp355 = input.readMapBegin();
          const _size54 = _rtmp355.size || 0;
          for (let _i56 = 0; _i56 < _size54; ++_i56) {
            let key57 = null;
            let val58 = null;
            key57 = input.readI64();
            val58 = input.readString();
            this.success.set(key57, val58);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_auditKeyRecordStartstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_auditKeyRecordStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp362 = input.readMapBegin();
          const _size61 = _rtmp362.size || 0;
          for (let _i63 = 0; _i63 < _size61; ++_i63) {
            let key64 = null;
            let val65 = null;
            key64 = input.readI64();
            val65 = input.readString();
            this.success.set(key64, val65);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_auditKeyRecordStartEnd_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 4);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_auditKeyRecordStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp369 = input.readMapBegin();
          const _size68 = _rtmp369.size || 0;
          for (let _i70 = 0; _i70 < _size68; ++_i70) {
            let key71 = null;
            let val72 = null;
            key71 = input.readI64();
            val72 = input.readString();
            this.success.set(key71, val72);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_auditKeyRecordStartstrEndstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 4);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_auditKeyRecordStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp376 = input.readMapBegin();
          const _size75 = _rtmp376.size || 0;
          for (let _i77 = 0; _i77 < _size75; ++_i77) {
            let key78 = null;
            let val79 = null;
            key78 = input.readI64();
            val79 = input.readString();
            this.success.set(key78, val79);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_browseKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_browseKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp383 = input.readMapBegin();
          const _size82 = _rtmp383.size || 0;
          for (let _i84 = 0; _i84 < _size82; ++_i84) {
            let key85 = null;
            let val86 = null;
            key85 = new data_ttypes.TObject();
            key85.read(input);
            val86 = [];
            const _rtmp388 = input.readSetBegin();
            const _size87 = _rtmp388.size || 0;
            for (let _i89 = 0; _i89 < _size87; ++_i89) {
              let elem90 = null;
              elem90 = input.readI64();
              val86.push(elem90);
            }
            input.readSetEnd();
            this.success.set(key85, val86);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_browseKeys_args = class {
  constructor(args) {
    this.keys = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeys_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter98 in this.keys) {
        if (this.keys.hasOwnProperty(iter98)) {
          iter98 = this.keys[iter98];
          output.writeString(iter98);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_browseKeys_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3100 = input.readMapBegin();
          const _size99 = _rtmp3100.size || 0;
          for (let _i101 = 0; _i101 < _size99; ++_i101) {
            let key102 = null;
            let val103 = null;
            key102 = input.readString();
            val103 = new Map();
            const _rtmp3105 = input.readMapBegin();
            const _size104 = _rtmp3105.size || 0;
            for (let _i106 = 0; _i106 < _size104; ++_i106) {
              let key107 = null;
              let val108 = null;
              key107 = new data_ttypes.TObject();
              key107.read(input);
              val108 = [];
              const _rtmp3110 = input.readSetBegin();
              const _size109 = _rtmp3110.size || 0;
              for (let _i111 = 0; _i111 < _size109; ++_i111) {
                let elem112 = null;
                elem112 = input.readI64();
                val108.push(elem112);
              }
              input.readSetEnd();
              val103.set(key107, val108);
            }
            input.readMapEnd();
            this.success.set(key102, val103);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_browseKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_browseKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3119 = input.readMapBegin();
          const _size118 = _rtmp3119.size || 0;
          for (let _i120 = 0; _i120 < _size118; ++_i120) {
            let key121 = null;
            let val122 = null;
            key121 = new data_ttypes.TObject();
            key121.read(input);
            val122 = [];
            const _rtmp3124 = input.readSetBegin();
            const _size123 = _rtmp3124.size || 0;
            for (let _i125 = 0; _i125 < _size123; ++_i125) {
              let elem126 = null;
              elem126 = input.readI64();
              val122.push(elem126);
            }
            input.readSetEnd();
            this.success.set(key121, val122);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_browseKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_browseKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3131 = input.readMapBegin();
          const _size130 = _rtmp3131.size || 0;
          for (let _i132 = 0; _i132 < _size130; ++_i132) {
            let key133 = null;
            let val134 = null;
            key133 = new data_ttypes.TObject();
            key133.read(input);
            val134 = [];
            const _rtmp3136 = input.readSetBegin();
            const _size135 = _rtmp3136.size || 0;
            for (let _i137 = 0; _i137 < _size135; ++_i137) {
              let elem138 = null;
              elem138 = input.readI64();
              val134.push(elem138);
            }
            input.readSetEnd();
            this.success.set(key133, val134);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_browseKeysTime_args = class {
  constructor(args) {
    this.keys = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeysTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter146 in this.keys) {
        if (this.keys.hasOwnProperty(iter146)) {
          iter146 = this.keys[iter146];
          output.writeString(iter146);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_browseKeysTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3148 = input.readMapBegin();
          const _size147 = _rtmp3148.size || 0;
          for (let _i149 = 0; _i149 < _size147; ++_i149) {
            let key150 = null;
            let val151 = null;
            key150 = input.readString();
            val151 = new Map();
            const _rtmp3153 = input.readMapBegin();
            const _size152 = _rtmp3153.size || 0;
            for (let _i154 = 0; _i154 < _size152; ++_i154) {
              let key155 = null;
              let val156 = null;
              key155 = new data_ttypes.TObject();
              key155.read(input);
              val156 = [];
              const _rtmp3158 = input.readSetBegin();
              const _size157 = _rtmp3158.size || 0;
              for (let _i159 = 0; _i159 < _size157; ++_i159) {
                let elem160 = null;
                elem160 = input.readI64();
                val156.push(elem160);
              }
              input.readSetEnd();
              val151.set(key155, val156);
            }
            input.readMapEnd();
            this.success.set(key150, val151);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_browseKeysTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_browseKeysTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter170 in this.keys) {
        if (this.keys.hasOwnProperty(iter170)) {
          iter170 = this.keys[iter170];
          output.writeString(iter170);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_browseKeysTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3172 = input.readMapBegin();
          const _size171 = _rtmp3172.size || 0;
          for (let _i173 = 0; _i173 < _size171; ++_i173) {
            let key174 = null;
            let val175 = null;
            key174 = input.readString();
            val175 = new Map();
            const _rtmp3177 = input.readMapBegin();
            const _size176 = _rtmp3177.size || 0;
            for (let _i178 = 0; _i178 < _size176; ++_i178) {
              let key179 = null;
              let val180 = null;
              key179 = new data_ttypes.TObject();
              key179.read(input);
              val180 = [];
              const _rtmp3182 = input.readSetBegin();
              const _size181 = _rtmp3182.size || 0;
              for (let _i183 = 0; _i183 < _size181; ++_i183) {
                let elem184 = null;
                elem184 = input.readI64();
                val180.push(elem184);
              }
              input.readSetEnd();
              val175.set(key179, val180);
            }
            input.readMapEnd();
            this.success.set(key174, val175);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_chronologizeKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_chronologizeKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3191 = input.readMapBegin();
          const _size190 = _rtmp3191.size || 0;
          for (let _i192 = 0; _i192 < _size190; ++_i192) {
            let key193 = null;
            let val194 = null;
            key193 = input.readI64();
            val194 = [];
            const _rtmp3196 = input.readSetBegin();
            const _size195 = _rtmp3196.size || 0;
            for (let _i197 = 0; _i197 < _size195; ++_i197) {
              let elem198 = null;
              elem198 = new data_ttypes.TObject();
              elem198.read(input);
              val194.push(elem198);
            }
            input.readSetEnd();
            this.success.set(key193, val194);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_chronologizeKeyRecordStart_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_chronologizeKeyRecordStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3203 = input.readMapBegin();
          const _size202 = _rtmp3203.size || 0;
          for (let _i204 = 0; _i204 < _size202; ++_i204) {
            let key205 = null;
            let val206 = null;
            key205 = input.readI64();
            val206 = [];
            const _rtmp3208 = input.readSetBegin();
            const _size207 = _rtmp3208.size || 0;
            for (let _i209 = 0; _i209 < _size207; ++_i209) {
              let elem210 = null;
              elem210 = new data_ttypes.TObject();
              elem210.read(input);
              val206.push(elem210);
            }
            input.readSetEnd();
            this.success.set(key205, val206);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_chronologizeKeyRecordStartstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_chronologizeKeyRecordStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3215 = input.readMapBegin();
          const _size214 = _rtmp3215.size || 0;
          for (let _i216 = 0; _i216 < _size214; ++_i216) {
            let key217 = null;
            let val218 = null;
            key217 = input.readI64();
            val218 = [];
            const _rtmp3220 = input.readSetBegin();
            const _size219 = _rtmp3220.size || 0;
            for (let _i221 = 0; _i221 < _size219; ++_i221) {
              let elem222 = null;
              elem222 = new data_ttypes.TObject();
              elem222.read(input);
              val218.push(elem222);
            }
            input.readSetEnd();
            this.success.set(key217, val218);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_chronologizeKeyRecordStartEnd_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 4);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_chronologizeKeyRecordStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3227 = input.readMapBegin();
          const _size226 = _rtmp3227.size || 0;
          for (let _i228 = 0; _i228 < _size226; ++_i228) {
            let key229 = null;
            let val230 = null;
            key229 = input.readI64();
            val230 = [];
            const _rtmp3232 = input.readSetBegin();
            const _size231 = _rtmp3232.size || 0;
            for (let _i233 = 0; _i233 < _size231; ++_i233) {
              let elem234 = null;
              elem234 = new data_ttypes.TObject();
              elem234.read(input);
              val230.push(elem234);
            }
            input.readSetEnd();
            this.success.set(key229, val230);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_chronologizeKeyRecordStartstrEndstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 4);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_chronologizeKeyRecordStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3239 = input.readMapBegin();
          const _size238 = _rtmp3239.size || 0;
          for (let _i240 = 0; _i240 < _size238; ++_i240) {
            let key241 = null;
            let val242 = null;
            key241 = input.readI64();
            val242 = [];
            const _rtmp3244 = input.readSetBegin();
            const _size243 = _rtmp3244.size || 0;
            for (let _i245 = 0; _i245 < _size243; ++_i245) {
              let elem246 = null;
              elem246 = new data_ttypes.TObject();
              elem246.read(input);
              val242.push(elem246);
            }
            input.readSetEnd();
            this.success.set(key241, val242);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_clearRecord_args = class {
  constructor(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_clearRecord_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_clearRecords_args = class {
  constructor(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter254 in this.records) {
        if (this.records.hasOwnProperty(iter254)) {
          iter254 = this.records[iter254];
          output.writeI64(iter254);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_clearRecords_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_clearKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_clearKeyRecord_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_clearKeysRecord_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter259 in this.keys) {
        if (this.keys.hasOwnProperty(iter259)) {
          iter259 = this.keys[iter259];
          output.writeString(iter259);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_clearKeysRecord_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_clearKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter264 in this.records) {
        if (this.records.hasOwnProperty(iter264)) {
          iter264 = this.records[iter264];
          output.writeI64(iter264);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_clearKeyRecords_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_clearKeysRecords_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_clearKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter273 in this.keys) {
        if (this.keys.hasOwnProperty(iter273)) {
          iter273 = this.keys[iter273];
          output.writeString(iter273);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter274 in this.records) {
        if (this.records.hasOwnProperty(iter274)) {
          iter274 = this.records[iter274];
          output.writeI64(iter274);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_clearKeysRecords_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_commit_args = class {
  constructor(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_commit_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_commit_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_describe_args = class {
  constructor(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describe_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_describe_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3276 = input.readSetBegin();
          const _size275 = _rtmp3276.size || 0;
          for (let _i277 = 0; _i277 < _size275; ++_i277) {
            let elem278 = null;
            elem278 = input.readString();
            this.success.push(elem278);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_describeTime_args = class {
  constructor(args) {
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeTime_args');
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_describeTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3281 = input.readSetBegin();
          const _size280 = _rtmp3281.size || 0;
          for (let _i282 = 0; _i282 < _size280; ++_i282) {
            let elem283 = null;
            elem283 = input.readString();
            this.success.push(elem283);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_describeTimestr_args = class {
  constructor(args) {
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeTimestr_args');
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_describeTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3286 = input.readSetBegin();
          const _size285 = _rtmp3286.size || 0;
          for (let _i287 = 0; _i287 < _size285; ++_i287) {
            let elem288 = null;
            elem288 = input.readString();
            this.success.push(elem288);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_describeRecord_args = class {
  constructor(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_describeRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3291 = input.readSetBegin();
          const _size290 = _rtmp3291.size || 0;
          for (let _i292 = 0; _i292 < _size290; ++_i292) {
            let elem293 = null;
            elem293 = input.readString();
            this.success.push(elem293);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_describeRecordTime_args = class {
  constructor(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordTime_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_describeRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3296 = input.readSetBegin();
          const _size295 = _rtmp3296.size || 0;
          for (let _i297 = 0; _i297 < _size295; ++_i297) {
            let elem298 = null;
            elem298 = input.readString();
            this.success.push(elem298);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_describeRecordTimestr_args = class {
  constructor(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordTimestr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_describeRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3301 = input.readSetBegin();
          const _size300 = _rtmp3301.size || 0;
          for (let _i302 = 0; _i302 < _size300; ++_i302) {
            let elem303 = null;
            elem303 = input.readString();
            this.success.push(elem303);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_describeRecords_args = class {
  constructor(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter309 in this.records) {
        if (this.records.hasOwnProperty(iter309)) {
          iter309 = this.records[iter309];
          output.writeI64(iter309);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_describeRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3311 = input.readMapBegin();
          const _size310 = _rtmp3311.size || 0;
          for (let _i312 = 0; _i312 < _size310; ++_i312) {
            let key313 = null;
            let val314 = null;
            key313 = input.readI64();
            val314 = [];
            const _rtmp3316 = input.readSetBegin();
            const _size315 = _rtmp3316.size || 0;
            for (let _i317 = 0; _i317 < _size315; ++_i317) {
              let elem318 = null;
              elem318 = input.readString();
              val314.push(elem318);
            }
            input.readSetEnd();
            this.success.set(key313, val314);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_describeRecordsTime_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordsTime_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter326 in this.records) {
        if (this.records.hasOwnProperty(iter326)) {
          iter326 = this.records[iter326];
          output.writeI64(iter326);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_describeRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3328 = input.readMapBegin();
          const _size327 = _rtmp3328.size || 0;
          for (let _i329 = 0; _i329 < _size327; ++_i329) {
            let key330 = null;
            let val331 = null;
            key330 = input.readI64();
            val331 = [];
            const _rtmp3333 = input.readSetBegin();
            const _size332 = _rtmp3333.size || 0;
            for (let _i334 = 0; _i334 < _size332; ++_i334) {
              let elem335 = null;
              elem335 = input.readString();
              val331.push(elem335);
            }
            input.readSetEnd();
            this.success.set(key330, val331);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_describeRecordsTimestr_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_describeRecordsTimestr_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter343 in this.records) {
        if (this.records.hasOwnProperty(iter343)) {
          iter343 = this.records[iter343];
          output.writeI64(iter343);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_describeRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3345 = input.readMapBegin();
          const _size344 = _rtmp3345.size || 0;
          for (let _i346 = 0; _i346 < _size344; ++_i346) {
            let key347 = null;
            let val348 = null;
            key347 = input.readI64();
            val348 = [];
            const _rtmp3350 = input.readSetBegin();
            const _size349 = _rtmp3350.size || 0;
            for (let _i351 = 0; _i351 < _size349; ++_i351) {
              let elem352 = null;
              elem352 = input.readString();
              val348.push(elem352);
            }
            input.readSetEnd();
            this.success.set(key347, val348);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffRecordStart_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStart_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffRecordStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3357 = input.readMapBegin();
          const _size356 = _rtmp3357.size || 0;
          for (let _i358 = 0; _i358 < _size356; ++_i358) {
            let key359 = null;
            let val360 = null;
            key359 = input.readString();
            val360 = new Map();
            const _rtmp3362 = input.readMapBegin();
            const _size361 = _rtmp3362.size || 0;
            for (let _i363 = 0; _i363 < _size361; ++_i363) {
              let key364 = null;
              let val365 = null;
              key364 = input.readI32();
              val365 = [];
              const _rtmp3367 = input.readSetBegin();
              const _size366 = _rtmp3367.size || 0;
              for (let _i368 = 0; _i368 < _size366; ++_i368) {
                let elem369 = null;
                elem369 = new data_ttypes.TObject();
                elem369.read(input);
                val365.push(elem369);
              }
              input.readSetEnd();
              val360.set(key364, val365);
            }
            input.readMapEnd();
            this.success.set(key359, val360);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffRecordStartstr_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStartstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffRecordStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3376 = input.readMapBegin();
          const _size375 = _rtmp3376.size || 0;
          for (let _i377 = 0; _i377 < _size375; ++_i377) {
            let key378 = null;
            let val379 = null;
            key378 = input.readString();
            val379 = new Map();
            const _rtmp3381 = input.readMapBegin();
            const _size380 = _rtmp3381.size || 0;
            for (let _i382 = 0; _i382 < _size380; ++_i382) {
              let key383 = null;
              let val384 = null;
              key383 = input.readI32();
              val384 = [];
              const _rtmp3386 = input.readSetBegin();
              const _size385 = _rtmp3386.size || 0;
              for (let _i387 = 0; _i387 < _size385; ++_i387) {
                let elem388 = null;
                elem388 = new data_ttypes.TObject();
                elem388.read(input);
                val384.push(elem388);
              }
              input.readSetEnd();
              val379.set(key383, val384);
            }
            input.readMapEnd();
            this.success.set(key378, val379);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffRecordStartEnd_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStartEnd_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 3);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffRecordStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3395 = input.readMapBegin();
          const _size394 = _rtmp3395.size || 0;
          for (let _i396 = 0; _i396 < _size394; ++_i396) {
            let key397 = null;
            let val398 = null;
            key397 = input.readString();
            val398 = new Map();
            const _rtmp3400 = input.readMapBegin();
            const _size399 = _rtmp3400.size || 0;
            for (let _i401 = 0; _i401 < _size399; ++_i401) {
              let key402 = null;
              let val403 = null;
              key402 = input.readI32();
              val403 = [];
              const _rtmp3405 = input.readSetBegin();
              const _size404 = _rtmp3405.size || 0;
              for (let _i406 = 0; _i406 < _size404; ++_i406) {
                let elem407 = null;
                elem407 = new data_ttypes.TObject();
                elem407.read(input);
                val403.push(elem407);
              }
              input.readSetEnd();
              val398.set(key402, val403);
            }
            input.readMapEnd();
            this.success.set(key397, val398);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffRecordStartstrEndstr_args = class {
  constructor(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffRecordStartstrEndstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 3);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffRecordStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3414 = input.readMapBegin();
          const _size413 = _rtmp3414.size || 0;
          for (let _i415 = 0; _i415 < _size413; ++_i415) {
            let key416 = null;
            let val417 = null;
            key416 = input.readString();
            val417 = new Map();
            const _rtmp3419 = input.readMapBegin();
            const _size418 = _rtmp3419.size || 0;
            for (let _i420 = 0; _i420 < _size418; ++_i420) {
              let key421 = null;
              let val422 = null;
              key421 = input.readI32();
              val422 = [];
              const _rtmp3424 = input.readSetBegin();
              const _size423 = _rtmp3424.size || 0;
              for (let _i425 = 0; _i425 < _size423; ++_i425) {
                let elem426 = null;
                elem426 = new data_ttypes.TObject();
                elem426.read(input);
                val422.push(elem426);
              }
              input.readSetEnd();
              val417.set(key421, val422);
            }
            input.readMapEnd();
            this.success.set(key416, val417);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffKeyRecordStart_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffKeyRecordStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3433 = input.readMapBegin();
          const _size432 = _rtmp3433.size || 0;
          for (let _i434 = 0; _i434 < _size432; ++_i434) {
            let key435 = null;
            let val436 = null;
            key435 = input.readI32();
            val436 = [];
            const _rtmp3438 = input.readSetBegin();
            const _size437 = _rtmp3438.size || 0;
            for (let _i439 = 0; _i439 < _size437; ++_i439) {
              let elem440 = null;
              elem440 = new data_ttypes.TObject();
              elem440.read(input);
              val436.push(elem440);
            }
            input.readSetEnd();
            this.success.set(key435, val436);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffKeyRecordStartstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffKeyRecordStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3445 = input.readMapBegin();
          const _size444 = _rtmp3445.size || 0;
          for (let _i446 = 0; _i446 < _size444; ++_i446) {
            let key447 = null;
            let val448 = null;
            key447 = input.readI32();
            val448 = [];
            const _rtmp3450 = input.readSetBegin();
            const _size449 = _rtmp3450.size || 0;
            for (let _i451 = 0; _i451 < _size449; ++_i451) {
              let elem452 = null;
              elem452 = new data_ttypes.TObject();
              elem452.read(input);
              val448.push(elem452);
            }
            input.readSetEnd();
            this.success.set(key447, val448);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffKeyRecordStartEnd_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 4);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffKeyRecordStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3457 = input.readMapBegin();
          const _size456 = _rtmp3457.size || 0;
          for (let _i458 = 0; _i458 < _size456; ++_i458) {
            let key459 = null;
            let val460 = null;
            key459 = input.readI32();
            val460 = [];
            const _rtmp3462 = input.readSetBegin();
            const _size461 = _rtmp3462.size || 0;
            for (let _i463 = 0; _i463 < _size461; ++_i463) {
              let elem464 = null;
              elem464 = new data_ttypes.TObject();
              elem464.read(input);
              val460.push(elem464);
            }
            input.readSetEnd();
            this.success.set(key459, val460);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffKeyRecordStartstrEndstr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 4);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffKeyRecordStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3469 = input.readMapBegin();
          const _size468 = _rtmp3469.size || 0;
          for (let _i470 = 0; _i470 < _size468; ++_i470) {
            let key471 = null;
            let val472 = null;
            key471 = input.readI32();
            val472 = [];
            const _rtmp3474 = input.readSetBegin();
            const _size473 = _rtmp3474.size || 0;
            for (let _i475 = 0; _i475 < _size473; ++_i475) {
              let elem476 = null;
              elem476 = new data_ttypes.TObject();
              elem476.read(input);
              val472.push(elem476);
            }
            input.readSetEnd();
            this.success.set(key471, val472);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffKeyStart_args = class {
  constructor(args) {
    this.key = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffKeyStart_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3481 = input.readMapBegin();
          const _size480 = _rtmp3481.size || 0;
          for (let _i482 = 0; _i482 < _size480; ++_i482) {
            let key483 = null;
            let val484 = null;
            key483 = new data_ttypes.TObject();
            key483.read(input);
            val484 = new Map();
            const _rtmp3486 = input.readMapBegin();
            const _size485 = _rtmp3486.size || 0;
            for (let _i487 = 0; _i487 < _size485; ++_i487) {
              let key488 = null;
              let val489 = null;
              key488 = input.readI32();
              val489 = [];
              const _rtmp3491 = input.readSetBegin();
              const _size490 = _rtmp3491.size || 0;
              for (let _i492 = 0; _i492 < _size490; ++_i492) {
                let elem493 = null;
                elem493 = input.readI64();
                val489.push(elem493);
              }
              input.readSetEnd();
              val484.set(key488, val489);
            }
            input.readMapEnd();
            this.success.set(key483, val484);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffKeyStartstr_args = class {
  constructor(args) {
    this.key = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffKeyStartstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3500 = input.readMapBegin();
          const _size499 = _rtmp3500.size || 0;
          for (let _i501 = 0; _i501 < _size499; ++_i501) {
            let key502 = null;
            let val503 = null;
            key502 = new data_ttypes.TObject();
            key502.read(input);
            val503 = new Map();
            const _rtmp3505 = input.readMapBegin();
            const _size504 = _rtmp3505.size || 0;
            for (let _i506 = 0; _i506 < _size504; ++_i506) {
              let key507 = null;
              let val508 = null;
              key507 = input.readI32();
              val508 = [];
              const _rtmp3510 = input.readSetBegin();
              const _size509 = _rtmp3510.size || 0;
              for (let _i511 = 0; _i511 < _size509; ++_i511) {
                let elem512 = null;
                elem512 = input.readI64();
                val508.push(elem512);
              }
              input.readSetEnd();
              val503.set(key507, val508);
            }
            input.readMapEnd();
            this.success.set(key502, val503);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffKeyStartEnd_args = class {
  constructor(args) {
    this.key = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 3);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffKeyStartEnd_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3519 = input.readMapBegin();
          const _size518 = _rtmp3519.size || 0;
          for (let _i520 = 0; _i520 < _size518; ++_i520) {
            let key521 = null;
            let val522 = null;
            key521 = new data_ttypes.TObject();
            key521.read(input);
            val522 = new Map();
            const _rtmp3524 = input.readMapBegin();
            const _size523 = _rtmp3524.size || 0;
            for (let _i525 = 0; _i525 < _size523; ++_i525) {
              let key526 = null;
              let val527 = null;
              key526 = input.readI32();
              val527 = [];
              const _rtmp3529 = input.readSetBegin();
              const _size528 = _rtmp3529.size || 0;
              for (let _i530 = 0; _i530 < _size528; ++_i530) {
                let elem531 = null;
                elem531 = input.readI64();
                val527.push(elem531);
              }
              input.readSetEnd();
              val522.set(key526, val527);
            }
            input.readMapEnd();
            this.success.set(key521, val522);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_diffKeyStartstrEndstr_args = class {
  constructor(args) {
    this.key = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.tend !== undefined && args.tend !== null) {
        this.tend = args.tend;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_diffKeyStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 3);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_diffKeyStartstrEndstr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3538 = input.readMapBegin();
          const _size537 = _rtmp3538.size || 0;
          for (let _i539 = 0; _i539 < _size537; ++_i539) {
            let key540 = null;
            let val541 = null;
            key540 = new data_ttypes.TObject();
            key540.read(input);
            val541 = new Map();
            const _rtmp3543 = input.readMapBegin();
            const _size542 = _rtmp3543.size || 0;
            for (let _i544 = 0; _i544 < _size542; ++_i544) {
              let key545 = null;
              let val546 = null;
              key545 = input.readI32();
              val546 = [];
              const _rtmp3548 = input.readSetBegin();
              const _size547 = _rtmp3548.size || 0;
              for (let _i549 = 0; _i549 < _size547; ++_i549) {
                let elem550 = null;
                elem550 = input.readI64();
                val546.push(elem550);
              }
              input.readSetEnd();
              val541.set(key545, val546);
            }
            input.readMapEnd();
            this.success.set(key540, val541);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_invokePlugin_args = class {
  constructor(args) {
    this.id = null;
    this.method = null;
    this.params = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.method !== undefined && args.method !== null) {
        this.method = args.method;
      }
      if (args.params !== undefined && args.params !== null) {
        this.params = Thrift.copyList(args.params, [complex_ttypes.ComplexTObject]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_invokePlugin_args');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.STRING, 2);
      output.writeString(this.method);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
      for (let iter560 in this.params) {
        if (this.params.hasOwnProperty(iter560)) {
          iter560 = this.params[iter560];
          iter560.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_invokePlugin_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new complex_ttypes.ComplexTObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new complex_ttypes.ComplexTObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_login_args = class {
  constructor(args) {
    this.username = null;
    this.password = null;
    this.environment = null;
    if (args) {
      if (args.username !== undefined && args.username !== null) {
        this.username = args.username;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_login_args');
    if (this.username !== null && this.username !== undefined) {
      output.writeFieldBegin('username', Thrift.Type.STRING, 1);
      output.writeBinary(this.username);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeBinary(this.password);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_login_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex2 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new shared_ttypes.AccessToken(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new shared_ttypes.AccessToken();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.PermissionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_logout_args = class {
  constructor(args) {
    this.token = null;
    this.environment = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = new shared_ttypes.AccessToken(args.token);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_logout_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 2);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_logout_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex2 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.PermissionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_stage_args = class {
  constructor(args) {
    this.token = null;
    this.environment = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = new shared_ttypes.AccessToken(args.token);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_stage_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 2);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_stage_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex2 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new shared_ttypes.TransactionToken(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new shared_ttypes.TransactionToken();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.PermissionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_insertJson_args = class {
  constructor(args) {
    this.json = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.json !== undefined && args.json !== null) {
        this.json = args.json;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_insertJson_args');
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 1);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_insertJson_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
      if (args.ex5 !== undefined && args.ex5 !== null) {
        this.ex5 = args.ex5;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3562 = input.readSetBegin();
          const _size561 = _rtmp3562.size || 0;
          for (let _i563 = 0; _i563 < _size561; ++_i563) {
            let elem564 = null;
            elem564 = input.readI64();
            this.success.push(elem564);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_insertJsonRecord_args = class {
  constructor(args) {
    this.json = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.json !== undefined && args.json !== null) {
        this.json = args.json;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_insertJsonRecord_args');
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 1);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_insertJsonRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
      if (args.ex5 !== undefined && args.ex5 !== null) {
        this.ex5 = args.ex5;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_insertJsonRecords_args = class {
  constructor(args) {
    this.json = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.json !== undefined && args.json !== null) {
        this.json = args.json;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_insertJsonRecords_args');
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 1);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter570 in this.records) {
        if (this.records.hasOwnProperty(iter570)) {
          iter570 = this.records[iter570];
          output.writeI64(iter570);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_insertJsonRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
      if (args.ex5 !== undefined && args.ex5 !== null) {
        this.ex5 = args.ex5;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3572 = input.readMapBegin();
          const _size571 = _rtmp3572.size || 0;
          for (let _i573 = 0; _i573 < _size571; ++_i573) {
            let key574 = null;
            let val575 = null;
            key574 = input.readI64();
            val575 = input.readBool();
            this.success.set(key574, val575);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_removeKeyValueRecord_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_removeKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_removeKeyValueRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_removeKeyValueRecords_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_removeKeyValueRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter582 in this.records) {
        if (this.records.hasOwnProperty(iter582)) {
          iter582 = this.records[iter582];
          output.writeI64(iter582);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_removeKeyValueRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3584 = input.readMapBegin();
          const _size583 = _rtmp3584.size || 0;
          for (let _i585 = 0; _i585 < _size583; ++_i585) {
            let key586 = null;
            let val587 = null;
            key586 = input.readI64();
            val587 = input.readBool();
            this.success.set(key586, val587);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_setKeyValueRecord_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_setKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_setKeyValueRecord_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_setKeyValue_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_setKeyValue_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_setKeyValue_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_setKeyValueRecords_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_setKeyValueRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter594 in this.records) {
        if (this.records.hasOwnProperty(iter594)) {
          iter594 = this.records[iter594];
          output.writeI64(iter594);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_setKeyValueRecords_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_reconcileKeyRecordValues_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.values = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_reconcileKeyRecordValues_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.SET, 3);
      output.writeSetBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter599 in this.values) {
        if (this.values.hasOwnProperty(iter599)) {
          iter599 = this.values[iter599];
          iter599.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_reconcileKeyRecordValues_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_inventory_args = class {
  constructor(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_inventory_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_inventory_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3601 = input.readSetBegin();
          const _size600 = _rtmp3601.size || 0;
          for (let _i602 = 0; _i602 < _size600; ++_i602) {
            let elem603 = null;
            elem603 = input.readI64();
            this.success.push(elem603);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectRecord_args = class {
  constructor(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3606 = input.readMapBegin();
          const _size605 = _rtmp3606.size || 0;
          for (let _i607 = 0; _i607 < _size605; ++_i607) {
            let key608 = null;
            let val609 = null;
            key608 = input.readString();
            val609 = [];
            const _rtmp3611 = input.readSetBegin();
            const _size610 = _rtmp3611.size || 0;
            for (let _i612 = 0; _i612 < _size610; ++_i612) {
              let elem613 = null;
              elem613 = new data_ttypes.TObject();
              elem613.read(input);
              val609.push(elem613);
            }
            input.readSetEnd();
            this.success.set(key608, val609);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectRecords_args = class {
  constructor(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter621 in this.records) {
        if (this.records.hasOwnProperty(iter621)) {
          iter621 = this.records[iter621];
          output.writeI64(iter621);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3623 = input.readMapBegin();
          const _size622 = _rtmp3623.size || 0;
          for (let _i624 = 0; _i624 < _size622; ++_i624) {
            let key625 = null;
            let val626 = null;
            key625 = input.readI64();
            val626 = new Map();
            const _rtmp3628 = input.readMapBegin();
            const _size627 = _rtmp3628.size || 0;
            for (let _i629 = 0; _i629 < _size627; ++_i629) {
              let key630 = null;
              let val631 = null;
              key630 = input.readString();
              val631 = [];
              const _rtmp3633 = input.readSetBegin();
              const _size632 = _rtmp3633.size || 0;
              for (let _i634 = 0; _i634 < _size632; ++_i634) {
                let elem635 = null;
                elem635 = new data_ttypes.TObject();
                elem635.read(input);
                val631.push(elem635);
              }
              input.readSetEnd();
              val626.set(key630, val631);
            }
            input.readMapEnd();
            this.success.set(key625, val626);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectRecordTime_args = class {
  constructor(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordTime_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3642 = input.readMapBegin();
          const _size641 = _rtmp3642.size || 0;
          for (let _i643 = 0; _i643 < _size641; ++_i643) {
            let key644 = null;
            let val645 = null;
            key644 = input.readString();
            val645 = [];
            const _rtmp3647 = input.readSetBegin();
            const _size646 = _rtmp3647.size || 0;
            for (let _i648 = 0; _i648 < _size646; ++_i648) {
              let elem649 = null;
              elem649 = new data_ttypes.TObject();
              elem649.read(input);
              val645.push(elem649);
            }
            input.readSetEnd();
            this.success.set(key644, val645);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectRecordTimestr_args = class {
  constructor(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordTimestr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3654 = input.readMapBegin();
          const _size653 = _rtmp3654.size || 0;
          for (let _i655 = 0; _i655 < _size653; ++_i655) {
            let key656 = null;
            let val657 = null;
            key656 = input.readString();
            val657 = [];
            const _rtmp3659 = input.readSetBegin();
            const _size658 = _rtmp3659.size || 0;
            for (let _i660 = 0; _i660 < _size658; ++_i660) {
              let elem661 = null;
              elem661 = new data_ttypes.TObject();
              elem661.read(input);
              val657.push(elem661);
            }
            input.readSetEnd();
            this.success.set(key656, val657);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectRecordsTime_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordsTime_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter669 in this.records) {
        if (this.records.hasOwnProperty(iter669)) {
          iter669 = this.records[iter669];
          output.writeI64(iter669);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3671 = input.readMapBegin();
          const _size670 = _rtmp3671.size || 0;
          for (let _i672 = 0; _i672 < _size670; ++_i672) {
            let key673 = null;
            let val674 = null;
            key673 = input.readI64();
            val674 = new Map();
            const _rtmp3676 = input.readMapBegin();
            const _size675 = _rtmp3676.size || 0;
            for (let _i677 = 0; _i677 < _size675; ++_i677) {
              let key678 = null;
              let val679 = null;
              key678 = input.readString();
              val679 = [];
              const _rtmp3681 = input.readSetBegin();
              const _size680 = _rtmp3681.size || 0;
              for (let _i682 = 0; _i682 < _size680; ++_i682) {
                let elem683 = null;
                elem683 = new data_ttypes.TObject();
                elem683.read(input);
                val679.push(elem683);
              }
              input.readSetEnd();
              val674.set(key678, val679);
            }
            input.readMapEnd();
            this.success.set(key673, val674);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectRecordsTimestr_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectRecordsTimestr_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter693 in this.records) {
        if (this.records.hasOwnProperty(iter693)) {
          iter693 = this.records[iter693];
          output.writeI64(iter693);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3695 = input.readMapBegin();
          const _size694 = _rtmp3695.size || 0;
          for (let _i696 = 0; _i696 < _size694; ++_i696) {
            let key697 = null;
            let val698 = null;
            key697 = input.readI64();
            val698 = new Map();
            const _rtmp3700 = input.readMapBegin();
            const _size699 = _rtmp3700.size || 0;
            for (let _i701 = 0; _i701 < _size699; ++_i701) {
              let key702 = null;
              let val703 = null;
              key702 = input.readString();
              val703 = [];
              const _rtmp3705 = input.readSetBegin();
              const _size704 = _rtmp3705.size || 0;
              for (let _i706 = 0; _i706 < _size704; ++_i706) {
                let elem707 = null;
                elem707 = new data_ttypes.TObject();
                elem707.read(input);
                val703.push(elem707);
              }
              input.readSetEnd();
              val698.set(key702, val703);
            }
            input.readMapEnd();
            this.success.set(key697, val698);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3714 = input.readSetBegin();
          const _size713 = _rtmp3714.size || 0;
          for (let _i715 = 0; _i715 < _size713; ++_i715) {
            let elem716 = null;
            elem716 = new data_ttypes.TObject();
            elem716.read(input);
            this.success.push(elem716);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3719 = input.readSetBegin();
          const _size718 = _rtmp3719.size || 0;
          for (let _i720 = 0; _i720 < _size718; ++_i720) {
            let elem721 = null;
            elem721 = new data_ttypes.TObject();
            elem721.read(input);
            this.success.push(elem721);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp3724 = input.readSetBegin();
          const _size723 = _rtmp3724.size || 0;
          for (let _i725 = 0; _i725 < _size723; ++_i725) {
            let elem726 = null;
            elem726 = new data_ttypes.TObject();
            elem726.read(input);
            this.success.push(elem726);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecord_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter732 in this.keys) {
        if (this.keys.hasOwnProperty(iter732)) {
          iter732 = this.keys[iter732];
          output.writeString(iter732);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3734 = input.readMapBegin();
          const _size733 = _rtmp3734.size || 0;
          for (let _i735 = 0; _i735 < _size733; ++_i735) {
            let key736 = null;
            let val737 = null;
            key736 = input.readString();
            val737 = [];
            const _rtmp3739 = input.readSetBegin();
            const _size738 = _rtmp3739.size || 0;
            for (let _i740 = 0; _i740 < _size738; ++_i740) {
              let elem741 = null;
              elem741 = new data_ttypes.TObject();
              elem741.read(input);
              val737.push(elem741);
            }
            input.readSetEnd();
            this.success.set(key736, val737);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecordTime_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter749 in this.keys) {
        if (this.keys.hasOwnProperty(iter749)) {
          iter749 = this.keys[iter749];
          output.writeString(iter749);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3751 = input.readMapBegin();
          const _size750 = _rtmp3751.size || 0;
          for (let _i752 = 0; _i752 < _size750; ++_i752) {
            let key753 = null;
            let val754 = null;
            key753 = input.readString();
            val754 = [];
            const _rtmp3756 = input.readSetBegin();
            const _size755 = _rtmp3756.size || 0;
            for (let _i757 = 0; _i757 < _size755; ++_i757) {
              let elem758 = null;
              elem758 = new data_ttypes.TObject();
              elem758.read(input);
              val754.push(elem758);
            }
            input.readSetEnd();
            this.success.set(key753, val754);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecordTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter766 in this.keys) {
        if (this.keys.hasOwnProperty(iter766)) {
          iter766 = this.keys[iter766];
          output.writeString(iter766);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3768 = input.readMapBegin();
          const _size767 = _rtmp3768.size || 0;
          for (let _i769 = 0; _i769 < _size767; ++_i769) {
            let key770 = null;
            let val771 = null;
            key770 = input.readString();
            val771 = [];
            const _rtmp3773 = input.readSetBegin();
            const _size772 = _rtmp3773.size || 0;
            for (let _i774 = 0; _i774 < _size772; ++_i774) {
              let elem775 = null;
              elem775 = new data_ttypes.TObject();
              elem775.read(input);
              val771.push(elem775);
            }
            input.readSetEnd();
            this.success.set(key770, val771);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecords_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter787 in this.keys) {
        if (this.keys.hasOwnProperty(iter787)) {
          iter787 = this.keys[iter787];
          output.writeString(iter787);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter788 in this.records) {
        if (this.records.hasOwnProperty(iter788)) {
          iter788 = this.records[iter788];
          output.writeI64(iter788);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3790 = input.readMapBegin();
          const _size789 = _rtmp3790.size || 0;
          for (let _i791 = 0; _i791 < _size789; ++_i791) {
            let key792 = null;
            let val793 = null;
            key792 = input.readI64();
            val793 = new Map();
            const _rtmp3795 = input.readMapBegin();
            const _size794 = _rtmp3795.size || 0;
            for (let _i796 = 0; _i796 < _size794; ++_i796) {
              let key797 = null;
              let val798 = null;
              key797 = input.readString();
              val798 = [];
              const _rtmp3800 = input.readSetBegin();
              const _size799 = _rtmp3800.size || 0;
              for (let _i801 = 0; _i801 < _size799; ++_i801) {
                let elem802 = null;
                elem802 = new data_ttypes.TObject();
                elem802.read(input);
                val798.push(elem802);
              }
              input.readSetEnd();
              val793.set(key797, val798);
            }
            input.readMapEnd();
            this.success.set(key792, val793);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter812 in this.records) {
        if (this.records.hasOwnProperty(iter812)) {
          iter812 = this.records[iter812];
          output.writeI64(iter812);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3814 = input.readMapBegin();
          const _size813 = _rtmp3814.size || 0;
          for (let _i815 = 0; _i815 < _size813; ++_i815) {
            let key816 = null;
            let val817 = null;
            key816 = input.readI64();
            val817 = [];
            const _rtmp3819 = input.readSetBegin();
            const _size818 = _rtmp3819.size || 0;
            for (let _i820 = 0; _i820 < _size818; ++_i820) {
              let elem821 = null;
              elem821 = new data_ttypes.TObject();
              elem821.read(input);
              val817.push(elem821);
            }
            input.readSetEnd();
            this.success.set(key816, val817);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter829 in this.records) {
        if (this.records.hasOwnProperty(iter829)) {
          iter829 = this.records[iter829];
          output.writeI64(iter829);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3831 = input.readMapBegin();
          const _size830 = _rtmp3831.size || 0;
          for (let _i832 = 0; _i832 < _size830; ++_i832) {
            let key833 = null;
            let val834 = null;
            key833 = input.readI64();
            val834 = [];
            const _rtmp3836 = input.readSetBegin();
            const _size835 = _rtmp3836.size || 0;
            for (let _i837 = 0; _i837 < _size835; ++_i837) {
              let elem838 = null;
              elem838 = new data_ttypes.TObject();
              elem838.read(input);
              val834.push(elem838);
            }
            input.readSetEnd();
            this.success.set(key833, val834);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter846 in this.records) {
        if (this.records.hasOwnProperty(iter846)) {
          iter846 = this.records[iter846];
          output.writeI64(iter846);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3848 = input.readMapBegin();
          const _size847 = _rtmp3848.size || 0;
          for (let _i849 = 0; _i849 < _size847; ++_i849) {
            let key850 = null;
            let val851 = null;
            key850 = input.readI64();
            val851 = [];
            const _rtmp3853 = input.readSetBegin();
            const _size852 = _rtmp3853.size || 0;
            for (let _i854 = 0; _i854 < _size852; ++_i854) {
              let elem855 = null;
              elem855 = new data_ttypes.TObject();
              elem855.read(input);
              val851.push(elem855);
            }
            input.readSetEnd();
            this.success.set(key850, val851);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecordsTime_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter867 in this.keys) {
        if (this.keys.hasOwnProperty(iter867)) {
          iter867 = this.keys[iter867];
          output.writeString(iter867);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter868 in this.records) {
        if (this.records.hasOwnProperty(iter868)) {
          iter868 = this.records[iter868];
          output.writeI64(iter868);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3870 = input.readMapBegin();
          const _size869 = _rtmp3870.size || 0;
          for (let _i871 = 0; _i871 < _size869; ++_i871) {
            let key872 = null;
            let val873 = null;
            key872 = input.readI64();
            val873 = new Map();
            const _rtmp3875 = input.readMapBegin();
            const _size874 = _rtmp3875.size || 0;
            for (let _i876 = 0; _i876 < _size874; ++_i876) {
              let key877 = null;
              let val878 = null;
              key877 = input.readString();
              val878 = [];
              const _rtmp3880 = input.readSetBegin();
              const _size879 = _rtmp3880.size || 0;
              for (let _i881 = 0; _i881 < _size879; ++_i881) {
                let elem882 = null;
                elem882 = new data_ttypes.TObject();
                elem882.read(input);
                val878.push(elem882);
              }
              input.readSetEnd();
              val873.set(key877, val878);
            }
            input.readMapEnd();
            this.success.set(key872, val873);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecordsTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter896 in this.keys) {
        if (this.keys.hasOwnProperty(iter896)) {
          iter896 = this.keys[iter896];
          output.writeString(iter896);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter897 in this.records) {
        if (this.records.hasOwnProperty(iter897)) {
          iter897 = this.records[iter897];
          output.writeI64(iter897);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3899 = input.readMapBegin();
          const _size898 = _rtmp3899.size || 0;
          for (let _i900 = 0; _i900 < _size898; ++_i900) {
            let key901 = null;
            let val902 = null;
            key901 = input.readI64();
            val902 = new Map();
            const _rtmp3904 = input.readMapBegin();
            const _size903 = _rtmp3904.size || 0;
            for (let _i905 = 0; _i905 < _size903; ++_i905) {
              let key906 = null;
              let val907 = null;
              key906 = input.readString();
              val907 = [];
              const _rtmp3909 = input.readSetBegin();
              const _size908 = _rtmp3909.size || 0;
              for (let _i910 = 0; _i910 < _size908; ++_i910) {
                let elem911 = null;
                elem911 = new data_ttypes.TObject();
                elem911.read(input);
                val907.push(elem911);
              }
              input.readSetEnd();
              val902.set(key906, val907);
            }
            input.readMapEnd();
            this.success.set(key901, val902);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectCriteria_args = class {
  constructor(args) {
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCriteria_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3918 = input.readMapBegin();
          const _size917 = _rtmp3918.size || 0;
          for (let _i919 = 0; _i919 < _size917; ++_i919) {
            let key920 = null;
            let val921 = null;
            key920 = input.readI64();
            val921 = new Map();
            const _rtmp3923 = input.readMapBegin();
            const _size922 = _rtmp3923.size || 0;
            for (let _i924 = 0; _i924 < _size922; ++_i924) {
              let key925 = null;
              let val926 = null;
              key925 = input.readString();
              val926 = [];
              const _rtmp3928 = input.readSetBegin();
              const _size927 = _rtmp3928.size || 0;
              for (let _i929 = 0; _i929 < _size927; ++_i929) {
                let elem930 = null;
                elem930 = new data_ttypes.TObject();
                elem930.read(input);
                val926.push(elem930);
              }
              input.readSetEnd();
              val921.set(key925, val926);
            }
            input.readMapEnd();
            this.success.set(key920, val921);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectCcl_args = class {
  constructor(args) {
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCcl_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3937 = input.readMapBegin();
          const _size936 = _rtmp3937.size || 0;
          for (let _i938 = 0; _i938 < _size936; ++_i938) {
            let key939 = null;
            let val940 = null;
            key939 = input.readI64();
            val940 = new Map();
            const _rtmp3942 = input.readMapBegin();
            const _size941 = _rtmp3942.size || 0;
            for (let _i943 = 0; _i943 < _size941; ++_i943) {
              let key944 = null;
              let val945 = null;
              key944 = input.readString();
              val945 = [];
              const _rtmp3947 = input.readSetBegin();
              const _size946 = _rtmp3947.size || 0;
              for (let _i948 = 0; _i948 < _size946; ++_i948) {
                let elem949 = null;
                elem949 = new data_ttypes.TObject();
                elem949.read(input);
                val945.push(elem949);
              }
              input.readSetEnd();
              val940.set(key944, val945);
            }
            input.readMapEnd();
            this.success.set(key939, val940);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectCriteriaTime_args = class {
  constructor(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCriteriaTime_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3956 = input.readMapBegin();
          const _size955 = _rtmp3956.size || 0;
          for (let _i957 = 0; _i957 < _size955; ++_i957) {
            let key958 = null;
            let val959 = null;
            key958 = input.readI64();
            val959 = new Map();
            const _rtmp3961 = input.readMapBegin();
            const _size960 = _rtmp3961.size || 0;
            for (let _i962 = 0; _i962 < _size960; ++_i962) {
              let key963 = null;
              let val964 = null;
              key963 = input.readString();
              val964 = [];
              const _rtmp3966 = input.readSetBegin();
              const _size965 = _rtmp3966.size || 0;
              for (let _i967 = 0; _i967 < _size965; ++_i967) {
                let elem968 = null;
                elem968 = new data_ttypes.TObject();
                elem968.read(input);
                val964.push(elem968);
              }
              input.readSetEnd();
              val959.set(key963, val964);
            }
            input.readMapEnd();
            this.success.set(key958, val959);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectCriteriaTimestr_args = class {
  constructor(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCriteriaTimestr_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3975 = input.readMapBegin();
          const _size974 = _rtmp3975.size || 0;
          for (let _i976 = 0; _i976 < _size974; ++_i976) {
            let key977 = null;
            let val978 = null;
            key977 = input.readI64();
            val978 = new Map();
            const _rtmp3980 = input.readMapBegin();
            const _size979 = _rtmp3980.size || 0;
            for (let _i981 = 0; _i981 < _size979; ++_i981) {
              let key982 = null;
              let val983 = null;
              key982 = input.readString();
              val983 = [];
              const _rtmp3985 = input.readSetBegin();
              const _size984 = _rtmp3985.size || 0;
              for (let _i986 = 0; _i986 < _size984; ++_i986) {
                let elem987 = null;
                elem987 = new data_ttypes.TObject();
                elem987.read(input);
                val983.push(elem987);
              }
              input.readSetEnd();
              val978.set(key982, val983);
            }
            input.readMapEnd();
            this.success.set(key977, val978);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectCclTime_args = class {
  constructor(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCclTime_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp3994 = input.readMapBegin();
          const _size993 = _rtmp3994.size || 0;
          for (let _i995 = 0; _i995 < _size993; ++_i995) {
            let key996 = null;
            let val997 = null;
            key996 = input.readI64();
            val997 = new Map();
            const _rtmp3999 = input.readMapBegin();
            const _size998 = _rtmp3999.size || 0;
            for (let _i1000 = 0; _i1000 < _size998; ++_i1000) {
              let key1001 = null;
              let val1002 = null;
              key1001 = input.readString();
              val1002 = [];
              const _rtmp31004 = input.readSetBegin();
              const _size1003 = _rtmp31004.size || 0;
              for (let _i1005 = 0; _i1005 < _size1003; ++_i1005) {
                let elem1006 = null;
                elem1006 = new data_ttypes.TObject();
                elem1006.read(input);
                val1002.push(elem1006);
              }
              input.readSetEnd();
              val997.set(key1001, val1002);
            }
            input.readMapEnd();
            this.success.set(key996, val997);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectCclTimestr_args = class {
  constructor(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectCclTimestr_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31013 = input.readMapBegin();
          const _size1012 = _rtmp31013.size || 0;
          for (let _i1014 = 0; _i1014 < _size1012; ++_i1014) {
            let key1015 = null;
            let val1016 = null;
            key1015 = input.readI64();
            val1016 = new Map();
            const _rtmp31018 = input.readMapBegin();
            const _size1017 = _rtmp31018.size || 0;
            for (let _i1019 = 0; _i1019 < _size1017; ++_i1019) {
              let key1020 = null;
              let val1021 = null;
              key1020 = input.readString();
              val1021 = [];
              const _rtmp31023 = input.readSetBegin();
              const _size1022 = _rtmp31023.size || 0;
              for (let _i1024 = 0; _i1024 < _size1022; ++_i1024) {
                let elem1025 = null;
                elem1025 = new data_ttypes.TObject();
                elem1025.read(input);
                val1021.push(elem1025);
              }
              input.readSetEnd();
              val1016.set(key1020, val1021);
            }
            input.readMapEnd();
            this.success.set(key1015, val1016);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31032 = input.readMapBegin();
          const _size1031 = _rtmp31032.size || 0;
          for (let _i1033 = 0; _i1033 < _size1031; ++_i1033) {
            let key1034 = null;
            let val1035 = null;
            key1034 = input.readI64();
            val1035 = [];
            const _rtmp31037 = input.readSetBegin();
            const _size1036 = _rtmp31037.size || 0;
            for (let _i1038 = 0; _i1038 < _size1036; ++_i1038) {
              let elem1039 = null;
              elem1039 = new data_ttypes.TObject();
              elem1039.read(input);
              val1035.push(elem1039);
            }
            input.readSetEnd();
            this.success.set(key1034, val1035);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31044 = input.readMapBegin();
          const _size1043 = _rtmp31044.size || 0;
          for (let _i1045 = 0; _i1045 < _size1043; ++_i1045) {
            let key1046 = null;
            let val1047 = null;
            key1046 = input.readI64();
            val1047 = [];
            const _rtmp31049 = input.readSetBegin();
            const _size1048 = _rtmp31049.size || 0;
            for (let _i1050 = 0; _i1050 < _size1048; ++_i1050) {
              let elem1051 = null;
              elem1051 = new data_ttypes.TObject();
              elem1051.read(input);
              val1047.push(elem1051);
            }
            input.readSetEnd();
            this.success.set(key1046, val1047);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31056 = input.readMapBegin();
          const _size1055 = _rtmp31056.size || 0;
          for (let _i1057 = 0; _i1057 < _size1055; ++_i1057) {
            let key1058 = null;
            let val1059 = null;
            key1058 = input.readI64();
            val1059 = [];
            const _rtmp31061 = input.readSetBegin();
            const _size1060 = _rtmp31061.size || 0;
            for (let _i1062 = 0; _i1062 < _size1060; ++_i1062) {
              let elem1063 = null;
              elem1063 = new data_ttypes.TObject();
              elem1063.read(input);
              val1059.push(elem1063);
            }
            input.readSetEnd();
            this.success.set(key1058, val1059);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31068 = input.readMapBegin();
          const _size1067 = _rtmp31068.size || 0;
          for (let _i1069 = 0; _i1069 < _size1067; ++_i1069) {
            let key1070 = null;
            let val1071 = null;
            key1070 = input.readI64();
            val1071 = [];
            const _rtmp31073 = input.readSetBegin();
            const _size1072 = _rtmp31073.size || 0;
            for (let _i1074 = 0; _i1074 < _size1072; ++_i1074) {
              let elem1075 = null;
              elem1075 = new data_ttypes.TObject();
              elem1075.read(input);
              val1071.push(elem1075);
            }
            input.readSetEnd();
            this.success.set(key1070, val1071);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31080 = input.readMapBegin();
          const _size1079 = _rtmp31080.size || 0;
          for (let _i1081 = 0; _i1081 < _size1079; ++_i1081) {
            let key1082 = null;
            let val1083 = null;
            key1082 = input.readI64();
            val1083 = [];
            const _rtmp31085 = input.readSetBegin();
            const _size1084 = _rtmp31085.size || 0;
            for (let _i1086 = 0; _i1086 < _size1084; ++_i1086) {
              let elem1087 = null;
              elem1087 = new data_ttypes.TObject();
              elem1087.read(input);
              val1083.push(elem1087);
            }
            input.readSetEnd();
            this.success.set(key1082, val1083);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31092 = input.readMapBegin();
          const _size1091 = _rtmp31092.size || 0;
          for (let _i1093 = 0; _i1093 < _size1091; ++_i1093) {
            let key1094 = null;
            let val1095 = null;
            key1094 = input.readI64();
            val1095 = [];
            const _rtmp31097 = input.readSetBegin();
            const _size1096 = _rtmp31097.size || 0;
            for (let _i1098 = 0; _i1098 < _size1096; ++_i1098) {
              let elem1099 = null;
              elem1099 = new data_ttypes.TObject();
              elem1099.read(input);
              val1095.push(elem1099);
            }
            input.readSetEnd();
            this.success.set(key1094, val1095);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCriteria_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteria_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1107 in this.keys) {
        if (this.keys.hasOwnProperty(iter1107)) {
          iter1107 = this.keys[iter1107];
          output.writeString(iter1107);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31109 = input.readMapBegin();
          const _size1108 = _rtmp31109.size || 0;
          for (let _i1110 = 0; _i1110 < _size1108; ++_i1110) {
            let key1111 = null;
            let val1112 = null;
            key1111 = input.readI64();
            val1112 = new Map();
            const _rtmp31114 = input.readMapBegin();
            const _size1113 = _rtmp31114.size || 0;
            for (let _i1115 = 0; _i1115 < _size1113; ++_i1115) {
              let key1116 = null;
              let val1117 = null;
              key1116 = input.readString();
              val1117 = [];
              const _rtmp31119 = input.readSetBegin();
              const _size1118 = _rtmp31119.size || 0;
              for (let _i1120 = 0; _i1120 < _size1118; ++_i1120) {
                let elem1121 = null;
                elem1121 = new data_ttypes.TObject();
                elem1121.read(input);
                val1117.push(elem1121);
              }
              input.readSetEnd();
              val1112.set(key1116, val1117);
            }
            input.readMapEnd();
            this.success.set(key1111, val1112);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCcl_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCcl_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1131 in this.keys) {
        if (this.keys.hasOwnProperty(iter1131)) {
          iter1131 = this.keys[iter1131];
          output.writeString(iter1131);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31133 = input.readMapBegin();
          const _size1132 = _rtmp31133.size || 0;
          for (let _i1134 = 0; _i1134 < _size1132; ++_i1134) {
            let key1135 = null;
            let val1136 = null;
            key1135 = input.readI64();
            val1136 = new Map();
            const _rtmp31138 = input.readMapBegin();
            const _size1137 = _rtmp31138.size || 0;
            for (let _i1139 = 0; _i1139 < _size1137; ++_i1139) {
              let key1140 = null;
              let val1141 = null;
              key1140 = input.readString();
              val1141 = [];
              const _rtmp31143 = input.readSetBegin();
              const _size1142 = _rtmp31143.size || 0;
              for (let _i1144 = 0; _i1144 < _size1142; ++_i1144) {
                let elem1145 = null;
                elem1145 = new data_ttypes.TObject();
                elem1145.read(input);
                val1141.push(elem1145);
              }
              input.readSetEnd();
              val1136.set(key1140, val1141);
            }
            input.readMapEnd();
            this.success.set(key1135, val1136);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCriteriaTime_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteriaTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1155 in this.keys) {
        if (this.keys.hasOwnProperty(iter1155)) {
          iter1155 = this.keys[iter1155];
          output.writeString(iter1155);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31157 = input.readMapBegin();
          const _size1156 = _rtmp31157.size || 0;
          for (let _i1158 = 0; _i1158 < _size1156; ++_i1158) {
            let key1159 = null;
            let val1160 = null;
            key1159 = input.readI64();
            val1160 = new Map();
            const _rtmp31162 = input.readMapBegin();
            const _size1161 = _rtmp31162.size || 0;
            for (let _i1163 = 0; _i1163 < _size1161; ++_i1163) {
              let key1164 = null;
              let val1165 = null;
              key1164 = input.readString();
              val1165 = [];
              const _rtmp31167 = input.readSetBegin();
              const _size1166 = _rtmp31167.size || 0;
              for (let _i1168 = 0; _i1168 < _size1166; ++_i1168) {
                let elem1169 = null;
                elem1169 = new data_ttypes.TObject();
                elem1169.read(input);
                val1165.push(elem1169);
              }
              input.readSetEnd();
              val1160.set(key1164, val1165);
            }
            input.readMapEnd();
            this.success.set(key1159, val1160);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCriteriaTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1179 in this.keys) {
        if (this.keys.hasOwnProperty(iter1179)) {
          iter1179 = this.keys[iter1179];
          output.writeString(iter1179);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31181 = input.readMapBegin();
          const _size1180 = _rtmp31181.size || 0;
          for (let _i1182 = 0; _i1182 < _size1180; ++_i1182) {
            let key1183 = null;
            let val1184 = null;
            key1183 = input.readI64();
            val1184 = new Map();
            const _rtmp31186 = input.readMapBegin();
            const _size1185 = _rtmp31186.size || 0;
            for (let _i1187 = 0; _i1187 < _size1185; ++_i1187) {
              let key1188 = null;
              let val1189 = null;
              key1188 = input.readString();
              val1189 = [];
              const _rtmp31191 = input.readSetBegin();
              const _size1190 = _rtmp31191.size || 0;
              for (let _i1192 = 0; _i1192 < _size1190; ++_i1192) {
                let elem1193 = null;
                elem1193 = new data_ttypes.TObject();
                elem1193.read(input);
                val1189.push(elem1193);
              }
              input.readSetEnd();
              val1184.set(key1188, val1189);
            }
            input.readMapEnd();
            this.success.set(key1183, val1184);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCclTime_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCclTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1203 in this.keys) {
        if (this.keys.hasOwnProperty(iter1203)) {
          iter1203 = this.keys[iter1203];
          output.writeString(iter1203);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31205 = input.readMapBegin();
          const _size1204 = _rtmp31205.size || 0;
          for (let _i1206 = 0; _i1206 < _size1204; ++_i1206) {
            let key1207 = null;
            let val1208 = null;
            key1207 = input.readI64();
            val1208 = new Map();
            const _rtmp31210 = input.readMapBegin();
            const _size1209 = _rtmp31210.size || 0;
            for (let _i1211 = 0; _i1211 < _size1209; ++_i1211) {
              let key1212 = null;
              let val1213 = null;
              key1212 = input.readString();
              val1213 = [];
              const _rtmp31215 = input.readSetBegin();
              const _size1214 = _rtmp31215.size || 0;
              for (let _i1216 = 0; _i1216 < _size1214; ++_i1216) {
                let elem1217 = null;
                elem1217 = new data_ttypes.TObject();
                elem1217.read(input);
                val1213.push(elem1217);
              }
              input.readSetEnd();
              val1208.set(key1212, val1213);
            }
            input.readMapEnd();
            this.success.set(key1207, val1208);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCclTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_selectKeysCclTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1227 in this.keys) {
        if (this.keys.hasOwnProperty(iter1227)) {
          iter1227 = this.keys[iter1227];
          output.writeString(iter1227);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_selectKeysCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31229 = input.readMapBegin();
          const _size1228 = _rtmp31229.size || 0;
          for (let _i1230 = 0; _i1230 < _size1228; ++_i1230) {
            let key1231 = null;
            let val1232 = null;
            key1231 = input.readI64();
            val1232 = new Map();
            const _rtmp31234 = input.readMapBegin();
            const _size1233 = _rtmp31234.size || 0;
            for (let _i1235 = 0; _i1235 < _size1233; ++_i1235) {
              let key1236 = null;
              let val1237 = null;
              key1236 = input.readString();
              val1237 = [];
              const _rtmp31239 = input.readSetBegin();
              const _size1238 = _rtmp31239.size || 0;
              for (let _i1240 = 0; _i1240 < _size1238; ++_i1240) {
                let elem1241 = null;
                elem1241 = new data_ttypes.TObject();
                elem1241.read(input);
                val1237.push(elem1241);
              }
              input.readSetEnd();
              val1232.set(key1236, val1237);
            }
            input.readMapEnd();
            this.success.set(key1231, val1232);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecord_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1251 in this.keys) {
        if (this.keys.hasOwnProperty(iter1251)) {
          iter1251 = this.keys[iter1251];
          output.writeString(iter1251);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31253 = input.readMapBegin();
          const _size1252 = _rtmp31253.size || 0;
          for (let _i1254 = 0; _i1254 < _size1252; ++_i1254) {
            let key1255 = null;
            let val1256 = null;
            key1255 = input.readString();
            val1256 = new data_ttypes.TObject();
            val1256.read(input);
            this.success.set(key1255, val1256);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecordTime_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1263 in this.keys) {
        if (this.keys.hasOwnProperty(iter1263)) {
          iter1263 = this.keys[iter1263];
          output.writeString(iter1263);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31265 = input.readMapBegin();
          const _size1264 = _rtmp31265.size || 0;
          for (let _i1266 = 0; _i1266 < _size1264; ++_i1266) {
            let key1267 = null;
            let val1268 = null;
            key1267 = input.readString();
            val1268 = new data_ttypes.TObject();
            val1268.read(input);
            this.success.set(key1267, val1268);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecordTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1275 in this.keys) {
        if (this.keys.hasOwnProperty(iter1275)) {
          iter1275 = this.keys[iter1275];
          output.writeString(iter1275);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31277 = input.readMapBegin();
          const _size1276 = _rtmp31277.size || 0;
          for (let _i1278 = 0; _i1278 < _size1276; ++_i1278) {
            let key1279 = null;
            let val1280 = null;
            key1279 = input.readString();
            val1280 = new data_ttypes.TObject();
            val1280.read(input);
            this.success.set(key1279, val1280);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecords_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1291 in this.keys) {
        if (this.keys.hasOwnProperty(iter1291)) {
          iter1291 = this.keys[iter1291];
          output.writeString(iter1291);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1292 in this.records) {
        if (this.records.hasOwnProperty(iter1292)) {
          iter1292 = this.records[iter1292];
          output.writeI64(iter1292);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31294 = input.readMapBegin();
          const _size1293 = _rtmp31294.size || 0;
          for (let _i1295 = 0; _i1295 < _size1293; ++_i1295) {
            let key1296 = null;
            let val1297 = null;
            key1296 = input.readI64();
            val1297 = new Map();
            const _rtmp31299 = input.readMapBegin();
            const _size1298 = _rtmp31299.size || 0;
            for (let _i1300 = 0; _i1300 < _size1298; ++_i1300) {
              let key1301 = null;
              let val1302 = null;
              key1301 = input.readString();
              val1302 = new data_ttypes.TObject();
              val1302.read(input);
              val1297.set(key1301, val1302);
            }
            input.readMapEnd();
            this.success.set(key1296, val1297);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1311 in this.records) {
        if (this.records.hasOwnProperty(iter1311)) {
          iter1311 = this.records[iter1311];
          output.writeI64(iter1311);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31313 = input.readMapBegin();
          const _size1312 = _rtmp31313.size || 0;
          for (let _i1314 = 0; _i1314 < _size1312; ++_i1314) {
            let key1315 = null;
            let val1316 = null;
            key1315 = input.readI64();
            val1316 = new data_ttypes.TObject();
            val1316.read(input);
            this.success.set(key1315, val1316);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1323 in this.records) {
        if (this.records.hasOwnProperty(iter1323)) {
          iter1323 = this.records[iter1323];
          output.writeI64(iter1323);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31325 = input.readMapBegin();
          const _size1324 = _rtmp31325.size || 0;
          for (let _i1326 = 0; _i1326 < _size1324; ++_i1326) {
            let key1327 = null;
            let val1328 = null;
            key1327 = input.readI64();
            val1328 = new data_ttypes.TObject();
            val1328.read(input);
            this.success.set(key1327, val1328);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1335 in this.records) {
        if (this.records.hasOwnProperty(iter1335)) {
          iter1335 = this.records[iter1335];
          output.writeI64(iter1335);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31337 = input.readMapBegin();
          const _size1336 = _rtmp31337.size || 0;
          for (let _i1338 = 0; _i1338 < _size1336; ++_i1338) {
            let key1339 = null;
            let val1340 = null;
            key1339 = input.readI64();
            val1340 = new data_ttypes.TObject();
            val1340.read(input);
            this.success.set(key1339, val1340);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecordsTime_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1351 in this.keys) {
        if (this.keys.hasOwnProperty(iter1351)) {
          iter1351 = this.keys[iter1351];
          output.writeString(iter1351);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1352 in this.records) {
        if (this.records.hasOwnProperty(iter1352)) {
          iter1352 = this.records[iter1352];
          output.writeI64(iter1352);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31354 = input.readMapBegin();
          const _size1353 = _rtmp31354.size || 0;
          for (let _i1355 = 0; _i1355 < _size1353; ++_i1355) {
            let key1356 = null;
            let val1357 = null;
            key1356 = input.readI64();
            val1357 = new Map();
            const _rtmp31359 = input.readMapBegin();
            const _size1358 = _rtmp31359.size || 0;
            for (let _i1360 = 0; _i1360 < _size1358; ++_i1360) {
              let key1361 = null;
              let val1362 = null;
              key1361 = input.readString();
              val1362 = new data_ttypes.TObject();
              val1362.read(input);
              val1357.set(key1361, val1362);
            }
            input.readMapEnd();
            this.success.set(key1356, val1357);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecordsTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1375 in this.keys) {
        if (this.keys.hasOwnProperty(iter1375)) {
          iter1375 = this.keys[iter1375];
          output.writeString(iter1375);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1376 in this.records) {
        if (this.records.hasOwnProperty(iter1376)) {
          iter1376 = this.records[iter1376];
          output.writeI64(iter1376);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31378 = input.readMapBegin();
          const _size1377 = _rtmp31378.size || 0;
          for (let _i1379 = 0; _i1379 < _size1377; ++_i1379) {
            let key1380 = null;
            let val1381 = null;
            key1380 = input.readI64();
            val1381 = new Map();
            const _rtmp31383 = input.readMapBegin();
            const _size1382 = _rtmp31383.size || 0;
            for (let _i1384 = 0; _i1384 < _size1382; ++_i1384) {
              let key1385 = null;
              let val1386 = null;
              key1385 = input.readString();
              val1386 = new data_ttypes.TObject();
              val1386.read(input);
              val1381.set(key1385, val1386);
            }
            input.readMapEnd();
            this.success.set(key1380, val1381);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31392 = input.readMapBegin();
          const _size1391 = _rtmp31392.size || 0;
          for (let _i1393 = 0; _i1393 < _size1391; ++_i1393) {
            let key1394 = null;
            let val1395 = null;
            key1394 = input.readI64();
            val1395 = new data_ttypes.TObject();
            val1395.read(input);
            this.success.set(key1394, val1395);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getCriteria_args = class {
  constructor(args) {
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCriteria_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31399 = input.readMapBegin();
          const _size1398 = _rtmp31399.size || 0;
          for (let _i1400 = 0; _i1400 < _size1398; ++_i1400) {
            let key1401 = null;
            let val1402 = null;
            key1401 = input.readI64();
            val1402 = new Map();
            const _rtmp31404 = input.readMapBegin();
            const _size1403 = _rtmp31404.size || 0;
            for (let _i1405 = 0; _i1405 < _size1403; ++_i1405) {
              let key1406 = null;
              let val1407 = null;
              key1406 = input.readString();
              val1407 = new data_ttypes.TObject();
              val1407.read(input);
              val1402.set(key1406, val1407);
            }
            input.readMapEnd();
            this.success.set(key1401, val1402);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getCcl_args = class {
  constructor(args) {
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCcl_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31413 = input.readMapBegin();
          const _size1412 = _rtmp31413.size || 0;
          for (let _i1414 = 0; _i1414 < _size1412; ++_i1414) {
            let key1415 = null;
            let val1416 = null;
            key1415 = input.readI64();
            val1416 = new Map();
            const _rtmp31418 = input.readMapBegin();
            const _size1417 = _rtmp31418.size || 0;
            for (let _i1419 = 0; _i1419 < _size1417; ++_i1419) {
              let key1420 = null;
              let val1421 = null;
              key1420 = input.readString();
              val1421 = new data_ttypes.TObject();
              val1421.read(input);
              val1416.set(key1420, val1421);
            }
            input.readMapEnd();
            this.success.set(key1415, val1416);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getCriteriaTime_args = class {
  constructor(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCriteriaTime_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31427 = input.readMapBegin();
          const _size1426 = _rtmp31427.size || 0;
          for (let _i1428 = 0; _i1428 < _size1426; ++_i1428) {
            let key1429 = null;
            let val1430 = null;
            key1429 = input.readI64();
            val1430 = new Map();
            const _rtmp31432 = input.readMapBegin();
            const _size1431 = _rtmp31432.size || 0;
            for (let _i1433 = 0; _i1433 < _size1431; ++_i1433) {
              let key1434 = null;
              let val1435 = null;
              key1434 = input.readString();
              val1435 = new data_ttypes.TObject();
              val1435.read(input);
              val1430.set(key1434, val1435);
            }
            input.readMapEnd();
            this.success.set(key1429, val1430);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getCriteriaTimestr_args = class {
  constructor(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCriteriaTimestr_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31441 = input.readMapBegin();
          const _size1440 = _rtmp31441.size || 0;
          for (let _i1442 = 0; _i1442 < _size1440; ++_i1442) {
            let key1443 = null;
            let val1444 = null;
            key1443 = input.readI64();
            val1444 = new Map();
            const _rtmp31446 = input.readMapBegin();
            const _size1445 = _rtmp31446.size || 0;
            for (let _i1447 = 0; _i1447 < _size1445; ++_i1447) {
              let key1448 = null;
              let val1449 = null;
              key1448 = input.readString();
              val1449 = new data_ttypes.TObject();
              val1449.read(input);
              val1444.set(key1448, val1449);
            }
            input.readMapEnd();
            this.success.set(key1443, val1444);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getCclTime_args = class {
  constructor(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCclTime_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31455 = input.readMapBegin();
          const _size1454 = _rtmp31455.size || 0;
          for (let _i1456 = 0; _i1456 < _size1454; ++_i1456) {
            let key1457 = null;
            let val1458 = null;
            key1457 = input.readI64();
            val1458 = new Map();
            const _rtmp31460 = input.readMapBegin();
            const _size1459 = _rtmp31460.size || 0;
            for (let _i1461 = 0; _i1461 < _size1459; ++_i1461) {
              let key1462 = null;
              let val1463 = null;
              key1462 = input.readString();
              val1463 = new data_ttypes.TObject();
              val1463.read(input);
              val1458.set(key1462, val1463);
            }
            input.readMapEnd();
            this.success.set(key1457, val1458);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getCclTimestr_args = class {
  constructor(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getCclTimestr_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31469 = input.readMapBegin();
          const _size1468 = _rtmp31469.size || 0;
          for (let _i1470 = 0; _i1470 < _size1468; ++_i1470) {
            let key1471 = null;
            let val1472 = null;
            key1471 = input.readI64();
            val1472 = new Map();
            const _rtmp31474 = input.readMapBegin();
            const _size1473 = _rtmp31474.size || 0;
            for (let _i1475 = 0; _i1475 < _size1473; ++_i1475) {
              let key1476 = null;
              let val1477 = null;
              key1476 = input.readString();
              val1477 = new data_ttypes.TObject();
              val1477.read(input);
              val1472.set(key1476, val1477);
            }
            input.readMapEnd();
            this.success.set(key1471, val1472);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31483 = input.readMapBegin();
          const _size1482 = _rtmp31483.size || 0;
          for (let _i1484 = 0; _i1484 < _size1482; ++_i1484) {
            let key1485 = null;
            let val1486 = null;
            key1485 = input.readI64();
            val1486 = new data_ttypes.TObject();
            val1486.read(input);
            this.success.set(key1485, val1486);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31490 = input.readMapBegin();
          const _size1489 = _rtmp31490.size || 0;
          for (let _i1491 = 0; _i1491 < _size1489; ++_i1491) {
            let key1492 = null;
            let val1493 = null;
            key1492 = input.readI64();
            val1493 = new data_ttypes.TObject();
            val1493.read(input);
            this.success.set(key1492, val1493);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31497 = input.readMapBegin();
          const _size1496 = _rtmp31497.size || 0;
          for (let _i1498 = 0; _i1498 < _size1496; ++_i1498) {
            let key1499 = null;
            let val1500 = null;
            key1499 = input.readI64();
            val1500 = new data_ttypes.TObject();
            val1500.read(input);
            this.success.set(key1499, val1500);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31504 = input.readMapBegin();
          const _size1503 = _rtmp31504.size || 0;
          for (let _i1505 = 0; _i1505 < _size1503; ++_i1505) {
            let key1506 = null;
            let val1507 = null;
            key1506 = input.readI64();
            val1507 = new data_ttypes.TObject();
            val1507.read(input);
            this.success.set(key1506, val1507);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31511 = input.readMapBegin();
          const _size1510 = _rtmp31511.size || 0;
          for (let _i1512 = 0; _i1512 < _size1510; ++_i1512) {
            let key1513 = null;
            let val1514 = null;
            key1513 = input.readI64();
            val1514 = new data_ttypes.TObject();
            val1514.read(input);
            this.success.set(key1513, val1514);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysCriteria_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCriteria_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1521 in this.keys) {
        if (this.keys.hasOwnProperty(iter1521)) {
          iter1521 = this.keys[iter1521];
          output.writeString(iter1521);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31523 = input.readMapBegin();
          const _size1522 = _rtmp31523.size || 0;
          for (let _i1524 = 0; _i1524 < _size1522; ++_i1524) {
            let key1525 = null;
            let val1526 = null;
            key1525 = input.readI64();
            val1526 = new Map();
            const _rtmp31528 = input.readMapBegin();
            const _size1527 = _rtmp31528.size || 0;
            for (let _i1529 = 0; _i1529 < _size1527; ++_i1529) {
              let key1530 = null;
              let val1531 = null;
              key1530 = input.readString();
              val1531 = new data_ttypes.TObject();
              val1531.read(input);
              val1526.set(key1530, val1531);
            }
            input.readMapEnd();
            this.success.set(key1525, val1526);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysCcl_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCcl_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1540 in this.keys) {
        if (this.keys.hasOwnProperty(iter1540)) {
          iter1540 = this.keys[iter1540];
          output.writeString(iter1540);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31542 = input.readMapBegin();
          const _size1541 = _rtmp31542.size || 0;
          for (let _i1543 = 0; _i1543 < _size1541; ++_i1543) {
            let key1544 = null;
            let val1545 = null;
            key1544 = input.readI64();
            val1545 = new Map();
            const _rtmp31547 = input.readMapBegin();
            const _size1546 = _rtmp31547.size || 0;
            for (let _i1548 = 0; _i1548 < _size1546; ++_i1548) {
              let key1549 = null;
              let val1550 = null;
              key1549 = input.readString();
              val1550 = new data_ttypes.TObject();
              val1550.read(input);
              val1545.set(key1549, val1550);
            }
            input.readMapEnd();
            this.success.set(key1544, val1545);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysCriteriaTime_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCriteriaTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1559 in this.keys) {
        if (this.keys.hasOwnProperty(iter1559)) {
          iter1559 = this.keys[iter1559];
          output.writeString(iter1559);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31561 = input.readMapBegin();
          const _size1560 = _rtmp31561.size || 0;
          for (let _i1562 = 0; _i1562 < _size1560; ++_i1562) {
            let key1563 = null;
            let val1564 = null;
            key1563 = input.readI64();
            val1564 = new Map();
            const _rtmp31566 = input.readMapBegin();
            const _size1565 = _rtmp31566.size || 0;
            for (let _i1567 = 0; _i1567 < _size1565; ++_i1567) {
              let key1568 = null;
              let val1569 = null;
              key1568 = input.readString();
              val1569 = new data_ttypes.TObject();
              val1569.read(input);
              val1564.set(key1568, val1569);
            }
            input.readMapEnd();
            this.success.set(key1563, val1564);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysCriteriaTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCriteriaTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1578 in this.keys) {
        if (this.keys.hasOwnProperty(iter1578)) {
          iter1578 = this.keys[iter1578];
          output.writeString(iter1578);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31580 = input.readMapBegin();
          const _size1579 = _rtmp31580.size || 0;
          for (let _i1581 = 0; _i1581 < _size1579; ++_i1581) {
            let key1582 = null;
            let val1583 = null;
            key1582 = input.readI64();
            val1583 = new Map();
            const _rtmp31585 = input.readMapBegin();
            const _size1584 = _rtmp31585.size || 0;
            for (let _i1586 = 0; _i1586 < _size1584; ++_i1586) {
              let key1587 = null;
              let val1588 = null;
              key1587 = input.readString();
              val1588 = new data_ttypes.TObject();
              val1588.read(input);
              val1583.set(key1587, val1588);
            }
            input.readMapEnd();
            this.success.set(key1582, val1583);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysCclTime_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCclTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1597 in this.keys) {
        if (this.keys.hasOwnProperty(iter1597)) {
          iter1597 = this.keys[iter1597];
          output.writeString(iter1597);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31599 = input.readMapBegin();
          const _size1598 = _rtmp31599.size || 0;
          for (let _i1600 = 0; _i1600 < _size1598; ++_i1600) {
            let key1601 = null;
            let val1602 = null;
            key1601 = input.readI64();
            val1602 = new Map();
            const _rtmp31604 = input.readMapBegin();
            const _size1603 = _rtmp31604.size || 0;
            for (let _i1605 = 0; _i1605 < _size1603; ++_i1605) {
              let key1606 = null;
              let val1607 = null;
              key1606 = input.readString();
              val1607 = new data_ttypes.TObject();
              val1607.read(input);
              val1602.set(key1606, val1607);
            }
            input.readMapEnd();
            this.success.set(key1601, val1602);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getKeysCclTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getKeysCclTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1616 in this.keys) {
        if (this.keys.hasOwnProperty(iter1616)) {
          iter1616 = this.keys[iter1616];
          output.writeString(iter1616);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getKeysCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31618 = input.readMapBegin();
          const _size1617 = _rtmp31618.size || 0;
          for (let _i1619 = 0; _i1619 < _size1617; ++_i1619) {
            let key1620 = null;
            let val1621 = null;
            key1620 = input.readI64();
            val1621 = new Map();
            const _rtmp31623 = input.readMapBegin();
            const _size1622 = _rtmp31623.size || 0;
            for (let _i1624 = 0; _i1624 < _size1622; ++_i1624) {
              let key1625 = null;
              let val1626 = null;
              key1625 = input.readString();
              val1626 = new data_ttypes.TObject();
              val1626.read(input);
              val1621.set(key1625, val1626);
            }
            input.readMapEnd();
            this.success.set(key1620, val1621);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_verifyKeyValueRecord_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_verifyKeyValueRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_verifyKeyValueRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_verifyKeyValueRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_verifyKeyValueRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_verifyKeyValueRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_jsonifyRecords_args = class {
  constructor(args) {
    this.records = null;
    this.identifier = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.identifier !== undefined && args.identifier !== null) {
        this.identifier = args.identifier;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_jsonifyRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1635 in this.records) {
        if (this.records.hasOwnProperty(iter1635)) {
          iter1635 = this.records[iter1635];
          output.writeI64(iter1635);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.BOOL, 2);
      output.writeBool(this.identifier);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_jsonifyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_jsonifyRecordsTime_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.identifier = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.identifier !== undefined && args.identifier !== null) {
        this.identifier = args.identifier;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_jsonifyRecordsTime_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1640 in this.records) {
        if (this.records.hasOwnProperty(iter1640)) {
          iter1640 = this.records[iter1640];
          output.writeI64(iter1640);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.BOOL, 3);
      output.writeBool(this.identifier);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_jsonifyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_jsonifyRecordsTimestr_args = class {
  constructor(args) {
    this.records = null;
    this.timestamp = null;
    this.identifier = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.identifier !== undefined && args.identifier !== null) {
        this.identifier = args.identifier;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_jsonifyRecordsTimestr_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1645 in this.records) {
        if (this.records.hasOwnProperty(iter1645)) {
          iter1645 = this.records[iter1645];
          output.writeI64(iter1645);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.BOOL, 3);
      output.writeBool(this.identifier);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_jsonifyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findCriteria_args = class {
  constructor(args) {
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findCriteria_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31647 = input.readSetBegin();
          const _size1646 = _rtmp31647.size || 0;
          for (let _i1648 = 0; _i1648 < _size1646; ++_i1648) {
            let elem1649 = null;
            elem1649 = input.readI64();
            this.success.push(elem1649);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findCcl_args = class {
  constructor(args) {
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findCcl_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31652 = input.readSetBegin();
          const _size1651 = _rtmp31652.size || 0;
          for (let _i1653 = 0; _i1653 < _size1651; ++_i1653) {
            let elem1654 = null;
            elem1654 = input.readI64();
            this.success.push(elem1654);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorValues_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValues_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.I32, 2);
      output.writeI32(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1660 in this.values) {
        if (this.values.hasOwnProperty(iter1660)) {
          iter1660 = this.values[iter1660];
          iter1660.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorValues_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31662 = input.readSetBegin();
          const _size1661 = _rtmp31662.size || 0;
          for (let _i1663 = 0; _i1663 < _size1661; ++_i1663) {
            let elem1664 = null;
            elem1664 = input.readI64();
            this.success.push(elem1664);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorValuesTime_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValuesTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.I32, 2);
      output.writeI32(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1670 in this.values) {
        if (this.values.hasOwnProperty(iter1670)) {
          iter1670 = this.values[iter1670];
          iter1670.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorValuesTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31672 = input.readSetBegin();
          const _size1671 = _rtmp31672.size || 0;
          for (let _i1673 = 0; _i1673 < _size1671; ++_i1673) {
            let elem1674 = null;
            elem1674 = input.readI64();
            this.success.push(elem1674);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorValuesTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.I32, 2);
      output.writeI32(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1680 in this.values) {
        if (this.values.hasOwnProperty(iter1680)) {
          iter1680 = this.values[iter1680];
          iter1680.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorValuesTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31682 = input.readSetBegin();
          const _size1681 = _rtmp31682.size || 0;
          for (let _i1683 = 0; _i1683 < _size1681; ++_i1683) {
            let elem1684 = null;
            elem1684 = input.readI64();
            this.success.push(elem1684);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorstrValues_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValues_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.STRING, 2);
      output.writeString(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1690 in this.values) {
        if (this.values.hasOwnProperty(iter1690)) {
          iter1690 = this.values[iter1690];
          iter1690.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorstrValues_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31692 = input.readSetBegin();
          const _size1691 = _rtmp31692.size || 0;
          for (let _i1693 = 0; _i1693 < _size1691; ++_i1693) {
            let elem1694 = null;
            elem1694 = input.readI64();
            this.success.push(elem1694);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorstrValuesTime_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.STRING, 2);
      output.writeString(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1700 in this.values) {
        if (this.values.hasOwnProperty(iter1700)) {
          iter1700 = this.values[iter1700];
          iter1700.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorstrValuesTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31702 = input.readSetBegin();
          const _size1701 = _rtmp31702.size || 0;
          for (let _i1703 = 0; _i1703 < _size1701; ++_i1703) {
            let elem1704 = null;
            elem1704 = input.readI64();
            this.success.push(elem1704);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorstrValuesTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.operator !== undefined && args.operator !== null) {
        this.operator = args.operator;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.STRING, 2);
      output.writeString(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (let iter1710 in this.values) {
        if (this.values.hasOwnProperty(iter1710)) {
          iter1710 = this.values[iter1710];
          iter1710.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findKeyOperatorstrValuesTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31712 = input.readSetBegin();
          const _size1711 = _rtmp31712.size || 0;
          for (let _i1713 = 0; _i1713 < _size1711; ++_i1713) {
            let elem1714 = null;
            elem1714 = input.readI64();
            this.success.push(elem1714);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_search_args = class {
  constructor(args) {
    this.key = null;
    this.query = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.query !== undefined && args.query !== null) {
        this.query = args.query;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_search_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 2);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_search_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31717 = input.readSetBegin();
          const _size1716 = _rtmp31717.size || 0;
          for (let _i1718 = 0; _i1718 < _size1716; ++_i1718) {
            let elem1719 = null;
            elem1719 = input.readI64();
            this.success.push(elem1719);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_revertKeysRecordsTime_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1729 in this.keys) {
        if (this.keys.hasOwnProperty(iter1729)) {
          iter1729 = this.keys[iter1729];
          output.writeString(iter1729);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1730 in this.records) {
        if (this.records.hasOwnProperty(iter1730)) {
          iter1730 = this.records[iter1730];
          output.writeI64(iter1730);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_revertKeysRecordsTime_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_revertKeysRecordsTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1739 in this.keys) {
        if (this.keys.hasOwnProperty(iter1739)) {
          iter1739 = this.keys[iter1739];
          output.writeString(iter1739);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1740 in this.records) {
        if (this.records.hasOwnProperty(iter1740)) {
          iter1740 = this.records[iter1740];
          output.writeI64(iter1740);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_revertKeysRecordsTimestr_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_revertKeysRecordTime_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1745 in this.keys) {
        if (this.keys.hasOwnProperty(iter1745)) {
          iter1745 = this.keys[iter1745];
          output.writeString(iter1745);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_revertKeysRecordTime_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_revertKeysRecordTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1750 in this.keys) {
        if (this.keys.hasOwnProperty(iter1750)) {
          iter1750 = this.keys[iter1750];
          output.writeString(iter1750);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_revertKeysRecordTimestr_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_revertKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1755 in this.records) {
        if (this.records.hasOwnProperty(iter1755)) {
          iter1755 = this.records[iter1755];
          output.writeI64(iter1755);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_revertKeyRecordsTime_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_revertKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1760 in this.records) {
        if (this.records.hasOwnProperty(iter1760)) {
          iter1760 = this.records[iter1760];
          output.writeI64(iter1760);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_revertKeyRecordsTimestr_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_revertKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_revertKeyRecordTime_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_revertKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_revertKeyRecordTimestr_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_pingRecords_args = class {
  constructor(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_pingRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1765 in this.records) {
        if (this.records.hasOwnProperty(iter1765)) {
          iter1765 = this.records[iter1765];
          output.writeI64(iter1765);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_pingRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31767 = input.readMapBegin();
          const _size1766 = _rtmp31767.size || 0;
          for (let _i1768 = 0; _i1768 < _size1766; ++_i1768) {
            let key1769 = null;
            let val1770 = null;
            key1769 = input.readI64();
            val1770 = input.readBool();
            this.success.set(key1769, val1770);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_pingRecord_args = class {
  constructor(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_pingRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_pingRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_verifyAndSwap_args = class {
  constructor(args) {
    this.key = null;
    this.expected = null;
    this.record = null;
    this.replacement = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.expected !== undefined && args.expected !== null) {
        this.expected = new data_ttypes.TObject(args.expected);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.replacement !== undefined && args.replacement !== null) {
        this.replacement = new data_ttypes.TObject(args.replacement);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyAndSwap_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.expected !== null && this.expected !== undefined) {
      output.writeFieldBegin('expected', Thrift.Type.STRUCT, 2);
      this.expected.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.replacement !== null && this.replacement !== undefined) {
      output.writeFieldBegin('replacement', Thrift.Type.STRUCT, 4);
      this.replacement.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_verifyAndSwap_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_verifyOrSet_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_verifyOrSet_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_verifyOrSet_result = class {
  constructor(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findOrAddKeyValue_args = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new data_ttypes.TObject(args.value);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findOrAddKeyValue_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findOrAddKeyValue_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.DuplicateEntryException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
      if (args.ex5 !== undefined && args.ex5 !== null) {
        this.ex5 = args.ex5;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.DuplicateEntryException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findOrInsertCriteriaJson_args = class {
  constructor(args) {
    this.criteria = null;
    this.json = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.json !== undefined && args.json !== null) {
        this.json = args.json;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findOrInsertCriteriaJson_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 2);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findOrInsertCriteriaJson_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.DuplicateEntryException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.DuplicateEntryException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_findOrInsertCclJson_args = class {
  constructor(args) {
    this.ccl = null;
    this.json = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.json !== undefined && args.json !== null) {
        this.json = args.json;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_findOrInsertCclJson_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 2);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_findOrInsertCclJson_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.DuplicateEntryException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
      if (args.ex5 !== undefined && args.ex5 !== null) {
        this.ex5 = args.ex5;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.DuplicateEntryException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1777 in this.records) {
        if (this.records.hasOwnProperty(iter1777)) {
          iter1777 = this.records[iter1777];
          output.writeI64(iter1777);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1782 in this.records) {
        if (this.records.hasOwnProperty(iter1782)) {
          iter1782 = this.records[iter1782];
          output.writeI64(iter1782);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1787 in this.records) {
        if (this.records.hasOwnProperty(iter1787)) {
          iter1787 = this.records[iter1787];
          output.writeI64(iter1787);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_sumKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_sumKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1792 in this.records) {
        if (this.records.hasOwnProperty(iter1792)) {
          iter1792 = this.records[iter1792];
          output.writeI64(iter1792);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1797 in this.records) {
        if (this.records.hasOwnProperty(iter1797)) {
          iter1797 = this.records[iter1797];
          output.writeI64(iter1797);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1802 in this.records) {
        if (this.records.hasOwnProperty(iter1802)) {
          iter1802 = this.records[iter1802];
          output.writeI64(iter1802);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_averageKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_averageKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1807 in this.records) {
        if (this.records.hasOwnProperty(iter1807)) {
          iter1807 = this.records[iter1807];
          output.writeI64(iter1807);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1812 in this.records) {
        if (this.records.hasOwnProperty(iter1812)) {
          iter1812 = this.records[iter1812];
          output.writeI64(iter1812);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1817 in this.records) {
        if (this.records.hasOwnProperty(iter1817)) {
          iter1817 = this.records[iter1817];
          output.writeI64(iter1817);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_countKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_countKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_countKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1822 in this.records) {
        if (this.records.hasOwnProperty(iter1822)) {
          iter1822 = this.records[iter1822];
          output.writeI64(iter1822);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1827 in this.records) {
        if (this.records.hasOwnProperty(iter1827)) {
          iter1827 = this.records[iter1827];
          output.writeI64(iter1827);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1832 in this.records) {
        if (this.records.hasOwnProperty(iter1832)) {
          iter1832 = this.records[iter1832];
          output.writeI64(iter1832);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_maxKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_maxKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_maxKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKey_args = class {
  constructor(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKey_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1837 in this.records) {
        if (this.records.hasOwnProperty(iter1837)) {
          iter1837 = this.records[iter1837];
          output.writeI64(iter1837);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1842 in this.records) {
        if (this.records.hasOwnProperty(iter1842)) {
          iter1842 = this.records[iter1842];
          output.writeI64(iter1842);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyTime_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_minKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1847 in this.records) {
        if (this.records.hasOwnProperty(iter1847)) {
          iter1847 = this.records[iter1847];
          output.writeI64(iter1847);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_minKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new data_ttypes.TObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecord_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31849 = input.readMapBegin();
          const _size1848 = _rtmp31849.size || 0;
          for (let _i1850 = 0; _i1850 < _size1848; ++_i1850) {
            let key1851 = null;
            let val1852 = null;
            key1851 = input.readI64();
            val1852 = [];
            const _rtmp31854 = input.readSetBegin();
            const _size1853 = _rtmp31854.size || 0;
            for (let _i1855 = 0; _i1855 < _size1853; ++_i1855) {
              let elem1856 = null;
              elem1856 = new data_ttypes.TObject();
              elem1856.read(input);
              val1852.push(elem1856);
            }
            input.readSetEnd();
            this.success.set(key1851, val1852);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecordTime_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31861 = input.readMapBegin();
          const _size1860 = _rtmp31861.size || 0;
          for (let _i1862 = 0; _i1862 < _size1860; ++_i1862) {
            let key1863 = null;
            let val1864 = null;
            key1863 = input.readI64();
            val1864 = [];
            const _rtmp31866 = input.readSetBegin();
            const _size1865 = _rtmp31866.size || 0;
            for (let _i1867 = 0; _i1867 < _size1865; ++_i1867) {
              let elem1868 = null;
              elem1868 = new data_ttypes.TObject();
              elem1868.read(input);
              val1864.push(elem1868);
            }
            input.readSetEnd();
            this.success.set(key1863, val1864);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecordTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31873 = input.readMapBegin();
          const _size1872 = _rtmp31873.size || 0;
          for (let _i1874 = 0; _i1874 < _size1872; ++_i1874) {
            let key1875 = null;
            let val1876 = null;
            key1875 = input.readI64();
            val1876 = [];
            const _rtmp31878 = input.readSetBegin();
            const _size1877 = _rtmp31878.size || 0;
            for (let _i1879 = 0; _i1879 < _size1877; ++_i1879) {
              let elem1880 = null;
              elem1880 = new data_ttypes.TObject();
              elem1880.read(input);
              val1876.push(elem1880);
            }
            input.readSetEnd();
            this.success.set(key1875, val1876);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecord_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1888 in this.keys) {
        if (this.keys.hasOwnProperty(iter1888)) {
          iter1888 = this.keys[iter1888];
          output.writeString(iter1888);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecord_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31890 = input.readMapBegin();
          const _size1889 = _rtmp31890.size || 0;
          for (let _i1891 = 0; _i1891 < _size1889; ++_i1891) {
            let key1892 = null;
            let val1893 = null;
            key1892 = input.readI64();
            val1893 = new Map();
            const _rtmp31895 = input.readMapBegin();
            const _size1894 = _rtmp31895.size || 0;
            for (let _i1896 = 0; _i1896 < _size1894; ++_i1896) {
              let key1897 = null;
              let val1898 = null;
              key1897 = input.readString();
              val1898 = [];
              const _rtmp31900 = input.readSetBegin();
              const _size1899 = _rtmp31900.size || 0;
              for (let _i1901 = 0; _i1901 < _size1899; ++_i1901) {
                let elem1902 = null;
                elem1902 = new data_ttypes.TObject();
                elem1902.read(input);
                val1898.push(elem1902);
              }
              input.readSetEnd();
              val1893.set(key1897, val1898);
            }
            input.readMapEnd();
            this.success.set(key1892, val1893);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecordTime_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1912 in this.keys) {
        if (this.keys.hasOwnProperty(iter1912)) {
          iter1912 = this.keys[iter1912];
          output.writeString(iter1912);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecordTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31914 = input.readMapBegin();
          const _size1913 = _rtmp31914.size || 0;
          for (let _i1915 = 0; _i1915 < _size1913; ++_i1915) {
            let key1916 = null;
            let val1917 = null;
            key1916 = input.readI64();
            val1917 = new Map();
            const _rtmp31919 = input.readMapBegin();
            const _size1918 = _rtmp31919.size || 0;
            for (let _i1920 = 0; _i1920 < _size1918; ++_i1920) {
              let key1921 = null;
              let val1922 = null;
              key1921 = input.readString();
              val1922 = [];
              const _rtmp31924 = input.readSetBegin();
              const _size1923 = _rtmp31924.size || 0;
              for (let _i1925 = 0; _i1925 < _size1923; ++_i1925) {
                let elem1926 = null;
                elem1926 = new data_ttypes.TObject();
                elem1926.read(input);
                val1922.push(elem1926);
              }
              input.readSetEnd();
              val1917.set(key1921, val1922);
            }
            input.readMapEnd();
            this.success.set(key1916, val1917);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecordTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.record !== undefined && args.record !== null) {
        this.record = args.record;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1936 in this.keys) {
        if (this.keys.hasOwnProperty(iter1936)) {
          iter1936 = this.keys[iter1936];
          output.writeString(iter1936);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecordTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31938 = input.readMapBegin();
          const _size1937 = _rtmp31938.size || 0;
          for (let _i1939 = 0; _i1939 < _size1937; ++_i1939) {
            let key1940 = null;
            let val1941 = null;
            key1940 = input.readI64();
            val1941 = new Map();
            const _rtmp31943 = input.readMapBegin();
            const _size1942 = _rtmp31943.size || 0;
            for (let _i1944 = 0; _i1944 < _size1942; ++_i1944) {
              let key1945 = null;
              let val1946 = null;
              key1945 = input.readString();
              val1946 = [];
              const _rtmp31948 = input.readSetBegin();
              const _size1947 = _rtmp31948.size || 0;
              for (let _i1949 = 0; _i1949 < _size1947; ++_i1949) {
                let elem1950 = null;
                elem1950 = new data_ttypes.TObject();
                elem1950.read(input);
                val1946.push(elem1950);
              }
              input.readSetEnd();
              val1941.set(key1945, val1946);
            }
            input.readMapEnd();
            this.success.set(key1940, val1941);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecords_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter1964 in this.keys) {
        if (this.keys.hasOwnProperty(iter1964)) {
          iter1964 = this.keys[iter1964];
          output.writeString(iter1964);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1965 in this.records) {
        if (this.records.hasOwnProperty(iter1965)) {
          iter1965 = this.records[iter1965];
          output.writeI64(iter1965);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31967 = input.readMapBegin();
          const _size1966 = _rtmp31967.size || 0;
          for (let _i1968 = 0; _i1968 < _size1966; ++_i1968) {
            let key1969 = null;
            let val1970 = null;
            key1969 = input.readI64();
            val1970 = new Map();
            const _rtmp31972 = input.readMapBegin();
            const _size1971 = _rtmp31972.size || 0;
            for (let _i1973 = 0; _i1973 < _size1971; ++_i1973) {
              let key1974 = null;
              let val1975 = null;
              key1974 = input.readString();
              val1975 = [];
              const _rtmp31977 = input.readSetBegin();
              const _size1976 = _rtmp31977.size || 0;
              for (let _i1978 = 0; _i1978 < _size1976; ++_i1978) {
                let elem1979 = null;
                elem1979 = new data_ttypes.TObject();
                elem1979.read(input);
                val1975.push(elem1979);
              }
              input.readSetEnd();
              val1970.set(key1974, val1975);
            }
            input.readMapEnd();
            this.success.set(key1969, val1970);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecords_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter1989 in this.records) {
        if (this.records.hasOwnProperty(iter1989)) {
          iter1989 = this.records[iter1989];
          output.writeI64(iter1989);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecords_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp31991 = input.readMapBegin();
          const _size1990 = _rtmp31991.size || 0;
          for (let _i1992 = 0; _i1992 < _size1990; ++_i1992) {
            let key1993 = null;
            let val1994 = null;
            key1993 = input.readI64();
            val1994 = [];
            const _rtmp31996 = input.readSetBegin();
            const _size1995 = _rtmp31996.size || 0;
            for (let _i1997 = 0; _i1997 < _size1995; ++_i1997) {
              let elem1998 = null;
              elem1998 = new data_ttypes.TObject();
              elem1998.read(input);
              val1994.push(elem1998);
            }
            input.readSetEnd();
            this.success.set(key1993, val1994);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecordsTime_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter2006 in this.records) {
        if (this.records.hasOwnProperty(iter2006)) {
          iter2006 = this.records[iter2006];
          output.writeI64(iter2006);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32008 = input.readMapBegin();
          const _size2007 = _rtmp32008.size || 0;
          for (let _i2009 = 0; _i2009 < _size2007; ++_i2009) {
            let key2010 = null;
            let val2011 = null;
            key2010 = input.readI64();
            val2011 = [];
            const _rtmp32013 = input.readSetBegin();
            const _size2012 = _rtmp32013.size || 0;
            for (let _i2014 = 0; _i2014 < _size2012; ++_i2014) {
              let elem2015 = null;
              elem2015 = new data_ttypes.TObject();
              elem2015.read(input);
              val2011.push(elem2015);
            }
            input.readSetEnd();
            this.success.set(key2010, val2011);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecordsTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter2023 in this.records) {
        if (this.records.hasOwnProperty(iter2023)) {
          iter2023 = this.records[iter2023];
          output.writeI64(iter2023);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32025 = input.readMapBegin();
          const _size2024 = _rtmp32025.size || 0;
          for (let _i2026 = 0; _i2026 < _size2024; ++_i2026) {
            let key2027 = null;
            let val2028 = null;
            key2027 = input.readI64();
            val2028 = [];
            const _rtmp32030 = input.readSetBegin();
            const _size2029 = _rtmp32030.size || 0;
            for (let _i2031 = 0; _i2031 < _size2029; ++_i2031) {
              let elem2032 = null;
              elem2032 = new data_ttypes.TObject();
              elem2032.read(input);
              val2028.push(elem2032);
            }
            input.readSetEnd();
            this.success.set(key2027, val2028);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecordsTime_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2044 in this.keys) {
        if (this.keys.hasOwnProperty(iter2044)) {
          iter2044 = this.keys[iter2044];
          output.writeString(iter2044);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter2045 in this.records) {
        if (this.records.hasOwnProperty(iter2045)) {
          iter2045 = this.records[iter2045];
          output.writeI64(iter2045);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecordsTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32047 = input.readMapBegin();
          const _size2046 = _rtmp32047.size || 0;
          for (let _i2048 = 0; _i2048 < _size2046; ++_i2048) {
            let key2049 = null;
            let val2050 = null;
            key2049 = input.readI64();
            val2050 = new Map();
            const _rtmp32052 = input.readMapBegin();
            const _size2051 = _rtmp32052.size || 0;
            for (let _i2053 = 0; _i2053 < _size2051; ++_i2053) {
              let key2054 = null;
              let val2055 = null;
              key2054 = input.readString();
              val2055 = [];
              const _rtmp32057 = input.readSetBegin();
              const _size2056 = _rtmp32057.size || 0;
              for (let _i2058 = 0; _i2058 < _size2056; ++_i2058) {
                let elem2059 = null;
                elem2059 = new data_ttypes.TObject();
                elem2059.read(input);
                val2055.push(elem2059);
              }
              input.readSetEnd();
              val2050.set(key2054, val2055);
            }
            input.readMapEnd();
            this.success.set(key2049, val2050);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecordsTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.records !== undefined && args.records !== null) {
        this.records = Thrift.copyList(args.records, [null]);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2073 in this.keys) {
        if (this.keys.hasOwnProperty(iter2073)) {
          iter2073 = this.keys[iter2073];
          output.writeString(iter2073);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (let iter2074 in this.records) {
        if (this.records.hasOwnProperty(iter2074)) {
          iter2074 = this.records[iter2074];
          output.writeI64(iter2074);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysRecordsTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32076 = input.readMapBegin();
          const _size2075 = _rtmp32076.size || 0;
          for (let _i2077 = 0; _i2077 < _size2075; ++_i2077) {
            let key2078 = null;
            let val2079 = null;
            key2078 = input.readI64();
            val2079 = new Map();
            const _rtmp32081 = input.readMapBegin();
            const _size2080 = _rtmp32081.size || 0;
            for (let _i2082 = 0; _i2082 < _size2080; ++_i2082) {
              let key2083 = null;
              let val2084 = null;
              key2083 = input.readString();
              val2084 = [];
              const _rtmp32086 = input.readSetBegin();
              const _size2085 = _rtmp32086.size || 0;
              for (let _i2087 = 0; _i2087 < _size2085; ++_i2087) {
                let elem2088 = null;
                elem2088 = new data_ttypes.TObject();
                elem2088.read(input);
                val2084.push(elem2088);
              }
              input.readSetEnd();
              val2079.set(key2083, val2084);
            }
            input.readMapEnd();
            this.success.set(key2078, val2079);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCcl_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32095 = input.readMapBegin();
          const _size2094 = _rtmp32095.size || 0;
          for (let _i2096 = 0; _i2096 < _size2094; ++_i2096) {
            let key2097 = null;
            let val2098 = null;
            key2097 = input.readI64();
            val2098 = [];
            const _rtmp32100 = input.readSetBegin();
            const _size2099 = _rtmp32100.size || 0;
            for (let _i2101 = 0; _i2101 < _size2099; ++_i2101) {
              let elem2102 = null;
              elem2102 = new data_ttypes.TObject();
              elem2102.read(input);
              val2098.push(elem2102);
            }
            input.readSetEnd();
            this.success.set(key2097, val2098);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCclTime_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32107 = input.readMapBegin();
          const _size2106 = _rtmp32107.size || 0;
          for (let _i2108 = 0; _i2108 < _size2106; ++_i2108) {
            let key2109 = null;
            let val2110 = null;
            key2109 = input.readI64();
            val2110 = [];
            const _rtmp32112 = input.readSetBegin();
            const _size2111 = _rtmp32112.size || 0;
            for (let _i2113 = 0; _i2113 < _size2111; ++_i2113) {
              let elem2114 = null;
              elem2114 = new data_ttypes.TObject();
              elem2114.read(input);
              val2110.push(elem2114);
            }
            input.readSetEnd();
            this.success.set(key2109, val2110);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCclTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32119 = input.readMapBegin();
          const _size2118 = _rtmp32119.size || 0;
          for (let _i2120 = 0; _i2120 < _size2118; ++_i2120) {
            let key2121 = null;
            let val2122 = null;
            key2121 = input.readI64();
            val2122 = [];
            const _rtmp32124 = input.readSetBegin();
            const _size2123 = _rtmp32124.size || 0;
            for (let _i2125 = 0; _i2125 < _size2123; ++_i2125) {
              let elem2126 = null;
              elem2126 = new data_ttypes.TObject();
              elem2126.read(input);
              val2122.push(elem2126);
            }
            input.readSetEnd();
            this.success.set(key2121, val2122);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCcl_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCcl_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2134 in this.keys) {
        if (this.keys.hasOwnProperty(iter2134)) {
          iter2134 = this.keys[iter2134];
          output.writeString(iter2134);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCcl_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32136 = input.readMapBegin();
          const _size2135 = _rtmp32136.size || 0;
          for (let _i2137 = 0; _i2137 < _size2135; ++_i2137) {
            let key2138 = null;
            let val2139 = null;
            key2138 = input.readI64();
            val2139 = new Map();
            const _rtmp32141 = input.readMapBegin();
            const _size2140 = _rtmp32141.size || 0;
            for (let _i2142 = 0; _i2142 < _size2140; ++_i2142) {
              let key2143 = null;
              let val2144 = null;
              key2143 = input.readString();
              val2144 = [];
              const _rtmp32146 = input.readSetBegin();
              const _size2145 = _rtmp32146.size || 0;
              for (let _i2147 = 0; _i2147 < _size2145; ++_i2147) {
                let elem2148 = null;
                elem2148 = new data_ttypes.TObject();
                elem2148.read(input);
                val2144.push(elem2148);
              }
              input.readSetEnd();
              val2139.set(key2143, val2144);
            }
            input.readMapEnd();
            this.success.set(key2138, val2139);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCclTime_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCclTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2158 in this.keys) {
        if (this.keys.hasOwnProperty(iter2158)) {
          iter2158 = this.keys[iter2158];
          output.writeString(iter2158);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCclTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32160 = input.readMapBegin();
          const _size2159 = _rtmp32160.size || 0;
          for (let _i2161 = 0; _i2161 < _size2159; ++_i2161) {
            let key2162 = null;
            let val2163 = null;
            key2162 = input.readI64();
            val2163 = new Map();
            const _rtmp32165 = input.readMapBegin();
            const _size2164 = _rtmp32165.size || 0;
            for (let _i2166 = 0; _i2166 < _size2164; ++_i2166) {
              let key2167 = null;
              let val2168 = null;
              key2167 = input.readString();
              val2168 = [];
              const _rtmp32170 = input.readSetBegin();
              const _size2169 = _rtmp32170.size || 0;
              for (let _i2171 = 0; _i2171 < _size2169; ++_i2171) {
                let elem2172 = null;
                elem2172 = new data_ttypes.TObject();
                elem2172.read(input);
                val2168.push(elem2172);
              }
              input.readSetEnd();
              val2163.set(key2167, val2168);
            }
            input.readMapEnd();
            this.success.set(key2162, val2163);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCclTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.ccl !== undefined && args.ccl !== null) {
        this.ccl = args.ccl;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCclTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2182 in this.keys) {
        if (this.keys.hasOwnProperty(iter2182)) {
          iter2182 = this.keys[iter2182];
          output.writeString(iter2182);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCclTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32184 = input.readMapBegin();
          const _size2183 = _rtmp32184.size || 0;
          for (let _i2185 = 0; _i2185 < _size2183; ++_i2185) {
            let key2186 = null;
            let val2187 = null;
            key2186 = input.readI64();
            val2187 = new Map();
            const _rtmp32189 = input.readMapBegin();
            const _size2188 = _rtmp32189.size || 0;
            for (let _i2190 = 0; _i2190 < _size2188; ++_i2190) {
              let key2191 = null;
              let val2192 = null;
              key2191 = input.readString();
              val2192 = [];
              const _rtmp32194 = input.readSetBegin();
              const _size2193 = _rtmp32194.size || 0;
              for (let _i2195 = 0; _i2195 < _size2193; ++_i2195) {
                let elem2196 = null;
                elem2196 = new data_ttypes.TObject();
                elem2196.read(input);
                val2192.push(elem2196);
              }
              input.readSetEnd();
              val2187.set(key2191, val2192);
            }
            input.readMapEnd();
            this.success.set(key2186, val2187);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCriteria_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32203 = input.readMapBegin();
          const _size2202 = _rtmp32203.size || 0;
          for (let _i2204 = 0; _i2204 < _size2202; ++_i2204) {
            let key2205 = null;
            let val2206 = null;
            key2205 = input.readI64();
            val2206 = [];
            const _rtmp32208 = input.readSetBegin();
            const _size2207 = _rtmp32208.size || 0;
            for (let _i2209 = 0; _i2209 < _size2207; ++_i2209) {
              let elem2210 = null;
              elem2210 = new data_ttypes.TObject();
              elem2210.read(input);
              val2206.push(elem2210);
            }
            input.readSetEnd();
            this.success.set(key2205, val2206);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCriteriaTime_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32215 = input.readMapBegin();
          const _size2214 = _rtmp32215.size || 0;
          for (let _i2216 = 0; _i2216 < _size2214; ++_i2216) {
            let key2217 = null;
            let val2218 = null;
            key2217 = input.readI64();
            val2218 = [];
            const _rtmp32220 = input.readSetBegin();
            const _size2219 = _rtmp32220.size || 0;
            for (let _i2221 = 0; _i2221 < _size2219; ++_i2221) {
              let elem2222 = null;
              elem2222 = new data_ttypes.TObject();
              elem2222.read(input);
              val2218.push(elem2222);
            }
            input.readSetEnd();
            this.success.set(key2217, val2218);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCriteriaTimestr_args = class {
  constructor(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeyCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32227 = input.readMapBegin();
          const _size2226 = _rtmp32227.size || 0;
          for (let _i2228 = 0; _i2228 < _size2226; ++_i2228) {
            let key2229 = null;
            let val2230 = null;
            key2229 = input.readI64();
            val2230 = [];
            const _rtmp32232 = input.readSetBegin();
            const _size2231 = _rtmp32232.size || 0;
            for (let _i2233 = 0; _i2233 < _size2231; ++_i2233) {
              let elem2234 = null;
              elem2234 = new data_ttypes.TObject();
              elem2234.read(input);
              val2230.push(elem2234);
            }
            input.readSetEnd();
            this.success.set(key2229, val2230);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCriteria_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteria_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2242 in this.keys) {
        if (this.keys.hasOwnProperty(iter2242)) {
          iter2242 = this.keys[iter2242];
          output.writeString(iter2242);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCriteria_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32244 = input.readMapBegin();
          const _size2243 = _rtmp32244.size || 0;
          for (let _i2245 = 0; _i2245 < _size2243; ++_i2245) {
            let key2246 = null;
            let val2247 = null;
            key2246 = input.readI64();
            val2247 = new Map();
            const _rtmp32249 = input.readMapBegin();
            const _size2248 = _rtmp32249.size || 0;
            for (let _i2250 = 0; _i2250 < _size2248; ++_i2250) {
              let key2251 = null;
              let val2252 = null;
              key2251 = input.readString();
              val2252 = [];
              const _rtmp32254 = input.readSetBegin();
              const _size2253 = _rtmp32254.size || 0;
              for (let _i2255 = 0; _i2255 < _size2253; ++_i2255) {
                let elem2256 = null;
                elem2256 = new data_ttypes.TObject();
                elem2256.read(input);
                val2252.push(elem2256);
              }
              input.readSetEnd();
              val2247.set(key2251, val2252);
            }
            input.readMapEnd();
            this.success.set(key2246, val2247);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCriteriaTime_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteriaTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2266 in this.keys) {
        if (this.keys.hasOwnProperty(iter2266)) {
          iter2266 = this.keys[iter2266];
          output.writeString(iter2266);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCriteriaTime_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32268 = input.readMapBegin();
          const _size2267 = _rtmp32268.size || 0;
          for (let _i2269 = 0; _i2269 < _size2267; ++_i2269) {
            let key2270 = null;
            let val2271 = null;
            key2270 = input.readI64();
            val2271 = new Map();
            const _rtmp32273 = input.readMapBegin();
            const _size2272 = _rtmp32273.size || 0;
            for (let _i2274 = 0; _i2274 < _size2272; ++_i2274) {
              let key2275 = null;
              let val2276 = null;
              key2275 = input.readString();
              val2276 = [];
              const _rtmp32278 = input.readSetBegin();
              const _size2277 = _rtmp32278.size || 0;
              for (let _i2279 = 0; _i2279 < _size2277; ++_i2279) {
                let elem2280 = null;
                elem2280 = new data_ttypes.TObject();
                elem2280.read(input);
                val2276.push(elem2280);
              }
              input.readSetEnd();
              val2271.set(key2275, val2276);
            }
            input.readMapEnd();
            this.success.set(key2270, val2271);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCriteriaTimestr_args = class {
  constructor(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
      if (args.keys !== undefined && args.keys !== null) {
        this.keys = Thrift.copyList(args.keys, [null]);
      }
      if (args.criteria !== undefined && args.criteria !== null) {
        this.criteria = new data_ttypes.TCriteria(args.criteria);
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new shared_ttypes.TransactionToken(args.transaction);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteriaTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (let iter2290 in this.keys) {
        if (this.keys.hasOwnProperty(iter2290)) {
          iter2290 = this.keys[iter2290];
          output.writeString(iter2290);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_navigateKeysCriteriaTimestr_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = new Map();
          const _rtmp32292 = input.readMapBegin();
          const _size2291 = _rtmp32292.size || 0;
          for (let _i2293 = 0; _i2293 < _size2291; ++_i2293) {
            let key2294 = null;
            let val2295 = null;
            key2294 = input.readI64();
            val2295 = new Map();
            const _rtmp32297 = input.readMapBegin();
            const _size2296 = _rtmp32297.size || 0;
            for (let _i2298 = 0; _i2298 < _size2296; ++_i2298) {
              let key2299 = null;
              let val2300 = null;
              key2299 = input.readString();
              val2300 = [];
              const _rtmp32302 = input.readSetBegin();
              const _size2301 = _rtmp32302.size || 0;
              for (let _i2303 = 0; _i2303 < _size2301; ++_i2303) {
                let elem2304 = null;
                elem2304 = new data_ttypes.TObject();
                elem2304.read(input);
                val2300.push(elem2304);
              }
              input.readSetEnd();
              val2295.set(key2299, val2300);
            }
            input.readMapEnd();
            this.success.set(key2294, val2295);
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getServerEnvironment_args = class {
  constructor(args) {
    this.creds = null;
    this.token = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.token !== undefined && args.token !== null) {
        this.token = new shared_ttypes.TransactionToken(args.token);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getServerEnvironment_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getServerEnvironment_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_getServerVersion_args = class {
  constructor(args) {
  }

  write (output) {
    output.writeStructBegin('ConcourseService_getServerVersion_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_getServerVersion_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_time_args = class {
  constructor(args) {
    this.creds = null;
    this.token = null;
    this.environment = null;
    if (args) {
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.token !== undefined && args.token !== null) {
        this.token = new shared_ttypes.TransactionToken(args.token);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_time_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_time_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_timePhrase_args = class {
  constructor(args) {
    this.phrase = null;
    this.creds = null;
    this.token = null;
    this.environment = null;
    if (args) {
      if (args.phrase !== undefined && args.phrase !== null) {
        this.phrase = args.phrase;
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
      if (args.token !== undefined && args.token !== null) {
        this.token = new shared_ttypes.TransactionToken(args.token);
      }
      if (args.environment !== undefined && args.environment !== null) {
        this.environment = args.environment;
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_timePhrase_args');
    if (this.phrase !== null && this.phrase !== undefined) {
      output.writeFieldBegin('phrase', Thrift.Type.STRING, 1);
      output.writeString(this.phrase);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_timePhrase_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
      if (args.ex3 !== undefined && args.ex3 !== null) {
        this.ex3 = args.ex3;
      }
      if (args.ex4 !== undefined && args.ex4 !== null) {
        this.ex4 = args.ex4;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseService_invokeManagement_args = class {
  constructor(args) {
    this.method = null;
    this.params = null;
    this.creds = null;
    if (args) {
      if (args.method !== undefined && args.method !== null) {
        this.method = args.method;
      }
      if (args.params !== undefined && args.params !== null) {
        this.params = Thrift.copyList(args.params, [complex_ttypes.ComplexTObject]);
      }
      if (args.creds !== undefined && args.creds !== null) {
        this.creds = new shared_ttypes.AccessToken(args.creds);
      }
    }
  }

  write (output) {
    output.writeStructBegin('ConcourseService_invokeManagement_args');
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.STRING, 2);
      output.writeString(this.method);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
      for (let iter2314 in this.params) {
        if (this.params.hasOwnProperty(iter2314)) {
          iter2314 = this.params[iter2314];
          iter2314.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const ConcourseService_invokeManagement_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ManagementException) {
        this.ex2 = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new complex_ttypes.ComplexTObject(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
      if (args.ex2 !== undefined && args.ex2 !== null) {
        this.ex2 = args.ex2;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new complex_ttypes.ComplexTObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.ManagementException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }
};
const ConcourseServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  abort (creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_abort(creds, transaction, environment);
    });
  }

  send_abort (creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_abort_args(params);
    try {
      output.writeMessageBegin('abort', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_abort (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_abort_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    callback(null);
  }

  addKeyValue (key, value, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addKeyValue(key, value, creds, transaction, environment);
    });
  }

  send_addKeyValue (key, value, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_addKeyValue_args(params);
    try {
      output.writeMessageBegin('addKeyValue', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addKeyValue (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_addKeyValue_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addKeyValue failed: unknown result');
  }

  addKeyValueRecord (key, value, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addKeyValueRecord(key, value, record, creds, transaction, environment);
    });
  }

  send_addKeyValueRecord (key, value, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_addKeyValueRecord_args(params);
    try {
      output.writeMessageBegin('addKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addKeyValueRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_addKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addKeyValueRecord failed: unknown result');
  }

  addKeyValueRecords (key, value, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addKeyValueRecords(key, value, records, creds, transaction, environment);
    });
  }

  send_addKeyValueRecords (key, value, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_addKeyValueRecords_args(params);
    try {
      output.writeMessageBegin('addKeyValueRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addKeyValueRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_addKeyValueRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addKeyValueRecords failed: unknown result');
  }

  auditRecord (record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditRecord(record, creds, transaction, environment);
    });
  }

  send_auditRecord (record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditRecord_args(params);
    try {
      output.writeMessageBegin('auditRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecord failed: unknown result');
  }

  auditRecordStart (record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditRecordStart(record, start, creds, transaction, environment);
    });
  }

  send_auditRecordStart (record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditRecordStart_args(params);
    try {
      output.writeMessageBegin('auditRecordStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditRecordStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStart failed: unknown result');
  }

  auditRecordStartstr (record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditRecordStartstr(record, start, creds, transaction, environment);
    });
  }

  send_auditRecordStartstr (record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditRecordStartstr_args(params);
    try {
      output.writeMessageBegin('auditRecordStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditRecordStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStartstr failed: unknown result');
  }

  auditRecordStartEnd (record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditRecordStartEnd(record, start, tend, creds, transaction, environment);
    });
  }

  send_auditRecordStartEnd (record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditRecordStartEnd_args(params);
    try {
      output.writeMessageBegin('auditRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditRecordStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStartEnd failed: unknown result');
  }

  auditRecordStartstrEndstr (record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditRecordStartstrEndstr(record, start, tend, creds, transaction, environment);
    });
  }

  send_auditRecordStartstrEndstr (record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditRecordStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('auditRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditRecordStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStartstrEndstr failed: unknown result');
  }

  auditKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_auditKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditKeyRecord_args(params);
    try {
      output.writeMessageBegin('auditKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecord failed: unknown result');
  }

  auditKeyRecordStart (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditKeyRecordStart(key, record, start, creds, transaction, environment);
    });
  }

  send_auditKeyRecordStart (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditKeyRecordStart_args(params);
    try {
      output.writeMessageBegin('auditKeyRecordStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditKeyRecordStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditKeyRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStart failed: unknown result');
  }

  auditKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditKeyRecordStartstr(key, record, start, creds, transaction, environment);
    });
  }

  send_auditKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditKeyRecordStartstr_args(params);
    try {
      output.writeMessageBegin('auditKeyRecordStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditKeyRecordStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditKeyRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStartstr failed: unknown result');
  }

  auditKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_auditKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditKeyRecordStartEnd_args(params);
    try {
      output.writeMessageBegin('auditKeyRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditKeyRecordStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditKeyRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStartEnd failed: unknown result');
  }

  auditKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_auditKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_auditKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_auditKeyRecordStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('auditKeyRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_auditKeyRecordStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_auditKeyRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStartstrEndstr failed: unknown result');
  }

  browseKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKey(key, creds, transaction, environment);
    });
  }

  send_browseKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKey_args(params);
    try {
      output.writeMessageBegin('browseKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKey failed: unknown result');
  }

  browseKeys (keys, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKeys(keys, creds, transaction, environment);
    });
  }

  send_browseKeys (keys, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKeys_args(params);
    try {
      output.writeMessageBegin('browseKeys', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKeys (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKeys_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeys failed: unknown result');
  }

  browseKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_browseKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKeyTime_args(params);
    try {
      output.writeMessageBegin('browseKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeyTime failed: unknown result');
  }

  browseKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_browseKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKeyTimestr_args(params);
    try {
      output.writeMessageBegin('browseKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeyTimestr failed: unknown result');
  }

  browseKeysTime (keys, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKeysTime(keys, timestamp, creds, transaction, environment);
    });
  }

  send_browseKeysTime (keys, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKeysTime_args(params);
    try {
      output.writeMessageBegin('browseKeysTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKeysTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKeysTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeysTime failed: unknown result');
  }

  browseKeysTimestr (keys, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_browseKeysTimestr(keys, timestamp, creds, transaction, environment);
    });
  }

  send_browseKeysTimestr (keys, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_browseKeysTimestr_args(params);
    try {
      output.writeMessageBegin('browseKeysTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_browseKeysTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_browseKeysTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeysTimestr failed: unknown result');
  }

  chronologizeKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_chronologizeKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_chronologizeKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_chronologizeKeyRecord_args(params);
    try {
      output.writeMessageBegin('chronologizeKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_chronologizeKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_chronologizeKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecord failed: unknown result');
  }

  chronologizeKeyRecordStart (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_chronologizeKeyRecordStart(key, record, start, creds, transaction, environment);
    });
  }

  send_chronologizeKeyRecordStart (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_chronologizeKeyRecordStart_args(params);
    try {
      output.writeMessageBegin('chronologizeKeyRecordStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_chronologizeKeyRecordStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_chronologizeKeyRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStart failed: unknown result');
  }

  chronologizeKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_chronologizeKeyRecordStartstr(key, record, start, creds, transaction, environment);
    });
  }

  send_chronologizeKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_chronologizeKeyRecordStartstr_args(params);
    try {
      output.writeMessageBegin('chronologizeKeyRecordStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_chronologizeKeyRecordStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_chronologizeKeyRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStartstr failed: unknown result');
  }

  chronologizeKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_chronologizeKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_chronologizeKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_chronologizeKeyRecordStartEnd_args(params);
    try {
      output.writeMessageBegin('chronologizeKeyRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_chronologizeKeyRecordStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_chronologizeKeyRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStartEnd failed: unknown result');
  }

  chronologizeKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_chronologizeKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_chronologizeKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_chronologizeKeyRecordStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('chronologizeKeyRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_chronologizeKeyRecordStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_chronologizeKeyRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStartstrEndstr failed: unknown result');
  }

  clearRecord (record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearRecord(record, creds, transaction, environment);
    });
  }

  send_clearRecord (record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearRecord_args(params);
    try {
      output.writeMessageBegin('clearRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  clearRecords (records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearRecords(records, creds, transaction, environment);
    });
  }

  send_clearRecords (records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearRecords_args(params);
    try {
      output.writeMessageBegin('clearRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  clearKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_clearKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearKeyRecord_args(params);
    try {
      output.writeMessageBegin('clearKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  clearKeysRecord (keys, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearKeysRecord(keys, record, creds, transaction, environment);
    });
  }

  send_clearKeysRecord (keys, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearKeysRecord_args(params);
    try {
      output.writeMessageBegin('clearKeysRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearKeysRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  clearKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_clearKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearKeyRecords_args(params);
    try {
      output.writeMessageBegin('clearKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  clearKeysRecords (keys, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_clearKeysRecords(keys, records, creds, transaction, environment);
    });
  }

  send_clearKeysRecords (keys, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_clearKeysRecords_args(params);
    try {
      output.writeMessageBegin('clearKeysRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_clearKeysRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_clearKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  commit (creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commit(creds, transaction, environment);
    });
  }

  send_commit (creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_commit_args(params);
    try {
      output.writeMessageBegin('commit', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commit (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_commit_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('commit failed: unknown result');
  }

  describe (creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describe(creds, transaction, environment);
    });
  }

  send_describe (creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describe_args(params);
    try {
      output.writeMessageBegin('describe', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describe (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describe_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describe failed: unknown result');
  }

  describeTime (timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeTime(timestamp, creds, transaction, environment);
    });
  }

  send_describeTime (timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeTime_args(params);
    try {
      output.writeMessageBegin('describeTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeTime failed: unknown result');
  }

  describeTimestr (timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeTimestr(timestamp, creds, transaction, environment);
    });
  }

  send_describeTimestr (timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeTimestr_args(params);
    try {
      output.writeMessageBegin('describeTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeTimestr failed: unknown result');
  }

  describeRecord (record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecord(record, creds, transaction, environment);
    });
  }

  send_describeRecord (record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecord_args(params);
    try {
      output.writeMessageBegin('describeRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecord failed: unknown result');
  }

  describeRecordTime (record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecordTime(record, timestamp, creds, transaction, environment);
    });
  }

  send_describeRecordTime (record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecordTime_args(params);
    try {
      output.writeMessageBegin('describeRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordTime failed: unknown result');
  }

  describeRecordTimestr (record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecordTimestr(record, timestamp, creds, transaction, environment);
    });
  }

  send_describeRecordTimestr (record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecordTimestr_args(params);
    try {
      output.writeMessageBegin('describeRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordTimestr failed: unknown result');
  }

  describeRecords (records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecords(records, creds, transaction, environment);
    });
  }

  send_describeRecords (records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecords_args(params);
    try {
      output.writeMessageBegin('describeRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecords failed: unknown result');
  }

  describeRecordsTime (records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecordsTime(records, timestamp, creds, transaction, environment);
    });
  }

  send_describeRecordsTime (records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecordsTime_args(params);
    try {
      output.writeMessageBegin('describeRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordsTime failed: unknown result');
  }

  describeRecordsTimestr (records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_describeRecordsTimestr(records, timestamp, creds, transaction, environment);
    });
  }

  send_describeRecordsTimestr (records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_describeRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('describeRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_describeRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_describeRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordsTimestr failed: unknown result');
  }

  diffRecordStart (record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffRecordStart(record, start, creds, transaction, environment);
    });
  }

  send_diffRecordStart (record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffRecordStart_args(params);
    try {
      output.writeMessageBegin('diffRecordStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffRecordStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStart failed: unknown result');
  }

  diffRecordStartstr (record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffRecordStartstr(record, start, creds, transaction, environment);
    });
  }

  send_diffRecordStartstr (record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffRecordStartstr_args(params);
    try {
      output.writeMessageBegin('diffRecordStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffRecordStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStartstr failed: unknown result');
  }

  diffRecordStartEnd (record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffRecordStartEnd(record, start, tend, creds, transaction, environment);
    });
  }

  send_diffRecordStartEnd (record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffRecordStartEnd_args(params);
    try {
      output.writeMessageBegin('diffRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffRecordStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStartEnd failed: unknown result');
  }

  diffRecordStartstrEndstr (record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffRecordStartstrEndstr(record, start, tend, creds, transaction, environment);
    });
  }

  send_diffRecordStartstrEndstr (record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffRecordStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('diffRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffRecordStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStartstrEndstr failed: unknown result');
  }

  diffKeyRecordStart (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyRecordStart(key, record, start, creds, transaction, environment);
    });
  }

  send_diffKeyRecordStart (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyRecordStart_args(params);
    try {
      output.writeMessageBegin('diffKeyRecordStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyRecordStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStart failed: unknown result');
  }

  diffKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyRecordStartstr(key, record, start, creds, transaction, environment);
    });
  }

  send_diffKeyRecordStartstr (key, record, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyRecordStartstr_args(params);
    try {
      output.writeMessageBegin('diffKeyRecordStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyRecordStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStartstr failed: unknown result');
  }

  diffKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_diffKeyRecordStartEnd (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyRecordStartEnd_args(params);
    try {
      output.writeMessageBegin('diffKeyRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyRecordStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStartEnd failed: unknown result');
  }

  diffKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
    });
  }

  send_diffKeyRecordStartstrEndstr (key, record, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyRecordStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('diffKeyRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyRecordStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStartstrEndstr failed: unknown result');
  }

  diffKeyStart (key, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyStart(key, start, creds, transaction, environment);
    });
  }

  send_diffKeyStart (key, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyStart_args(params);
    try {
      output.writeMessageBegin('diffKeyStart', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyStart (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStart failed: unknown result');
  }

  diffKeyStartstr (key, start, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyStartstr(key, start, creds, transaction, environment);
    });
  }

  send_diffKeyStartstr (key, start, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      start: start,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyStartstr_args(params);
    try {
      output.writeMessageBegin('diffKeyStartstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyStartstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStartstr failed: unknown result');
  }

  diffKeyStartEnd (key, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyStartEnd(key, start, tend, creds, transaction, environment);
    });
  }

  send_diffKeyStartEnd (key, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyStartEnd_args(params);
    try {
      output.writeMessageBegin('diffKeyStartEnd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyStartEnd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStartEnd failed: unknown result');
  }

  diffKeyStartstrEndstr (key, start, tend, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_diffKeyStartstrEndstr(key, start, tend, creds, transaction, environment);
    });
  }

  send_diffKeyStartstrEndstr (key, start, tend, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      start: start,
      tend: tend,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_diffKeyStartstrEndstr_args(params);
    try {
      output.writeMessageBegin('diffKeyStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_diffKeyStartstrEndstr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_diffKeyStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStartstrEndstr failed: unknown result');
  }

  invokePlugin (id, method, params, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_invokePlugin(id, method, params, creds, transaction, environment);
    });
  }

  send_invokePlugin (id, method, params, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      id: id,
      method: method,
      params: params,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_invokePlugin_args(params);
    try {
      output.writeMessageBegin('invokePlugin', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_invokePlugin (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_invokePlugin_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('invokePlugin failed: unknown result');
  }

  login (username, password, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_login(username, password, environment);
    });
  }

  send_login (username, password, environment) {
    const output = new this.pClass(this.output);
    const params = {
      username: username,
      password: password,
      environment: environment
    };
    const args = new ConcourseService_login_args(params);
    try {
      output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_login (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_login_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('login failed: unknown result');
  }

  logout (token, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_logout(token, environment);
    });
  }

  send_logout (token, environment) {
    const output = new this.pClass(this.output);
    const params = {
      token: token,
      environment: environment
    };
    const args = new ConcourseService_logout_args(params);
    try {
      output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_logout (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_logout_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    callback(null);
  }

  stage (token, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_stage(token, environment);
    });
  }

  send_stage (token, environment) {
    const output = new this.pClass(this.output);
    const params = {
      token: token,
      environment: environment
    };
    const args = new ConcourseService_stage_args(params);
    try {
      output.writeMessageBegin('stage', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_stage (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_stage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('stage failed: unknown result');
  }

  insertJson (json, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_insertJson(json, creds, transaction, environment);
    });
  }

  send_insertJson (json, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      json: json,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_insertJson_args(params);
    try {
      output.writeMessageBegin('insertJson', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_insertJson (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_insertJson_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('insertJson failed: unknown result');
  }

  insertJsonRecord (json, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_insertJsonRecord(json, record, creds, transaction, environment);
    });
  }

  send_insertJsonRecord (json, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      json: json,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_insertJsonRecord_args(params);
    try {
      output.writeMessageBegin('insertJsonRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_insertJsonRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_insertJsonRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('insertJsonRecord failed: unknown result');
  }

  insertJsonRecords (json, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_insertJsonRecords(json, records, creds, transaction, environment);
    });
  }

  send_insertJsonRecords (json, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      json: json,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_insertJsonRecords_args(params);
    try {
      output.writeMessageBegin('insertJsonRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_insertJsonRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_insertJsonRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('insertJsonRecords failed: unknown result');
  }

  removeKeyValueRecord (key, value, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_removeKeyValueRecord(key, value, record, creds, transaction, environment);
    });
  }

  send_removeKeyValueRecord (key, value, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_removeKeyValueRecord_args(params);
    try {
      output.writeMessageBegin('removeKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_removeKeyValueRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_removeKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('removeKeyValueRecord failed: unknown result');
  }

  removeKeyValueRecords (key, value, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_removeKeyValueRecords(key, value, records, creds, transaction, environment);
    });
  }

  send_removeKeyValueRecords (key, value, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_removeKeyValueRecords_args(params);
    try {
      output.writeMessageBegin('removeKeyValueRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_removeKeyValueRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_removeKeyValueRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('removeKeyValueRecords failed: unknown result');
  }

  setKeyValueRecord (key, value, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_setKeyValueRecord(key, value, record, creds, transaction, environment);
    });
  }

  send_setKeyValueRecord (key, value, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_setKeyValueRecord_args(params);
    try {
      output.writeMessageBegin('setKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_setKeyValueRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_setKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  setKeyValue (key, value, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_setKeyValue(key, value, creds, transaction, environment);
    });
  }

  send_setKeyValue (key, value, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_setKeyValue_args(params);
    try {
      output.writeMessageBegin('setKeyValue', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_setKeyValue (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_setKeyValue_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('setKeyValue failed: unknown result');
  }

  setKeyValueRecords (key, value, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_setKeyValueRecords(key, value, records, creds, transaction, environment);
    });
  }

  send_setKeyValueRecords (key, value, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_setKeyValueRecords_args(params);
    try {
      output.writeMessageBegin('setKeyValueRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_setKeyValueRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_setKeyValueRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  reconcileKeyRecordValues (key, record, values, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_reconcileKeyRecordValues(key, record, values, creds, transaction, environment);
    });
  }

  send_reconcileKeyRecordValues (key, record, values, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      values: values,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_reconcileKeyRecordValues_args(params);
    try {
      output.writeMessageBegin('reconcileKeyRecordValues', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_reconcileKeyRecordValues (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_reconcileKeyRecordValues_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  inventory (creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_inventory(creds, transaction, environment);
    });
  }

  send_inventory (creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_inventory_args(params);
    try {
      output.writeMessageBegin('inventory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_inventory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_inventory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('inventory failed: unknown result');
  }

  selectRecord (record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecord(record, creds, transaction, environment);
    });
  }

  send_selectRecord (record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecord_args(params);
    try {
      output.writeMessageBegin('selectRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecord failed: unknown result');
  }

  selectRecords (records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecords(records, creds, transaction, environment);
    });
  }

  send_selectRecords (records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecords_args(params);
    try {
      output.writeMessageBegin('selectRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecords failed: unknown result');
  }

  selectRecordTime (record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecordTime(record, timestamp, creds, transaction, environment);
    });
  }

  send_selectRecordTime (record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecordTime_args(params);
    try {
      output.writeMessageBegin('selectRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordTime failed: unknown result');
  }

  selectRecordTimestr (record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecordTimestr(record, timestamp, creds, transaction, environment);
    });
  }

  send_selectRecordTimestr (record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecordTimestr_args(params);
    try {
      output.writeMessageBegin('selectRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordTimestr failed: unknown result');
  }

  selectRecordsTime (records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecordsTime(records, timestamp, creds, transaction, environment);
    });
  }

  send_selectRecordsTime (records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecordsTime_args(params);
    try {
      output.writeMessageBegin('selectRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordsTime failed: unknown result');
  }

  selectRecordsTimestr (records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectRecordsTimestr(records, timestamp, creds, transaction, environment);
    });
  }

  send_selectRecordsTimestr (records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('selectRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordsTimestr failed: unknown result');
  }

  selectKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_selectKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecord_args(params);
    try {
      output.writeMessageBegin('selectKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecord failed: unknown result');
  }

  selectKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('selectKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordTime failed: unknown result');
  }

  selectKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordTimestr failed: unknown result');
  }

  selectKeysRecord (keys, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecord(keys, record, creds, transaction, environment);
    });
  }

  send_selectKeysRecord (keys, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecord_args(params);
    try {
      output.writeMessageBegin('selectKeysRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecord failed: unknown result');
  }

  selectKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecordTime_args(params);
    try {
      output.writeMessageBegin('selectKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordTime failed: unknown result');
  }

  selectKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecordTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordTimestr failed: unknown result');
  }

  selectKeysRecords (keys, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecords(keys, records, creds, transaction, environment);
    });
  }

  send_selectKeysRecords (keys, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecords_args(params);
    try {
      output.writeMessageBegin('selectKeysRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecords failed: unknown result');
  }

  selectKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_selectKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecords_args(params);
    try {
      output.writeMessageBegin('selectKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecords failed: unknown result');
  }

  selectKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('selectKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordsTime failed: unknown result');
  }

  selectKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordsTimestr failed: unknown result');
  }

  selectKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecordsTime_args(params);
    try {
      output.writeMessageBegin('selectKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordsTime failed: unknown result');
  }

  selectKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordsTimestr failed: unknown result');
  }

  selectCriteria (criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCriteria(criteria, creds, transaction, environment);
    });
  }

  send_selectCriteria (criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCriteria_args(params);
    try {
      output.writeMessageBegin('selectCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCriteria failed: unknown result');
  }

  selectCcl (ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCcl(ccl, creds, transaction, environment);
    });
  }

  send_selectCcl (ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCcl_args(params);
    try {
      output.writeMessageBegin('selectCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCcl failed: unknown result');
  }

  selectCriteriaTime (criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCriteriaTime(criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectCriteriaTime (criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCriteriaTime_args(params);
    try {
      output.writeMessageBegin('selectCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCriteriaTime failed: unknown result');
  }

  selectCriteriaTimestr (criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCriteriaTimestr(criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectCriteriaTimestr (criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('selectCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCriteriaTimestr failed: unknown result');
  }

  selectCclTime (ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCclTime(ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectCclTime (ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCclTime_args(params);
    try {
      output.writeMessageBegin('selectCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCclTime failed: unknown result');
  }

  selectCclTimestr (ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectCclTimestr(ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectCclTimestr (ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectCclTimestr_args(params);
    try {
      output.writeMessageBegin('selectCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCclTimestr failed: unknown result');
  }

  selectKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_selectKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCriteria_args(params);
    try {
      output.writeMessageBegin('selectKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCriteria failed: unknown result');
  }

  selectKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_selectKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCcl_args(params);
    try {
      output.writeMessageBegin('selectKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCcl failed: unknown result');
  }

  selectKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('selectKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCriteriaTime failed: unknown result');
  }

  selectKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCriteriaTimestr failed: unknown result');
  }

  selectKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCclTime_args(params);
    try {
      output.writeMessageBegin('selectKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCclTime failed: unknown result');
  }

  selectKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCclTimestr failed: unknown result');
  }

  selectKeysCriteria (keys, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCriteria(keys, criteria, creds, transaction, environment);
    });
  }

  send_selectKeysCriteria (keys, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCriteria_args(params);
    try {
      output.writeMessageBegin('selectKeysCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCriteria failed: unknown result');
  }

  selectKeysCcl (keys, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCcl(keys, ccl, creds, transaction, environment);
    });
  }

  send_selectKeysCcl (keys, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCcl_args(params);
    try {
      output.writeMessageBegin('selectKeysCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCcl failed: unknown result');
  }

  selectKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCriteriaTime_args(params);
    try {
      output.writeMessageBegin('selectKeysCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCriteriaTime failed: unknown result');
  }

  selectKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeysCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCriteriaTimestr failed: unknown result');
  }

  selectKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCclTime_args(params);
    try {
      output.writeMessageBegin('selectKeysCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCclTime failed: unknown result');
  }

  selectKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_selectKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_selectKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_selectKeysCclTimestr_args(params);
    try {
      output.writeMessageBegin('selectKeysCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_selectKeysCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_selectKeysCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCclTimestr failed: unknown result');
  }

  getKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_getKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecord_args(params);
    try {
      output.writeMessageBegin('getKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecord failed: unknown result');
  }

  getKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('getKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordTime failed: unknown result');
  }

  getKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('getKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordTimestr failed: unknown result');
  }

  getKeysRecord (keys, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecord(keys, record, creds, transaction, environment);
    });
  }

  send_getKeysRecord (keys, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecord_args(params);
    try {
      output.writeMessageBegin('getKeysRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecord failed: unknown result');
  }

  getKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecordTime_args(params);
    try {
      output.writeMessageBegin('getKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordTime failed: unknown result');
  }

  getKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecordTimestr_args(params);
    try {
      output.writeMessageBegin('getKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordTimestr failed: unknown result');
  }

  getKeysRecords (keys, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecords(keys, records, creds, transaction, environment);
    });
  }

  send_getKeysRecords (keys, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecords_args(params);
    try {
      output.writeMessageBegin('getKeysRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecords failed: unknown result');
  }

  getKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_getKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecords_args(params);
    try {
      output.writeMessageBegin('getKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecords failed: unknown result');
  }

  getKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('getKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordsTime failed: unknown result');
  }

  getKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('getKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordsTimestr failed: unknown result');
  }

  getKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecordsTime_args(params);
    try {
      output.writeMessageBegin('getKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordsTime failed: unknown result');
  }

  getKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('getKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordsTimestr failed: unknown result');
  }

  getKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_getKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCriteria_args(params);
    try {
      output.writeMessageBegin('getKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCriteria failed: unknown result');
  }

  getCriteria (criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCriteria(criteria, creds, transaction, environment);
    });
  }

  send_getCriteria (criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCriteria_args(params);
    try {
      output.writeMessageBegin('getCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCriteria failed: unknown result');
  }

  getCcl (ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCcl(ccl, creds, transaction, environment);
    });
  }

  send_getCcl (ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCcl_args(params);
    try {
      output.writeMessageBegin('getCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCcl failed: unknown result');
  }

  getCriteriaTime (criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCriteriaTime(criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getCriteriaTime (criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCriteriaTime_args(params);
    try {
      output.writeMessageBegin('getCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCriteriaTime failed: unknown result');
  }

  getCriteriaTimestr (criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCriteriaTimestr(criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getCriteriaTimestr (criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('getCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCriteriaTimestr failed: unknown result');
  }

  getCclTime (ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCclTime(ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getCclTime (ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCclTime_args(params);
    try {
      output.writeMessageBegin('getCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCclTime failed: unknown result');
  }

  getCclTimestr (ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCclTimestr(ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getCclTimestr (ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getCclTimestr_args(params);
    try {
      output.writeMessageBegin('getCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCclTimestr failed: unknown result');
  }

  getKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_getKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCcl_args(params);
    try {
      output.writeMessageBegin('getKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCcl failed: unknown result');
  }

  getKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('getKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCriteriaTime failed: unknown result');
  }

  getKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('getKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCriteriaTimestr failed: unknown result');
  }

  getKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCclTime_args(params);
    try {
      output.writeMessageBegin('getKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCclTime failed: unknown result');
  }

  getKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('getKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCclTimestr failed: unknown result');
  }

  getKeysCriteria (keys, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCriteria(keys, criteria, creds, transaction, environment);
    });
  }

  send_getKeysCriteria (keys, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCriteria_args(params);
    try {
      output.writeMessageBegin('getKeysCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCriteria failed: unknown result');
  }

  getKeysCcl (keys, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCcl(keys, ccl, creds, transaction, environment);
    });
  }

  send_getKeysCcl (keys, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCcl_args(params);
    try {
      output.writeMessageBegin('getKeysCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCcl failed: unknown result');
  }

  getKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCriteriaTime_args(params);
    try {
      output.writeMessageBegin('getKeysCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCriteriaTime failed: unknown result');
  }

  getKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('getKeysCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCriteriaTimestr failed: unknown result');
  }

  getKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCclTime_args(params);
    try {
      output.writeMessageBegin('getKeysCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCclTime failed: unknown result');
  }

  getKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_getKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_getKeysCclTimestr_args(params);
    try {
      output.writeMessageBegin('getKeysCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getKeysCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getKeysCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCclTimestr failed: unknown result');
  }

  verifyKeyValueRecord (key, value, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyKeyValueRecord(key, value, record, creds, transaction, environment);
    });
  }

  send_verifyKeyValueRecord (key, value, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_verifyKeyValueRecord_args(params);
    try {
      output.writeMessageBegin('verifyKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyKeyValueRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_verifyKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyKeyValueRecord failed: unknown result');
  }

  verifyKeyValueRecordTime (key, value, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyKeyValueRecordTime(key, value, record, timestamp, creds, transaction, environment);
    });
  }

  send_verifyKeyValueRecordTime (key, value, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_verifyKeyValueRecordTime_args(params);
    try {
      output.writeMessageBegin('verifyKeyValueRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyKeyValueRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_verifyKeyValueRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyKeyValueRecordTime failed: unknown result');
  }

  verifyKeyValueRecordTimestr (key, value, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyKeyValueRecordTimestr(key, value, record, timestamp, creds, transaction, environment);
    });
  }

  send_verifyKeyValueRecordTimestr (key, value, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_verifyKeyValueRecordTimestr_args(params);
    try {
      output.writeMessageBegin('verifyKeyValueRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyKeyValueRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_verifyKeyValueRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyKeyValueRecordTimestr failed: unknown result');
  }

  jsonifyRecords (records, identifier, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_jsonifyRecords(records, identifier, creds, transaction, environment);
    });
  }

  send_jsonifyRecords (records, identifier, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      identifier: identifier,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_jsonifyRecords_args(params);
    try {
      output.writeMessageBegin('jsonifyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_jsonifyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_jsonifyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('jsonifyRecords failed: unknown result');
  }

  jsonifyRecordsTime (records, timestamp, identifier, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_jsonifyRecordsTime(records, timestamp, identifier, creds, transaction, environment);
    });
  }

  send_jsonifyRecordsTime (records, timestamp, identifier, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      identifier: identifier,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_jsonifyRecordsTime_args(params);
    try {
      output.writeMessageBegin('jsonifyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_jsonifyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_jsonifyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('jsonifyRecordsTime failed: unknown result');
  }

  jsonifyRecordsTimestr (records, timestamp, identifier, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_jsonifyRecordsTimestr(records, timestamp, identifier, creds, transaction, environment);
    });
  }

  send_jsonifyRecordsTimestr (records, timestamp, identifier, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      timestamp: timestamp,
      identifier: identifier,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_jsonifyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('jsonifyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_jsonifyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_jsonifyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('jsonifyRecordsTimestr failed: unknown result');
  }

  findCriteria (criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findCriteria(criteria, creds, transaction, environment);
    });
  }

  send_findCriteria (criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findCriteria_args(params);
    try {
      output.writeMessageBegin('findCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findCriteria failed: unknown result');
  }

  findCcl (ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findCcl(ccl, creds, transaction, environment);
    });
  }

  send_findCcl (ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findCcl_args(params);
    try {
      output.writeMessageBegin('findCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findCcl failed: unknown result');
  }

  findKeyOperatorValues (key, operator, values, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorValues(key, operator, values, creds, transaction, environment);
    });
  }

  send_findKeyOperatorValues (key, operator, values, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorValues_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorValues', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorValues (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorValues_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorValues failed: unknown result');
  }

  findKeyOperatorValuesTime (key, operator, values, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment);
    });
  }

  send_findKeyOperatorValuesTime (key, operator, values, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorValuesTime_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorValuesTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorValuesTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorValuesTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorValuesTime failed: unknown result');
  }

  findKeyOperatorValuesTimestr (key, operator, values, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorValuesTimestr(key, operator, values, timestamp, creds, transaction, environment);
    });
  }

  send_findKeyOperatorValuesTimestr (key, operator, values, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorValuesTimestr_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorValuesTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorValuesTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorValuesTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorValuesTimestr failed: unknown result');
  }

  findKeyOperatorstrValues (key, operator, values, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorstrValues(key, operator, values, creds, transaction, environment);
    });
  }

  send_findKeyOperatorstrValues (key, operator, values, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorstrValues_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorstrValues', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorstrValues (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorstrValues_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorstrValues failed: unknown result');
  }

  findKeyOperatorstrValuesTime (key, operator, values, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorstrValuesTime(key, operator, values, timestamp, creds, transaction, environment);
    });
  }

  send_findKeyOperatorstrValuesTime (key, operator, values, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorstrValuesTime_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorstrValuesTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorstrValuesTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorstrValuesTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorstrValuesTime failed: unknown result');
  }

  findKeyOperatorstrValuesTimestr (key, operator, values, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findKeyOperatorstrValuesTimestr(key, operator, values, timestamp, creds, transaction, environment);
    });
  }

  send_findKeyOperatorstrValuesTimestr (key, operator, values, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      operator: operator,
      values: values,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findKeyOperatorstrValuesTimestr_args(params);
    try {
      output.writeMessageBegin('findKeyOperatorstrValuesTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findKeyOperatorstrValuesTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findKeyOperatorstrValuesTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorstrValuesTimestr failed: unknown result');
  }

  search (key, query, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_search(key, query, creds, transaction, environment);
    });
  }

  send_search (key, query, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      query: query,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_search_args(params);
    try {
      output.writeMessageBegin('search', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_search (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_search_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('search failed: unknown result');
  }

  revertKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeysRecordsTime_args(params);
    try {
      output.writeMessageBegin('revertKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeysRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  revertKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeysRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('revertKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeysRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  revertKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeysRecordTime_args(params);
    try {
      output.writeMessageBegin('revertKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeysRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  revertKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeysRecordTimestr_args(params);
    try {
      output.writeMessageBegin('revertKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeysRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  revertKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('revertKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  revertKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('revertKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  revertKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('revertKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null);
  }

  revertKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_revertKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_revertKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_revertKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('revertKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_revertKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_revertKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  pingRecords (records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_pingRecords(records, creds, transaction, environment);
    });
  }

  send_pingRecords (records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_pingRecords_args(params);
    try {
      output.writeMessageBegin('pingRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_pingRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_pingRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('pingRecords failed: unknown result');
  }

  pingRecord (record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_pingRecord(record, creds, transaction, environment);
    });
  }

  send_pingRecord (record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_pingRecord_args(params);
    try {
      output.writeMessageBegin('pingRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_pingRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_pingRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('pingRecord failed: unknown result');
  }

  verifyAndSwap (key, expected, record, replacement, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyAndSwap(key, expected, record, replacement, creds, transaction, environment);
    });
  }

  send_verifyAndSwap (key, expected, record, replacement, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      expected: expected,
      record: record,
      replacement: replacement,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_verifyAndSwap_args(params);
    try {
      output.writeMessageBegin('verifyAndSwap', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyAndSwap (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_verifyAndSwap_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyAndSwap failed: unknown result');
  }

  verifyOrSet (key, value, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyOrSet(key, value, record, creds, transaction, environment);
    });
  }

  send_verifyOrSet (key, value, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_verifyOrSet_args(params);
    try {
      output.writeMessageBegin('verifyOrSet', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyOrSet (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_verifyOrSet_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null);
  }

  findOrAddKeyValue (key, value, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findOrAddKeyValue(key, value, creds, transaction, environment);
    });
  }

  send_findOrAddKeyValue (key, value, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      value: value,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findOrAddKeyValue_args(params);
    try {
      output.writeMessageBegin('findOrAddKeyValue', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findOrAddKeyValue (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findOrAddKeyValue_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findOrAddKeyValue failed: unknown result');
  }

  findOrInsertCriteriaJson (criteria, json, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findOrInsertCriteriaJson(criteria, json, creds, transaction, environment);
    });
  }

  send_findOrInsertCriteriaJson (criteria, json, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      criteria: criteria,
      json: json,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findOrInsertCriteriaJson_args(params);
    try {
      output.writeMessageBegin('findOrInsertCriteriaJson', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findOrInsertCriteriaJson (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findOrInsertCriteriaJson_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findOrInsertCriteriaJson failed: unknown result');
  }

  findOrInsertCclJson (ccl, json, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findOrInsertCclJson(ccl, json, creds, transaction, environment);
    });
  }

  send_findOrInsertCclJson (ccl, json, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      ccl: ccl,
      json: json,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_findOrInsertCclJson_args(params);
    try {
      output.writeMessageBegin('findOrInsertCclJson', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findOrInsertCclJson (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_findOrInsertCclJson_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findOrInsertCclJson failed: unknown result');
  }

  sumKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_sumKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecord_args(params);
    try {
      output.writeMessageBegin('sumKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecord failed: unknown result');
  }

  sumKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('sumKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordTime failed: unknown result');
  }

  sumKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('sumKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordTimestr failed: unknown result');
  }

  sumKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_sumKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecords_args(params);
    try {
      output.writeMessageBegin('sumKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecords failed: unknown result');
  }

  sumKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('sumKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordsTime failed: unknown result');
  }

  sumKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('sumKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordsTimestr failed: unknown result');
  }

  sumKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKey(key, creds, transaction, environment);
    });
  }

  send_sumKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKey_args(params);
    try {
      output.writeMessageBegin('sumKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKey failed: unknown result');
  }

  sumKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyTime_args(params);
    try {
      output.writeMessageBegin('sumKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyTime failed: unknown result');
  }

  sumKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyTimestr_args(params);
    try {
      output.writeMessageBegin('sumKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyTimestr failed: unknown result');
  }

  sumKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_sumKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCriteria_args(params);
    try {
      output.writeMessageBegin('sumKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCriteria failed: unknown result');
  }

  sumKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('sumKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCriteriaTime failed: unknown result');
  }

  sumKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('sumKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCriteriaTimestr failed: unknown result');
  }

  sumKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_sumKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCcl_args(params);
    try {
      output.writeMessageBegin('sumKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCcl failed: unknown result');
  }

  sumKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCclTime_args(params);
    try {
      output.writeMessageBegin('sumKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCclTime failed: unknown result');
  }

  sumKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sumKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_sumKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_sumKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('sumKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sumKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_sumKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCclTimestr failed: unknown result');
  }

  averageKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_averageKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecord_args(params);
    try {
      output.writeMessageBegin('averageKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecord failed: unknown result');
  }

  averageKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('averageKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordTime failed: unknown result');
  }

  averageKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('averageKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordTimestr failed: unknown result');
  }

  averageKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_averageKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecords_args(params);
    try {
      output.writeMessageBegin('averageKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecords failed: unknown result');
  }

  averageKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('averageKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordsTime failed: unknown result');
  }

  averageKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('averageKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordsTimestr failed: unknown result');
  }

  averageKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKey(key, creds, transaction, environment);
    });
  }

  send_averageKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKey_args(params);
    try {
      output.writeMessageBegin('averageKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKey failed: unknown result');
  }

  averageKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyTime_args(params);
    try {
      output.writeMessageBegin('averageKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyTime failed: unknown result');
  }

  averageKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyTimestr_args(params);
    try {
      output.writeMessageBegin('averageKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyTimestr failed: unknown result');
  }

  averageKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_averageKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCriteria_args(params);
    try {
      output.writeMessageBegin('averageKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCriteria failed: unknown result');
  }

  averageKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('averageKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCriteriaTime failed: unknown result');
  }

  averageKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('averageKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCriteriaTimestr failed: unknown result');
  }

  averageKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_averageKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCcl_args(params);
    try {
      output.writeMessageBegin('averageKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCcl failed: unknown result');
  }

  averageKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCclTime_args(params);
    try {
      output.writeMessageBegin('averageKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCclTime failed: unknown result');
  }

  averageKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_averageKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_averageKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_averageKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('averageKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_averageKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_averageKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCclTimestr failed: unknown result');
  }

  countKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_countKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecord_args(params);
    try {
      output.writeMessageBegin('countKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecord failed: unknown result');
  }

  countKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('countKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordTime failed: unknown result');
  }

  countKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('countKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordTimestr failed: unknown result');
  }

  countKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_countKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecords_args(params);
    try {
      output.writeMessageBegin('countKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecords failed: unknown result');
  }

  countKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('countKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordsTime failed: unknown result');
  }

  countKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('countKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordsTimestr failed: unknown result');
  }

  countKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKey(key, creds, transaction, environment);
    });
  }

  send_countKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKey_args(params);
    try {
      output.writeMessageBegin('countKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKey failed: unknown result');
  }

  countKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyTime_args(params);
    try {
      output.writeMessageBegin('countKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyTime failed: unknown result');
  }

  countKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyTimestr_args(params);
    try {
      output.writeMessageBegin('countKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyTimestr failed: unknown result');
  }

  countKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_countKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCriteria_args(params);
    try {
      output.writeMessageBegin('countKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCriteria failed: unknown result');
  }

  countKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('countKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCriteriaTime failed: unknown result');
  }

  countKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('countKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCriteriaTimestr failed: unknown result');
  }

  countKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_countKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCcl_args(params);
    try {
      output.writeMessageBegin('countKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCcl failed: unknown result');
  }

  countKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCclTime_args(params);
    try {
      output.writeMessageBegin('countKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCclTime failed: unknown result');
  }

  countKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_countKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_countKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_countKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('countKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_countKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_countKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCclTimestr failed: unknown result');
  }

  maxKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_maxKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecord_args(params);
    try {
      output.writeMessageBegin('maxKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecord failed: unknown result');
  }

  maxKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('maxKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordTime failed: unknown result');
  }

  maxKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('maxKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordTimestr failed: unknown result');
  }

  maxKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_maxKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecords_args(params);
    try {
      output.writeMessageBegin('maxKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecords failed: unknown result');
  }

  maxKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('maxKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordsTime failed: unknown result');
  }

  maxKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('maxKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordsTimestr failed: unknown result');
  }

  maxKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_maxKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCriteria_args(params);
    try {
      output.writeMessageBegin('maxKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCriteria failed: unknown result');
  }

  maxKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('maxKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCriteriaTime failed: unknown result');
  }

  maxKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('maxKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCriteriaTimestr failed: unknown result');
  }

  maxKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_maxKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCcl_args(params);
    try {
      output.writeMessageBegin('maxKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCcl failed: unknown result');
  }

  maxKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCclTime_args(params);
    try {
      output.writeMessageBegin('maxKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCclTime failed: unknown result');
  }

  maxKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('maxKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCclTimestr failed: unknown result');
  }

  maxKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKey(key, creds, transaction, environment);
    });
  }

  send_maxKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKey_args(params);
    try {
      output.writeMessageBegin('maxKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKey failed: unknown result');
  }

  maxKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyTime_args(params);
    try {
      output.writeMessageBegin('maxKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyTime failed: unknown result');
  }

  maxKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_maxKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_maxKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_maxKeyTimestr_args(params);
    try {
      output.writeMessageBegin('maxKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_maxKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_maxKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyTimestr failed: unknown result');
  }

  minKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_minKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecord_args(params);
    try {
      output.writeMessageBegin('minKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecord failed: unknown result');
  }

  minKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('minKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordTime failed: unknown result');
  }

  minKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('minKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordTimestr failed: unknown result');
  }

  minKey (key, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKey(key, creds, transaction, environment);
    });
  }

  send_minKey (key, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKey_args(params);
    try {
      output.writeMessageBegin('minKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKey failed: unknown result');
  }

  minKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('minKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordsTime failed: unknown result');
  }

  minKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('minKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordsTimestr failed: unknown result');
  }

  minKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_minKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCriteria_args(params);
    try {
      output.writeMessageBegin('minKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCriteria failed: unknown result');
  }

  minKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('minKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCriteriaTime failed: unknown result');
  }

  minKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('minKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCriteriaTimestr failed: unknown result');
  }

  minKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_minKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCcl_args(params);
    try {
      output.writeMessageBegin('minKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCcl failed: unknown result');
  }

  minKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCclTime_args(params);
    try {
      output.writeMessageBegin('minKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCclTime failed: unknown result');
  }

  minKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('minKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCclTimestr failed: unknown result');
  }

  minKeyTime (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyTime(key, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyTime (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyTime_args(params);
    try {
      output.writeMessageBegin('minKeyTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyTime failed: unknown result');
  }

  minKeyTimestr (key, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyTimestr(key, timestamp, creds, transaction, environment);
    });
  }

  send_minKeyTimestr (key, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyTimestr_args(params);
    try {
      output.writeMessageBegin('minKeyTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyTimestr failed: unknown result');
  }

  minKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_minKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_minKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_minKeyRecords_args(params);
    try {
      output.writeMessageBegin('minKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_minKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_minKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecords failed: unknown result');
  }

  navigateKeyRecord (key, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecord(key, record, creds, transaction, environment);
    });
  }

  send_navigateKeyRecord (key, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecord_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecord failed: unknown result');
  }

  navigateKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyRecordTime (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecordTime_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordTime failed: unknown result');
  }

  navigateKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyRecordTimestr (key, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecordTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordTimestr failed: unknown result');
  }

  navigateKeysRecord (keys, record, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecord(keys, record, creds, transaction, environment);
    });
  }

  send_navigateKeysRecord (keys, record, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecord_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecord', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecord (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecord failed: unknown result');
  }

  navigateKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysRecordTime (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecordTime_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecordTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordTime failed: unknown result');
  }

  navigateKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysRecordTimestr (keys, record, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      record: record,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecordTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecordTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordTimestr failed: unknown result');
  }

  navigateKeysRecords (keys, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecords(keys, records, creds, transaction, environment);
    });
  }

  send_navigateKeysRecords (keys, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecords_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecords failed: unknown result');
  }

  navigateKeyRecords (key, records, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecords(key, records, creds, transaction, environment);
    });
  }

  send_navigateKeyRecords (key, records, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecords_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecords', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecords (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecords failed: unknown result');
  }

  navigateKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyRecordsTime (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecordsTime_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordsTime failed: unknown result');
  }

  navigateKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyRecordsTimestr (key, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordsTimestr failed: unknown result');
  }

  navigateKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysRecordsTime (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecordsTime_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecordsTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordsTime failed: unknown result');
  }

  navigateKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysRecordsTimestr (keys, records, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      records: records,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysRecordsTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysRecordsTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordsTimestr failed: unknown result');
  }

  navigateKeyCcl (key, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCcl(key, ccl, creds, transaction, environment);
    });
  }

  send_navigateKeyCcl (key, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCcl_args(params);
    try {
      output.writeMessageBegin('navigateKeyCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCcl failed: unknown result');
  }

  navigateKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyCclTime (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCclTime_args(params);
    try {
      output.writeMessageBegin('navigateKeyCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCclTime failed: unknown result');
  }

  navigateKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyCclTimestr (key, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCclTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCclTimestr failed: unknown result');
  }

  navigateKeysCcl (keys, ccl, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCcl(keys, ccl, creds, transaction, environment);
    });
  }

  send_navigateKeysCcl (keys, ccl, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCcl_args(params);
    try {
      output.writeMessageBegin('navigateKeysCcl', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCcl (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCcl failed: unknown result');
  }

  navigateKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysCclTime (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCclTime_args(params);
    try {
      output.writeMessageBegin('navigateKeysCclTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCclTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCclTime failed: unknown result');
  }

  navigateKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysCclTimestr (keys, ccl, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      ccl: ccl,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCclTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeysCclTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCclTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCclTimestr failed: unknown result');
  }

  navigateKeyCriteria (key, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCriteria(key, criteria, creds, transaction, environment);
    });
  }

  send_navigateKeyCriteria (key, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCriteria_args(params);
    try {
      output.writeMessageBegin('navigateKeyCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCriteria failed: unknown result');
  }

  navigateKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyCriteriaTime (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCriteriaTime_args(params);
    try {
      output.writeMessageBegin('navigateKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCriteriaTime failed: unknown result');
  }

  navigateKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeyCriteriaTimestr (key, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      key: key,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeyCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeyCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCriteriaTimestr failed: unknown result');
  }

  navigateKeysCriteria (keys, criteria, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCriteria(keys, criteria, creds, transaction, environment);
    });
  }

  send_navigateKeysCriteria (keys, criteria, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCriteria_args(params);
    try {
      output.writeMessageBegin('navigateKeysCriteria', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCriteria (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCriteria failed: unknown result');
  }

  navigateKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysCriteriaTime (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCriteriaTime_args(params);
    try {
      output.writeMessageBegin('navigateKeysCriteriaTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCriteriaTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCriteriaTime failed: unknown result');
  }

  navigateKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_navigateKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
    });
  }

  send_navigateKeysCriteriaTimestr (keys, criteria, timestamp, creds, transaction, environment) {
    const output = new this.pClass(this.output);
    const params = {
      keys: keys,
      criteria: criteria,
      timestamp: timestamp,
      creds: creds,
      transaction: transaction,
      environment: environment
    };
    const args = new ConcourseService_navigateKeysCriteriaTimestr_args(params);
    try {
      output.writeMessageBegin('navigateKeysCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_navigateKeysCriteriaTimestr (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_navigateKeysCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCriteriaTimestr failed: unknown result');
  }

  getServerEnvironment (creds, token, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getServerEnvironment(creds, token, environment);
    });
  }

  send_getServerEnvironment (creds, token, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      token: token,
      environment: environment
    };
    const args = new ConcourseService_getServerEnvironment_args(params);
    try {
      output.writeMessageBegin('getServerEnvironment', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getServerEnvironment (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getServerEnvironment_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getServerEnvironment failed: unknown result');
  }

  getServerVersion () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getServerVersion();
    });
  }

  send_getServerVersion () {
    const output = new this.pClass(this.output);
    const args = new ConcourseService_getServerVersion_args();
    try {
      output.writeMessageBegin('getServerVersion', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getServerVersion (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_getServerVersion_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getServerVersion failed: unknown result');
  }

  time (creds, token, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_time(creds, token, environment);
    });
  }

  send_time (creds, token, environment) {
    const output = new this.pClass(this.output);
    const params = {
      creds: creds,
      token: token,
      environment: environment
    };
    const args = new ConcourseService_time_args(params);
    try {
      output.writeMessageBegin('time', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_time (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_time_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('time failed: unknown result');
  }

  timePhrase (phrase, creds, token, environment) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_timePhrase(phrase, creds, token, environment);
    });
  }

  send_timePhrase (phrase, creds, token, environment) {
    const output = new this.pClass(this.output);
    const params = {
      phrase: phrase,
      creds: creds,
      token: token,
      environment: environment
    };
    const args = new ConcourseService_timePhrase_args(params);
    try {
      output.writeMessageBegin('timePhrase', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_timePhrase (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_timePhrase_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('timePhrase failed: unknown result');
  }

  invokeManagement (method, params, creds) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_invokeManagement(method, params, creds);
    });
  }

  send_invokeManagement (method, params, creds) {
    const output = new this.pClass(this.output);
    const params = {
      method: method,
      params: params,
      creds: creds
    };
    const args = new ConcourseService_invokeManagement_args(params);
    try {
      output.writeMessageBegin('invokeManagement', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_invokeManagement (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ConcourseService_invokeManagement_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('invokeManagement failed: unknown result');
  }
};

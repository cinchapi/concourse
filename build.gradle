task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

def getVersion = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'bash', 'version.sh'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext.globalVersion  = getVersion()

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.nisgits.gradle:gradle-executable-jar-plugin:1.7.0'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    repositories {
       mavenCentral()
       mavenLocal()
    }

    dependencies {
	compile 'com.google.guava:guava:15.0'
	compile 'org.mockito:mockito-all:1.9.5'
	compile 'commons-codec:commons-codec:1.8'
	compile 'com.google.code.findbugs:jsr305:2.0.1'
	compile 'org.slf4j:slf4j-api:1.7.5'
	compile 'ch.qos.logback:logback-classic:1.0.13'
	compile 'joda-time:joda-time:2.2'
	compile 'com.intellij:annotations:12.0'
	compile 'org.apache.thrift:libthrift:0.9.2'
	compile 'commons-configuration:commons-configuration:1.9'

	testCompile 'junit:junit:4.11'
   }

    group = 'org.cinchapi'
    version = globalVersion

    jar {
        manifest {
            attributes("Specificiation-Title": "Concourse", "Specificiation-Version": version, "Implementation-Version": version)
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
    	classifier = 'sources'
    	from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
    	classifier = 'javadoc'
    	from javadoc.destinationDir
    }

    artifacts {
    	archives sourcesJar
    	archives javadocJar
    }

    test {
        exclude '**/*Suite.class'
    }

}

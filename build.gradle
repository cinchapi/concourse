/*
 * Copyright (c) 2013-2016 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// To upgrade:
// 1. Take a backup of gradlew because there is custom logic there that must
//    be preserved
// 2. Change gradleVersion here
// 3. Change the distributionUrl in gradle/wrapper/gradle-wrapper.properties
// 4. Run ./gradlew wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

// The project version is controlled externally by the "version.sh" script.
def getVersion = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'bash', 'version.sh'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext.globalVersion  = getVersion()
ext.isWindows = System.getProperty("os.name").toLowerCase().contains("windows")

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.nisgits.gradle:gradle-executable-jar-plugin:1.7.0'
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            url  'http://cinchapi.bintray.com/maven'
        }
    }

    configurations {
        all*.exclude group: 'org.cinchapi', module: 'concourse'
        all*.exclude group: 'com.google.code.findbugs', module: 'annotations'
    }

    dependencies {
        compile 'com.google.guava:guava:18.0'
        compile 'org.mockito:mockito-all:1.9.5'
        compile 'commons-codec:commons-codec:1.8'
        compile 'com.google.code.findbugs:jsr305:2.0.1'
        compile 'org.slf4j:slf4j-api:1.7.5'
        compile 'ch.qos.logback:logback-classic:1.0.13'
        compile 'joda-time:joda-time:2.2'
        compile 'org.apache.thrift:libthrift:0.9.3'
        compile 'commons-configuration:commons-configuration:1.9'
        compile group: 'com.cinchapi', name: 'accent4j', version: '1.0.0-SNAPSHOT', changing:true

        testCompile 'junit:junit:4.11'
    }

    group = 'com.cinchapi'
    version = globalVersion

    jar {
        manifest {
            attributes("Specificiation-Title": "Concourse", "Specificiation-Version": version, "Implementation-Version": version)
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        exclude "**/thrift/**"
        options.windowTitle 'Concourse Java Driver API'
        options.noQualifiers 'all'
        options.links 'https://docs.oracle.com/javase/7/docs/api/'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    test {
        exclude '**/*Suite.class'
    }

    // THESE PROPERTIES SHOULD BE OVERRIDDEN BY EACH SUBPROJECT!
    ext.uploadEnabled = false // Controls if artifacts are uploaded to Maven
    ext.title = "Concourse" // The project's vanity title
    ext.description = "Default" // A short description about the project
    afterEvaluate { project ->
        if(ext.uploadEnabled){ // Configure subprojects that should be uploaded
                                // to Maven
            def mavenTitle = ext.title
            def mavenDescription = ext.description

            uploadArchives {
                repositories {
                    mavenDeployer {
                        beforeDeployment {
                            MavenDeployment deployment -> signing.signPom(deployment)
                        }
                        // Drop the build component from version number and use
                        // that in the POM file
                        def _version = project.version.split('\\.')
                        _version[3] = _version[3].replaceAll("[0-9]+-", "-")
                        _version[3] = _version[3].replaceAll("[0-9]+", "").trim()
                        _version = _version.join(".").replace(".-", "-").replaceAll('\\.$', "")
                        pom.version = _version
                        pom.project {
                            name mavenTitle
                            description mavenDescription
                            packaging 'jar'

                            scm {
                                url 'git@github.com:cinchapi/concourse.git'
                                connection 'git@github.com:cinchapi/concourse.git'
                                developerConnection 'git@github.com:cinchapi/concourse.git'
                            }

                            licenses {
                                license {
                                    name 'The Apache License'
                                    url 'http://opensource.org/licenses/Apache-2.0'
                                    distribution 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id 'jnelson'
                                    name 'Jeff Nelson'
                                }
                            }
                        }
                        // Edit the generated POM to set the dependency version
                        // for any Cinchapi projects to be the version that is
                        // configured in the project's POM (X.Y.Z[-SNAPSHOT])
                        // instead of the fully qualified version used when
                        // labeling the jar distributed with the server
                        // (X.Y.Z.B[-SNAPSHOT]).
                        pom.withXml {
                            asNode().dependencies.first().each {
                                def groupId = it.get("groupId").first().value().first()
                                def artifactId = it.get("artifactId").first().value().first()
                                if(groupId.equals("com.cinchapi") && artifactId.startsWith("concourse")) {
                                    it.get("version").first().value = pom.version
                                }
                            }
                        }
                        def mavenUrl = pom.version.matches('^[0-9]+\\.[0-9]+\\.[0-9]+(-rc[0-9]+){0,1}$') ? 'https://oss.sonatype.org/service/local/staging/deploy/maven2' : 'https://oss.sonatype.org/content/repositories/snapshots'
                        repository(url: mavenUrl) {
                            authentication(userName: sonatypeUsername, password: sonatypePassword)
                        }
                    }
                }
            }
        }
    }
}

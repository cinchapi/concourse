<?php
namespace concourse\thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * The interface definition for the Concourse Server API.
 */
interface ConcourseServiceIf {
  /**
   * Abort the current transaction and discard any changes that are
   * currently staged.
   * <p>
   * After returning, the driver will return to {@code autocommit} mode and
   * all subsequent changes will be committed immediately.
   * </p>
   * <p>
   * Calling this method when the driver is not in {@code staging} mode is a
   * no-op.
   * </p>
   * @param record the id of the record in which an attempt is made to add
   *                 the data
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @throws exceptions.SecurityException if the {@code creds} don't represent a
   *         valid session
   * 
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   */
  public function abort(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Append {@code key} as {@code value} in a new record.
   * 
   * @param key the field name
   * @param value the value to add
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return the new record id
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.InvalidArgumentException if any of provided data
   *         can't be stored
   * 
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function addKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Append {@code key} as {@code value} in {@code record}.
   * 
   * @param key the field name
   * @param value the value to add
   * @param record the record id where an attempt is made to add the data
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a bool that indicates if the data was added
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.InvalidArgumentException if any of provided data
   *         can't be stored
   * 
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function addKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Append {@code key} as {@code value} in each of the {@code records} where it
   * doesn't exist.
   * 
   * @param key the field name
   * @param value the value to add
   * @param records a list of record ids where an attempt is made to add the
   *                  data
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a mapping from each record id to a boolean that indicates if the
   *                   data was added
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.InvalidArgumentException if any of provided data
   *         can't be stored
   * 
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function addKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes ever made to {@code record}.
   * 
   * @param record the record id
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *                  revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to {@code record} since {@code start}
   * (inclusive).
   * 
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *                  revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to {@code record} since {@code start}
   * (inclusive).
   * 
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *                  revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int $record
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function auditRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to {@code record} between {@code start}
   * (inclusive) and {@code end} (non-inclusive).
   * 
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param end a non-inclusive timestamp that for the most recent recent
   *              change that should possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to {@code record} between {@code start}
   * (inclusive) and {@code end} (non-inclusive).
   * 
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param end a non-inclusive timestamp that for the most recent recent
   *              change that should possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function auditRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes ever made to the {@code key} field in {@code record}.
   * 
   * @param key the field name
   * @param record the record id
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to the {@code key} field in {@code record} since
   * {@code start} (inclusive).
   * 
   * @param key the field name
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to the {@code key} field in {@code record} since
   * {@code start} (inclusive).
   * 
   * @param key the field name
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function auditKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to the {@code key} field in {@code record}
   * between {@code start} (inclusive) and {@code end} (non-inclusive).
   * 
   * @param key the field name
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param end a non-inclusive timestamp that for the most recent change that
   *              should possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to the {@code key} field in {@code record}
   * between {@code start} (inclusive) and {@code end} (non-inclusive).
   * 
   * @param key the field name
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param end a non-inclusive timestamp that for the most recent recent
   *              change that should possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function auditKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that are currently stored for {@code key}.
   * 
   * @param keys the field name
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each value to the {@link Set} of records
   *         that contain that value in the {@code key} field
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function browseKey($key, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that are currently stored for each of the
   * {@code keys}.
   * 
   * @param keys a list of field names
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each key to a {@link Map} associating
   *         each value to the set of records that contain that value in the
   *         {@code key} field
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string[] $keys
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function browseKeys(array $keys, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that were stored for {@code key} at
   * {@code timestamp}.
   * 
   * @param keys the field name
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each value to the {@link Set} of records
   *         that contained that value in the {@code key} field at {@code
   *         timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function browseKeyTime($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that were stored for {@code key} at
   * {@code timestamp}.
   * 
   * @param keys the field name
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each value to the {@link Set} of records
   *         that contained that value in the {@code key} field at {@code
   *         timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function browseKeyTimestr($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that were stored for each of the
   * {@code keys} at {@code timestamp}.
   * 
   * @param keys a list of field names
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each key to a {@link Map} associating
   *         each value to the {@link Set} of records that contained that value
   *         in the {@code key} field at {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string[] $keys
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function browseKeysTime(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that were stored for each of the
   * {@code keys} at {@code timestamp}.
   * 
   * @param keys a list of field names
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each key to a {@link Map} associating
   *         each value to the {@link Set} of records that contained that value
   *         in the {@code key} field at {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string[] $keys
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function browseKeysTimestr(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View a time series that associates the timestamp of each modification for
   * {@code key} in {@code record} to a snapshot containing the values that
   * were stored in the field after the change.
   * 
   * @param key the field name
   * @param record the record id
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each modification timestamp to the
   *         {@link Set} of values that were stored in the field after the
   *         change.
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function chronologizeKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View a time series between {@code start} (inclusive) and the present that
   * associates the timestamp of each modification for {@code key} in
   * {@code record} to a snapshot containing the values that
   * were stored in the field after the change.
   * 
   * @param key the field name
   * @param record the record id
   * @param start the first possible {@link Timestamp} to include in the
   *            time series
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each modification timestamp to the
   *         {@link Set} of values that were stored in the field after the
   *         change.
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function chronologizeKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View a time series between {@code start} (inclusive) and the present that
   * associates the timestamp of each modification for {@code key} in
   * {@code record} to a snapshot containing the values that
   * were stored in the field after the change.
   * 
   * @param key the field name
   * @param record the record id
   * @param start the first possible {@link Timestamp} to include in the
   *            time series
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each modification timestamp to the
   *         {@link Set} of values that were stored in the field after the
   *         change.
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function chronologizeKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View a time series between {@code start} (inclusive) and {@code end}
   * (non-inclusive) that associates the timestamp of each modification for
   * {@code key} in {@code record} to a snapshot containing the values that
   * were stored in the field after the change.
   * 
   * @param key the field name
   * @param record the record id
   * @param start the first possible {@link Timestamp} to include in the
   *            time series
   * @param end the {@link Timestamp} that should be greater than every
   *            timestamp in the time series
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each modification timestamp to the
   *         {@link Set} of values that were stored in the field after the
   *         change.
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View a time series between {@code start} (inclusive) and {@code end}
   * (non-inclusive) that associates the timestamp of each modification for
   * {@code key} in {@code record} to a snapshot containing the values that
   * were stored in the field after the change.
   * 
   * @param key the field name
   * @param record the record id
   * @param start the first possible {@link Timestamp} to include in the
   *            time series
   * @param end the {@link Timestamp} that should be greater than every
   *            timestamp in the time series
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each modification timestamp to the
   *         {@link Set} of values that were stored in the field after the
   *         change.
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Attempt to permanently commit any changes that are staged in a transaction
   * and return {@code true} if and only if all the changes can be applied.
   * Otherwise, returns {@code false} and all the changes are discarded.
   * <p>
   * After returning, the driver will return to {@code autocommit} mode and
   * all subsequent changes will be committed immediately.
   * </p>
   * <p>
   * This method will return {@code false} if it is called when the driver is
   * not in {@code staging} mode.
   * </p>
   * 
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return {@code true} if all staged changes are committed, otherwise {@code
   *                      false}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function commit(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the keys in {@code record} that have at least one value.
   * 
   * @param record the record id
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return the {@link Set} of keys in {@code record}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function describeRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the keys in {@code record} that had at least one value at
   * {@code timestamp}.
   * 
   * @param record the record id
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return the {@link Set} of keys that were in {@code record} at
   *         {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function describeRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the keys in {@code record} that have at least one value.
   * 
   * @param record the record id
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return the {@link Set} of keys that were in {@code record} at
   *         {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function describeRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * For each of the {@code records}, list all of the keys that have at least
   * one value.
   * 
   * @param records a collection of record ids
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each record id to the {@link Set} of
   *         keys in that record
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function describeRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * For each of the {@code records}, list all the keys that had at least one
   * value at {@code timestamp}.
   * 
   * @param records a collection of record ids
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each record id to the {@link Set} of
   *         keys that were in that record at {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function describeRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * For each of the {@code records}, list all the keys that had at least one
   * value at {@code timestamp}.
   * 
   * @param records a collection of record ids
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each record id to the {@link Set} of
   *         keys that were in that record at {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function describeRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code record} since {@code start}.
   * 
   * <p>
   * If you begin with the state of the {@code record} at {@code start} and
   * re-apply all the changes in the diff, you'll re-create the state of the
   * {@code record} at the present.
   * </p>
   * 
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each key in the {@code record} to
   *         another {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {"key": {ADDED: ["value1", "value2"], REMOVED: ["value3",
   *         "value4"]}}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code record} since {@code start}.
   * 
   * <p>
   * If you begin with the state of the {@code record} at {@code start} and
   * re-apply all the changes in the diff, you'll re-create the state of the
   * {@code record} at the present.
   * </p>
   * 
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each key in the {@code record} to
   *         another {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {"key": {ADDED: ["value1", "value2"], REMOVED: ["value3",
   *         "value4"]}}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int $record
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code record} from {@code start} to
   * {@code end}.
   * 
   * <p>
   * If you begin with the state of the {@code record} at {@code start} and
   * re-apply all the changes in the diff, you'll re-create the state of the
   * {@code record} at {@code end}.
   * </p>
   * 
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each key in the {@code record} to
   *         another {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {"key": {ADDED: ["value1", "value2"], REMOVED: ["value3",
   *         "value4"]}}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code record} from {@code start} to
   * {@code end}.
   * 
   * <p>
   * If you begin with the state of the {@code record} at {@code start} and
   * re-apply all the changes in the diff, you'll re-create the state of the
   * {@code record} at {@code end}.
   * </p>
   * 
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each key in the {@code record} to
   *         another {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {"key": {ADDED: ["value1", "value2"], REMOVED: ["value3",
   *         "value4"]}}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code key} in {@code record} since
   * {@code start}.
   * 
   * <p>
   * If you begin with the state of the field at {@code start} and re-apply
   * all the changes in the diff, you'll re-create the state of the field at
   * the present.
   * </p>
   * 
   * @param key the field name
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {ADDED: ["value1", "value2"], REMOVED: ["value3", "value4"]}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code key} in {@code record} since
   * {@code start}.
   * 
   * <p>
   * If you begin with the state of the field at {@code start} and re-apply
   * all the changes in the diff, you'll re-create the state of the field at
   * the present.
   * </p>
   * 
   * @param key the field name
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {ADDED: ["value1", "value2"], REMOVED: ["value3", "value4"]}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code key} in {@code record} from
   * {@code start} to {@code end}.
   * 
   * <p>
   * If you begin with the state of the field at {@code start} and re-apply
   * all the changes in the diff, you'll re-create the state of the field at
   * {@code end}.
   * </p>
   * 
   * @param key the field name
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {ADDED: ["value1", "value2"], REMOVED: ["value3", "value4"]}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code key} in {@code record} from
   * {@code start} to {@code end}.
   * 
   * <p>
   * If you begin with the state of the field at {@code start} and re-apply
   * all the changes in the diff, you'll re-create the state of the field at
   * {@code end}.
   * </p>
   * 
   * @param key the field name
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {ADDED: ["value1", "value2"], REMOVED: ["value3", "value4"]}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to the {@code key} field across all records
   * since {@code start}.
   * 
   * <p>
   * If you begin with the state of an inverted index for {@code key} at
   * {@code start} and re-apply all the changes in the diff, you'll re-create
   * the state of the same index at the present.
   * </p>
   * 
   * @param key the field name
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each value stored for {@code key}
   *         across all records to another {@link Map} that associates a
   *         {@link Diff change description} to the {@link Set} of records
   *         where the description applies to that value in the {@code key}
   *         field (i.e. <code>
   *         {"value1": {ADDED: [1, 2], REMOVED: [3, 4]}}
   *         </code>)
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffKeyStart($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to the {@code key} field across all records
   * since {@code start}.
   * 
   * <p>
   * If you begin with the state of an inverted index for {@code key} at
   * {@code start} and re-apply all the changes in the diff, you'll re-create
   * the state of the same index at the present.
   * </p>
   * 
   * @param key the field name
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each value stored for {@code key}
   *         across all records to another {@link Map} that associates a
   *         {@link Diff change description} to the {@link Set} of records
   *         where the description applies to that value in the {@code key}
   *         field (i.e. <code>
   *         {"value1": {ADDED: [1, 2], REMOVED: [3, 4]}}
   *         </code>)
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffKeyStartstr($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to the {@code key} field across all records
   * from {@code start} to {@code end}.
   * 
   * <p>
   * If you begin with the state of an inverted index for {@code key} at
   * {@code start} and re-apply all the changes in the diff, you'll re-create
   * the state of the same index at {@code end}.
   * </p>
   * 
   * @param key the field name
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each value stored for {@code key}
   *         across all records to another {@link Map} that associates a
   *         {@link Diff change description} to the {@link Set} of records
   *         where the description applies to that value in the {@code key}
   *         field (i.e. <code>
   *         {"value1": {ADDED: [1, 2], REMOVED: [3, 4]}}
   *         </code>)
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffKeyStartEnd($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to the {@code key} field across all records
   * from {@code start} to {@code end}.
   * 
   * <p>
   * If you begin with the state of an inverted index for {@code key} at
   * {@code start} and re-apply all the changes in the diff, you'll re-create
   * the state of the same index at {@code end}.
   * </p>
   * 
   * @param key the field name
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each value stored for {@code key}
   *         across all records to another {@link Map} that associates a
   *         {@link Diff change description} to the {@link Set} of records
   *         where the description applies to that value in the {@code key}
   *         field (i.e. <code>
   *         {"value1": {ADDED: [1, 2], REMOVED: [3, 4]}}
   *         </code>)
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffKeyStartstrEndstr($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Attempt to authenticate the user identified by the {@code username} and
   * {@code password} combination to the specified {@code environment}. If
   * successful, establish a new session within the {@code environment} on
   * behalf of that user and return an {@link shared.AccessToken}, which is
   * required for all subsequent operations.
   * 
   * <p>
   * The AccessToken <em>may</em> expire after a while so clients should be
   * prepared to seamlessly login again for active user sessions.
   * </p>
   * 
   * @param username a binary representation of the UTF-8 encoded username
   * @param password a binary representation of the UTF-8 encoded password
   * @param environment the name of the environment into which to login
   * @return an {@link shared.AccessToken} to submit with all subsequent method
   *         calls
   * @throws exceptions.SecurityException if the login is not successful
   * 
   * @param string $username
   * @param string $password
   * @param string $environment
   * @return \concourse\thrift\shared\AccessToken A temporary token that is returned by the
   * {@link ConcourseService#login(String, String)} method to grant access
   * to secure resources in place of raw credentials.
   * 
   * @throws \concourse\thrift\exceptions\SecurityException
   */
  public function login($username, $password, $environment);
  /**
   * Terminate the session within {@code environment} for the user represented
   * by the {@code token}. Afterwards, all other attempts to use {@code token}
   * will result in a {@link exceptions.SecurityException} being thrown.
   * 
   * @param token the {@link shared.AccessToken to expire}
   * @param environment the environment of the session represented by the
   *                    {@code token}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * 
   * @param \concourse\thrift\shared\AccessToken $token
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   */
  public function logout(\concourse\thrift\shared\AccessToken $token, $environment);
  /**
   * Start a new transaction.
   * <p>
   * This method will turn on STAGING mode so that all subsequent changes are
   * collected in an isolated buffer before possibly being committed to the
   * database. Staged operations are guaranteed to be reliable, all or nothing
   * units of work that allow correct recovery from failures and provide
   * isolation between clients so the database is always in a consistent state.
   * </p>
   * <p>
   * After this method returns, all subsequent operations will be done in
   * {@code staging} mode until either #abort(shared.AccessToken) or
   * #commit(shared.AccessToken) is called.
   * </p>
   * 
   * @param token
   * @param environment
   * @return TransactionToken
   * @throws TSecurityException
   * 
   * @param \concourse\thrift\shared\AccessToken $token
   * @param string $environment
   * @return \concourse\thrift\shared\TransactionToken A token that identifies a Transaction.
   * 
   * @throws \concourse\thrift\exceptions\SecurityException
   */
  public function stage(\concourse\thrift\shared\AccessToken $token, $environment);
  /**
   * @param string $json
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function insertJson($json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $json
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function insertJsonRecord($json, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $json
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function insertJsonRecords($json, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function removeKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function removeKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function setKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function setKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function setKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function inventory(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function verifyKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function verifyKeyValueRecordTime($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function verifyKeyValueRecordTimestr($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param bool $identifier
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function jsonifyRecords(array $records, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param int $timestamp
   * @param bool $identifier
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function jsonifyRecordsTime(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param string $timestamp
   * @param bool $identifier
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function jsonifyRecordsTimestr(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function findCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function findCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function findKeyOperatorValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function findKeyOperatorValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function findKeyOperatorstrValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function findKeyOperatorstrValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function findKeyOperatorstrValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $query
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function search($key, $query, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function revertKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function revertKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function revertKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function revertKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function revertKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function revertKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function revertKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function revertKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function pingRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function pingRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $expected
   * @param int $record
   * @param \concourse\thrift\data\TObject $replacement
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function verifyAndSwap($key, \concourse\thrift\data\TObject $expected, $record, \concourse\thrift\data\TObject $replacement, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function verifyOrSet($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\DuplicateEntryException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function findOrAddKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $json
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\DuplicateEntryException
   */
  public function findOrInsertCriteriaJson(\concourse\thrift\data\TCriteria $criteria, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param string $json
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   * @throws \concourse\thrift\exceptions\DuplicateEntryException
   */
  public function findOrInsertCclJson($ccl, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $token
   * @param string $environment
   * @return string
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getServerEnvironment(\concourse\thrift\shared\AccessToken $creds,  $token, $environment);
  /**
   * @return string
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getServerVersion();
  /**
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $token
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function time(\concourse\thrift\shared\AccessToken $creds,  $token, $environment);
  /**
   * @param string $phrase
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $token
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function timePhrase($phrase, \concourse\thrift\shared\AccessToken $creds,  $token, $environment);
}

class ConcourseServiceClient implements \concourse\thrift\ConcourseServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function abort(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_abort($creds, $transaction, $environment);
    $this->recv_abort();
  }

  public function send_abort(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_abort_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'abort', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('abort', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_abort()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_abort_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_abort_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function addKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_addKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_addKeyValue();
  }

  public function send_addKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_addKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_addKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_addKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("addKeyValue failed: unknown result");
  }

  public function addKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_addKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_addKeyValueRecord();
  }

  public function send_addKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_addKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_addKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_addKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("addKeyValueRecord failed: unknown result");
  }

  public function addKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_addKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    return $this->recv_addKeyValueRecords();
  }

  public function send_addKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_addKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_addKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_addKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("addKeyValueRecords failed: unknown result");
  }

  public function auditRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecord($record, $creds, $transaction, $environment);
    return $this->recv_auditRecord();
  }

  public function send_auditRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecord failed: unknown result");
  }

  public function auditRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStart($record, $start, $creds, $transaction, $environment);
    return $this->recv_auditRecordStart();
  }

  public function send_auditRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditRecordStart_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecordStart failed: unknown result");
  }

  public function auditRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStartstr($record, $start, $creds, $transaction, $environment);
    return $this->recv_auditRecordStartstr();
  }

  public function send_auditRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditRecordStartstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditRecordStartstr failed: unknown result");
  }

  public function auditRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStartEnd($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditRecordStartEnd();
  }

  public function send_auditRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditRecordStartEnd_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecordStartEnd failed: unknown result");
  }

  public function auditRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStartstrEndstr($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditRecordStartstrEndstr();
  }

  public function send_auditRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditRecordStartstrEndstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditRecordStartstrEndstr failed: unknown result");
  }

  public function auditKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecord();
  }

  public function send_auditKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecord failed: unknown result");
  }

  public function auditKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStart();
  }

  public function send_auditKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecordStart failed: unknown result");
  }

  public function auditKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStartstr($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStartstr();
  }

  public function send_auditKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditKeyRecordStartstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditKeyRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditKeyRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditKeyRecordStartstr failed: unknown result");
  }

  public function auditKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStartEnd();
  }

  public function send_auditKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecordStartEnd failed: unknown result");
  }

  public function auditKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStartstrEndstr($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStartstrEndstr();
  }

  public function send_auditKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditKeyRecordStartstrEndstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditKeyRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditKeyRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditKeyRecordStartstrEndstr failed: unknown result");
  }

  public function browseKey($key, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKey($key, $creds, $transaction, $environment);
    return $this->recv_browseKey();
  }

  public function send_browseKey($key, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKey_args();
    $args->key = $key;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKey', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKey', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKey()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKey_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKey_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKey failed: unknown result");
  }

  public function browseKeys(array $keys, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeys($keys, $creds, $transaction, $environment);
    return $this->recv_browseKeys();
  }

  public function send_browseKeys(array $keys, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKeys_args();
    $args->keys = $keys;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeys', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeys', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeys()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKeys_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKeys_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeys failed: unknown result");
  }

  public function browseKeyTime($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeyTime($key, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeyTime();
  }

  public function send_browseKeyTime($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKeyTime_args();
    $args->key = $key;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeyTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeyTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeyTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKeyTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKeyTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeyTime failed: unknown result");
  }

  public function browseKeyTimestr($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeyTimestr($key, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeyTimestr();
  }

  public function send_browseKeyTimestr($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKeyTimestr_args();
    $args->key = $key;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeyTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeyTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeyTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKeyTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKeyTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("browseKeyTimestr failed: unknown result");
  }

  public function browseKeysTime(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeysTime($keys, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeysTime();
  }

  public function send_browseKeysTime(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKeysTime_args();
    $args->keys = $keys;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeysTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeysTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeysTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKeysTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKeysTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeysTime failed: unknown result");
  }

  public function browseKeysTimestr(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeysTimestr($keys, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeysTimestr();
  }

  public function send_browseKeysTimestr(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKeysTimestr_args();
    $args->keys = $keys;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeysTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeysTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeysTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKeysTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKeysTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("browseKeysTimestr failed: unknown result");
  }

  public function chronologizeKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecord();
  }

  public function send_chronologizeKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_chronologizeKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_chronologizeKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_chronologizeKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecord failed: unknown result");
  }

  public function chronologizeKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStart();
  }

  public function send_chronologizeKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_chronologizeKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecordStart failed: unknown result");
  }

  public function chronologizeKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStartstr($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStartstr();
  }

  public function send_chronologizeKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_chronologizeKeyRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("chronologizeKeyRecordStartstr failed: unknown result");
  }

  public function chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStartEnd();
  }

  public function send_chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_chronologizeKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecordStartEnd failed: unknown result");
  }

  public function chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStartstrEndstr();
  }

  public function send_chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartstrEndstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_chronologizeKeyRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("chronologizeKeyRecordStartstrEndstr failed: unknown result");
  }

  public function clearRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearRecord($record, $creds, $transaction, $environment);
    $this->recv_clearRecord();
  }

  public function send_clearRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearRecords($records, $creds, $transaction, $environment);
    $this->recv_clearRecords();
  }

  public function send_clearRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeyRecord($key, $record, $creds, $transaction, $environment);
    $this->recv_clearKeyRecord();
  }

  public function send_clearKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeysRecord($keys, $record, $creds, $transaction, $environment);
    $this->recv_clearKeysRecord();
  }

  public function send_clearKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeyRecords($key, $records, $creds, $transaction, $environment);
    $this->recv_clearKeyRecords();
  }

  public function send_clearKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeysRecords($keys, $records, $creds, $transaction, $environment);
    $this->recv_clearKeysRecords();
  }

  public function send_clearKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function commit(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_commit($creds, $transaction, $environment);
    return $this->recv_commit();
  }

  public function send_commit(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_commit_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'commit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('commit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_commit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_commit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_commit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("commit failed: unknown result");
  }

  public function describeRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecord($record, $creds, $transaction, $environment);
    return $this->recv_describeRecord();
  }

  public function send_describeRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecord failed: unknown result");
  }

  public function describeRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordTime($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordTime();
  }

  public function send_describeRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecordTime_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecordTime failed: unknown result");
  }

  public function describeRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordTimestr($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordTimestr();
  }

  public function send_describeRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecordTimestr_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("describeRecordTimestr failed: unknown result");
  }

  public function describeRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecords($records, $creds, $transaction, $environment);
    return $this->recv_describeRecords();
  }

  public function send_describeRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecords failed: unknown result");
  }

  public function describeRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordsTime($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordsTime();
  }

  public function send_describeRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecordsTime failed: unknown result");
  }

  public function describeRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordsTimestr($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordsTimestr();
  }

  public function send_describeRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecordsTimestr_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("describeRecordsTimestr failed: unknown result");
  }

  public function diffRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStart($record, $start, $creds, $transaction, $environment);
    return $this->recv_diffRecordStart();
  }

  public function send_diffRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffRecordStart_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffRecordStart failed: unknown result");
  }

  public function diffRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStartstr($record, $start, $creds, $transaction, $environment);
    return $this->recv_diffRecordStartstr();
  }

  public function send_diffRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffRecordStartstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffRecordStartstr failed: unknown result");
  }

  public function diffRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStartEnd($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffRecordStartEnd();
  }

  public function send_diffRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffRecordStartEnd_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffRecordStartEnd failed: unknown result");
  }

  public function diffRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStartstrEndstr($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffRecordStartstrEndstr();
  }

  public function send_diffRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffRecordStartstrEndstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffRecordStartstrEndstr failed: unknown result");
  }

  public function diffKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStart();
  }

  public function send_diffKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyRecordStart failed: unknown result");
  }

  public function diffKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStartstr($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStartstr();
  }

  public function send_diffKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyRecordStartstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyRecordStartstr failed: unknown result");
  }

  public function diffKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStartEnd();
  }

  public function send_diffKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyRecordStartEnd failed: unknown result");
  }

  public function diffKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStartstrEndstr($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStartstrEndstr();
  }

  public function send_diffKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyRecordStartstrEndstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyRecordStartstrEndstr failed: unknown result");
  }

  public function diffKeyStart($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStart($key, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyStart();
  }

  public function send_diffKeyStart($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyStart_args();
    $args->key = $key;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyStart failed: unknown result");
  }

  public function diffKeyStartstr($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStartstr($key, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyStartstr();
  }

  public function send_diffKeyStartstr($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyStartstr_args();
    $args->key = $key;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyStartstr failed: unknown result");
  }

  public function diffKeyStartEnd($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStartEnd($key, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyStartEnd();
  }

  public function send_diffKeyStartEnd($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyStartEnd_args();
    $args->key = $key;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyStartEnd failed: unknown result");
  }

  public function diffKeyStartstrEndstr($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStartstrEndstr($key, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyStartstrEndstr();
  }

  public function send_diffKeyStartstrEndstr($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyStartstrEndstr_args();
    $args->key = $key;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyStartstrEndstr failed: unknown result");
  }

  public function login($username, $password, $environment)
  {
    $this->send_login($username, $password, $environment);
    return $this->recv_login();
  }

  public function send_login($username, $password, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_login_args();
    $args->username = $username;
    $args->password = $password;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("login failed: unknown result");
  }

  public function logout(\concourse\thrift\shared\AccessToken $token, $environment)
  {
    $this->send_logout($token, $environment);
    $this->recv_logout();
  }

  public function send_logout(\concourse\thrift\shared\AccessToken $token, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_logout_args();
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'logout', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('logout', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_logout()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_logout_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_logout_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function stage(\concourse\thrift\shared\AccessToken $token, $environment)
  {
    $this->send_stage($token, $environment);
    return $this->recv_stage();
  }

  public function send_stage(\concourse\thrift\shared\AccessToken $token, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_stage_args();
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'stage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('stage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_stage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_stage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_stage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("stage failed: unknown result");
  }

  public function insertJson($json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_insertJson($json, $creds, $transaction, $environment);
    return $this->recv_insertJson();
  }

  public function send_insertJson($json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_insertJson_args();
    $args->json = $json;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_insertJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_insertJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("insertJson failed: unknown result");
  }

  public function insertJsonRecord($json, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_insertJsonRecord($json, $record, $creds, $transaction, $environment);
    return $this->recv_insertJsonRecord();
  }

  public function send_insertJsonRecord($json, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_insertJsonRecord_args();
    $args->json = $json;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJsonRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJsonRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJsonRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_insertJsonRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_insertJsonRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("insertJsonRecord failed: unknown result");
  }

  public function insertJsonRecords($json, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_insertJsonRecords($json, $records, $creds, $transaction, $environment);
    return $this->recv_insertJsonRecords();
  }

  public function send_insertJsonRecords($json, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_insertJsonRecords_args();
    $args->json = $json;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJsonRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJsonRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJsonRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_insertJsonRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_insertJsonRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("insertJsonRecords failed: unknown result");
  }

  public function removeKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_removeKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_removeKeyValueRecord();
  }

  public function send_removeKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_removeKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_removeKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_removeKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("removeKeyValueRecord failed: unknown result");
  }

  public function removeKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_removeKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    return $this->recv_removeKeyValueRecords();
  }

  public function send_removeKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_removeKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_removeKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_removeKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("removeKeyValueRecords failed: unknown result");
  }

  public function setKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_setKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    $this->recv_setKeyValueRecord();
  }

  public function send_setKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_setKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_setKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_setKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function setKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_setKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_setKeyValue();
  }

  public function send_setKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_setKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_setKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_setKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("setKeyValue failed: unknown result");
  }

  public function setKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_setKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    $this->recv_setKeyValueRecords();
  }

  public function send_setKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_setKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_setKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_setKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function inventory(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_inventory($creds, $transaction, $environment);
    return $this->recv_inventory();
  }

  public function send_inventory(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_inventory_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'inventory', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('inventory', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_inventory()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_inventory_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_inventory_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("inventory failed: unknown result");
  }

  public function selectRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecord($record, $creds, $transaction, $environment);
    return $this->recv_selectRecord();
  }

  public function send_selectRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecord failed: unknown result");
  }

  public function selectRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecords($records, $creds, $transaction, $environment);
    return $this->recv_selectRecords();
  }

  public function send_selectRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecords failed: unknown result");
  }

  public function selectRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordTime($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordTime();
  }

  public function send_selectRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecordTime_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecordTime failed: unknown result");
  }

  public function selectRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordTimestr($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordTimestr();
  }

  public function send_selectRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecordTimestr_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectRecordTimestr failed: unknown result");
  }

  public function selectRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordsTime($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordsTime();
  }

  public function send_selectRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecordsTime failed: unknown result");
  }

  public function selectRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordsTimestr($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordsTimestr();
  }

  public function send_selectRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecordsTimestr_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectRecordsTimestr failed: unknown result");
  }

  public function selectKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecord();
  }

  public function send_selectKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecord failed: unknown result");
  }

  public function selectKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordTime();
  }

  public function send_selectKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecordTime failed: unknown result");
  }

  public function selectKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordTimestr($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordTimestr();
  }

  public function send_selectKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecordTimestr_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyRecordTimestr failed: unknown result");
  }

  public function selectKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecord($keys, $record, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecord();
  }

  public function send_selectKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecord failed: unknown result");
  }

  public function selectKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordTime();
  }

  public function send_selectKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecordTime failed: unknown result");
  }

  public function selectKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordTimestr($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordTimestr();
  }

  public function send_selectKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecordTimestr_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysRecordTimestr failed: unknown result");
  }

  public function selectKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecords($keys, $records, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecords();
  }

  public function send_selectKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecords failed: unknown result");
  }

  public function selectKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecords($key, $records, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecords();
  }

  public function send_selectKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecords failed: unknown result");
  }

  public function selectKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordsTime();
  }

  public function send_selectKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecordsTime failed: unknown result");
  }

  public function selectKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordsTimestr($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordsTimestr();
  }

  public function send_selectKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecordsTimestr_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyRecordsTimestr failed: unknown result");
  }

  public function selectKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordsTime();
  }

  public function send_selectKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecordsTime failed: unknown result");
  }

  public function selectKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordsTimestr($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordsTimestr();
  }

  public function send_selectKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecordsTimestr_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysRecordsTimestr failed: unknown result");
  }

  public function selectCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_selectCriteria();
  }

  public function send_selectCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectCriteria failed: unknown result");
  }

  public function selectCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_selectCcl();
  }

  public function send_selectCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCcl failed: unknown result");
  }

  public function selectCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCriteriaTime($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCriteriaTime();
  }

  public function send_selectCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCriteriaTime_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectCriteriaTime failed: unknown result");
  }

  public function selectCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCriteriaTimestr($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCriteriaTimestr();
  }

  public function send_selectCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCriteriaTimestr_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCriteriaTimestr failed: unknown result");
  }

  public function selectCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCclTime($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCclTime();
  }

  public function send_selectCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCclTime_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCclTime failed: unknown result");
  }

  public function selectCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCclTimestr($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCclTimestr();
  }

  public function send_selectCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCclTimestr_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCclTimestr failed: unknown result");
  }

  public function selectKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCriteria($key, $criteria, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteria();
  }

  public function send_selectKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCriteria_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyCriteria failed: unknown result");
  }

  public function selectKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCcl($key, $ccl, $creds, $transaction, $environment);
    return $this->recv_selectKeyCcl();
  }

  public function send_selectKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCcl_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCcl failed: unknown result");
  }

  public function selectKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCriteriaTime($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteriaTime();
  }

  public function send_selectKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCriteriaTime_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyCriteriaTime failed: unknown result");
  }

  public function selectKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCriteriaTimestr($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteriaTimestr();
  }

  public function send_selectKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCriteriaTimestr_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCriteriaTimestr failed: unknown result");
  }

  public function selectKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCclTime($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCclTime();
  }

  public function send_selectKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCclTime_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCclTime failed: unknown result");
  }

  public function selectKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCclTimestr($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCclTimestr();
  }

  public function send_selectKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCclTimestr_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCclTimestr failed: unknown result");
  }

  public function selectKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCriteria($keys, $criteria, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteria();
  }

  public function send_selectKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCriteria_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysCriteria failed: unknown result");
  }

  public function selectKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCcl($keys, $ccl, $creds, $transaction, $environment);
    return $this->recv_selectKeysCcl();
  }

  public function send_selectKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCcl_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCcl failed: unknown result");
  }

  public function selectKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCriteriaTime($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteriaTime();
  }

  public function send_selectKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCriteriaTime_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysCriteriaTime failed: unknown result");
  }

  public function selectKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCriteriaTimestr($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteriaTimestr();
  }

  public function send_selectKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCriteriaTimestr_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCriteriaTimestr failed: unknown result");
  }

  public function selectKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCclTime($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCclTime();
  }

  public function send_selectKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCclTime_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCclTime failed: unknown result");
  }

  public function selectKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCclTimestr($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCclTimestr();
  }

  public function send_selectKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCclTimestr_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCclTimestr failed: unknown result");
  }

  public function getKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_getKeyRecord();
  }

  public function send_getKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecord failed: unknown result");
  }

  public function getKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordTime();
  }

  public function send_getKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecordTime failed: unknown result");
  }

  public function getKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordTimestr($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordTimestr();
  }

  public function send_getKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecordTimestr_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyRecordTimestr failed: unknown result");
  }

  public function getKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecord($keys, $record, $creds, $transaction, $environment);
    return $this->recv_getKeysRecord();
  }

  public function send_getKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecord failed: unknown result");
  }

  public function getKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordTime();
  }

  public function send_getKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecordTime failed: unknown result");
  }

  public function getKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordTimestr($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordTimestr();
  }

  public function send_getKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecordTimestr_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysRecordTimestr failed: unknown result");
  }

  public function getKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecords($keys, $records, $creds, $transaction, $environment);
    return $this->recv_getKeysRecords();
  }

  public function send_getKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecords failed: unknown result");
  }

  public function getKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecords($key, $records, $creds, $transaction, $environment);
    return $this->recv_getKeyRecords();
  }

  public function send_getKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecords failed: unknown result");
  }

  public function getKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordsTime();
  }

  public function send_getKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecordsTime failed: unknown result");
  }

  public function getKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordsTimestr($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordsTimestr();
  }

  public function send_getKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecordsTimestr_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyRecordsTimestr failed: unknown result");
  }

  public function getKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordsTime();
  }

  public function send_getKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecordsTime failed: unknown result");
  }

  public function getKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordsTimestr($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordsTimestr();
  }

  public function send_getKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecordsTimestr_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysRecordsTimestr failed: unknown result");
  }

  public function getKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCriteria($key, $criteria, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteria();
  }

  public function send_getKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCriteria_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyCriteria failed: unknown result");
  }

  public function getCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_getCriteria();
  }

  public function send_getCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getCriteria failed: unknown result");
  }

  public function getCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_getCcl();
  }

  public function send_getCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCcl failed: unknown result");
  }

  public function getCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCriteriaTime($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCriteriaTime();
  }

  public function send_getCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCriteriaTime_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getCriteriaTime failed: unknown result");
  }

  public function getCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCriteriaTimestr($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCriteriaTimestr();
  }

  public function send_getCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCriteriaTimestr_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCriteriaTimestr failed: unknown result");
  }

  public function getCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCclTime($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCclTime();
  }

  public function send_getCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCclTime_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCclTime failed: unknown result");
  }

  public function getCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCclTimestr($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCclTimestr();
  }

  public function send_getCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCclTimestr_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCclTimestr failed: unknown result");
  }

  public function getKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCcl($key, $ccl, $creds, $transaction, $environment);
    return $this->recv_getKeyCcl();
  }

  public function send_getKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCcl_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCcl failed: unknown result");
  }

  public function getKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCriteriaTime($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteriaTime();
  }

  public function send_getKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCriteriaTime_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyCriteriaTime failed: unknown result");
  }

  public function getKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCriteriaTimestr($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteriaTimestr();
  }

  public function send_getKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCriteriaTimestr_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCriteriaTimestr failed: unknown result");
  }

  public function getKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCclTime($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCclTime();
  }

  public function send_getKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCclTime_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCclTime failed: unknown result");
  }

  public function getKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCclTimestr($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCclTimestr();
  }

  public function send_getKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCclTimestr_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCclTimestr failed: unknown result");
  }

  public function getKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCriteria($keys, $criteria, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteria();
  }

  public function send_getKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCriteria_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysCriteria failed: unknown result");
  }

  public function getKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCcl($keys, $ccl, $creds, $transaction, $environment);
    return $this->recv_getKeysCcl();
  }

  public function send_getKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCcl_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCcl failed: unknown result");
  }

  public function getKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCriteriaTime($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteriaTime();
  }

  public function send_getKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCriteriaTime_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysCriteriaTime failed: unknown result");
  }

  public function getKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCriteriaTimestr($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteriaTimestr();
  }

  public function send_getKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCriteriaTimestr_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCriteriaTimestr failed: unknown result");
  }

  public function getKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCclTime($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCclTime();
  }

  public function send_getKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCclTime_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCclTime failed: unknown result");
  }

  public function getKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCclTimestr($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCclTimestr();
  }

  public function send_getKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCclTimestr_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCclTimestr failed: unknown result");
  }

  public function verifyKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecord();
  }

  public function send_verifyKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_verifyKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_verifyKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_verifyKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyKeyValueRecord failed: unknown result");
  }

  public function verifyKeyValueRecordTime($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyKeyValueRecordTime($key, $value, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecordTime();
  }

  public function send_verifyKeyValueRecordTime($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_verifyKeyValueRecordTime_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_verifyKeyValueRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_verifyKeyValueRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyKeyValueRecordTime failed: unknown result");
  }

  public function verifyKeyValueRecordTimestr($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyKeyValueRecordTimestr($key, $value, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecordTimestr();
  }

  public function send_verifyKeyValueRecordTimestr($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_verifyKeyValueRecordTimestr_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_verifyKeyValueRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_verifyKeyValueRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("verifyKeyValueRecordTimestr failed: unknown result");
  }

  public function jsonifyRecords(array $records, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_jsonifyRecords($records, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecords();
  }

  public function send_jsonifyRecords(array $records, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_jsonifyRecords_args();
    $args->records = $records;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_jsonifyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_jsonifyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("jsonifyRecords failed: unknown result");
  }

  public function jsonifyRecordsTime(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_jsonifyRecordsTime($records, $timestamp, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecordsTime();
  }

  public function send_jsonifyRecordsTime(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_jsonifyRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_jsonifyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_jsonifyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("jsonifyRecordsTime failed: unknown result");
  }

  public function jsonifyRecordsTimestr(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_jsonifyRecordsTimestr($records, $timestamp, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecordsTimestr();
  }

  public function send_jsonifyRecordsTimestr(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_jsonifyRecordsTimestr_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_jsonifyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_jsonifyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("jsonifyRecordsTimestr failed: unknown result");
  }

  public function findCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_findCriteria();
  }

  public function send_findCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findCriteria failed: unknown result");
  }

  public function findCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_findCcl();
  }

  public function send_findCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findCcl failed: unknown result");
  }

  public function findKeyOperatorValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorValues($key, $operator, $values, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValues();
  }

  public function send_findKeyOperatorValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorValues_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorValues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorValues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findKeyOperatorValues failed: unknown result");
  }

  public function findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorValuesTime($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValuesTime();
  }

  public function send_findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorValuesTime_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValuesTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValuesTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValuesTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorValuesTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorValuesTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findKeyOperatorValuesTime failed: unknown result");
  }

  public function findKeyOperatorValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorValuesTimestr($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValuesTimestr();
  }

  public function send_findKeyOperatorValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorValuesTimestr_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValuesTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValuesTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValuesTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorValuesTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorValuesTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorValuesTimestr failed: unknown result");
  }

  public function findKeyOperatorstrValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorstrValues($key, $operator, $values, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorstrValues();
  }

  public function send_findKeyOperatorstrValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorstrValues_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorstrValues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorstrValues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorstrValues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorstrValues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorstrValues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorstrValues failed: unknown result");
  }

  public function findKeyOperatorstrValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorstrValuesTime($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorstrValuesTime();
  }

  public function send_findKeyOperatorstrValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorstrValuesTime_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorstrValuesTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorstrValuesTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorstrValuesTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorstrValuesTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorstrValuesTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorstrValuesTime failed: unknown result");
  }

  public function findKeyOperatorstrValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorstrValuesTimestr($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorstrValuesTimestr();
  }

  public function send_findKeyOperatorstrValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorstrValuesTimestr_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorstrValuesTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorstrValuesTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorstrValuesTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorstrValuesTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorstrValuesTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorstrValuesTimestr failed: unknown result");
  }

  public function search($key, $query, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_search($key, $query, $creds, $transaction, $environment);
    return $this->recv_search();
  }

  public function send_search($key, $query, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_search_args();
    $args->key = $key;
    $args->query = $query;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'search', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('search', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_search()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_search_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_search_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("search failed: unknown result");
  }

  public function revertKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordsTime();
  }

  public function send_revertKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordsTimestr($keys, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordsTimestr();
  }

  public function send_revertKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeysRecordsTimestr_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeysRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeysRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function revertKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordTime();
  }

  public function send_revertKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordTimestr($keys, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordTimestr();
  }

  public function send_revertKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeysRecordTimestr_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeysRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeysRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function revertKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordsTime();
  }

  public function send_revertKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordsTimestr($key, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordsTimestr();
  }

  public function send_revertKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeyRecordsTimestr_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function revertKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordTime();
  }

  public function send_revertKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordTimestr($key, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordTimestr();
  }

  public function send_revertKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeyRecordTimestr_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeyRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeyRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function pingRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_pingRecords($records, $creds, $transaction, $environment);
    return $this->recv_pingRecords();
  }

  public function send_pingRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_pingRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pingRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pingRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pingRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_pingRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_pingRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("pingRecords failed: unknown result");
  }

  public function pingRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_pingRecord($record, $creds, $transaction, $environment);
    return $this->recv_pingRecord();
  }

  public function send_pingRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_pingRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pingRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pingRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pingRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_pingRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_pingRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("pingRecord failed: unknown result");
  }

  public function verifyAndSwap($key, \concourse\thrift\data\TObject $expected, $record, \concourse\thrift\data\TObject $replacement, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyAndSwap($key, $expected, $record, $replacement, $creds, $transaction, $environment);
    return $this->recv_verifyAndSwap();
  }

  public function send_verifyAndSwap($key, \concourse\thrift\data\TObject $expected, $record, \concourse\thrift\data\TObject $replacement, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_verifyAndSwap_args();
    $args->key = $key;
    $args->expected = $expected;
    $args->record = $record;
    $args->replacement = $replacement;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyAndSwap', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyAndSwap', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyAndSwap()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_verifyAndSwap_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_verifyAndSwap_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyAndSwap failed: unknown result");
  }

  public function verifyOrSet($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyOrSet($key, $value, $record, $creds, $transaction, $environment);
    $this->recv_verifyOrSet();
  }

  public function send_verifyOrSet($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_verifyOrSet_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyOrSet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyOrSet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyOrSet()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_verifyOrSet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_verifyOrSet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function findOrAddKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findOrAddKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_findOrAddKeyValue();
  }

  public function send_findOrAddKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findOrAddKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findOrAddKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findOrAddKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findOrAddKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findOrAddKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findOrAddKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("findOrAddKeyValue failed: unknown result");
  }

  public function findOrInsertCriteriaJson(\concourse\thrift\data\TCriteria $criteria, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findOrInsertCriteriaJson($criteria, $json, $creds, $transaction, $environment);
    return $this->recv_findOrInsertCriteriaJson();
  }

  public function send_findOrInsertCriteriaJson(\concourse\thrift\data\TCriteria $criteria, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findOrInsertCriteriaJson_args();
    $args->criteria = $criteria;
    $args->json = $json;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findOrInsertCriteriaJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findOrInsertCriteriaJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findOrInsertCriteriaJson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findOrInsertCriteriaJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findOrInsertCriteriaJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findOrInsertCriteriaJson failed: unknown result");
  }

  public function findOrInsertCclJson($ccl, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findOrInsertCclJson($ccl, $json, $creds, $transaction, $environment);
    return $this->recv_findOrInsertCclJson();
  }

  public function send_findOrInsertCclJson($ccl, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findOrInsertCclJson_args();
    $args->ccl = $ccl;
    $args->json = $json;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findOrInsertCclJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findOrInsertCclJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findOrInsertCclJson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findOrInsertCclJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findOrInsertCclJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("findOrInsertCclJson failed: unknown result");
  }

  public function getServerEnvironment(\concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $this->send_getServerEnvironment($creds, $token, $environment);
    return $this->recv_getServerEnvironment();
  }

  public function send_getServerEnvironment(\concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getServerEnvironment_args();
    $args->creds = $creds;
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServerEnvironment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServerEnvironment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServerEnvironment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getServerEnvironment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getServerEnvironment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getServerEnvironment failed: unknown result");
  }

  public function getServerVersion()
  {
    $this->send_getServerVersion();
    return $this->recv_getServerVersion();
  }

  public function send_getServerVersion()
  {
    $args = new \concourse\thrift\ConcourseService_getServerVersion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServerVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServerVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServerVersion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getServerVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getServerVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getServerVersion failed: unknown result");
  }

  public function time(\concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $this->send_time($creds, $token, $environment);
    return $this->recv_time();
  }

  public function send_time(\concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_time_args();
    $args->creds = $creds;
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'time', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('time', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_time()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_time_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_time_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("time failed: unknown result");
  }

  public function timePhrase($phrase, \concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $this->send_timePhrase($phrase, $creds, $token, $environment);
    return $this->recv_timePhrase();
  }

  public function send_timePhrase($phrase, \concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_timePhrase_args();
    $args->phrase = $phrase;
    $args->creds = $creds;
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timePhrase', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timePhrase', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timePhrase()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_timePhrase_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_timePhrase_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("timePhrase failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ConcourseService_abort_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_abort_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_abort_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_abort_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_abort_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_abort_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->records []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter6)
          {
            $xfer += $output->writeI64($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = 0;
              $val13 = false;
              $xfer += $input->readI64($key12);
              $xfer += $input->readBool($val13);
              $this->success[(!is_string($key12) && !is_integer($key12)) ? serialize($key12) : $key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter14 => $viter15)
          {
            $xfer += $output->writeI64($kiter14);
            $xfer += $output->writeBool($viter15);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size16 = 0;
            $_ktype17 = 0;
            $_vtype18 = 0;
            $xfer += $input->readMapBegin($_ktype17, $_vtype18, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $key21 = 0;
              $val22 = '';
              $xfer += $input->readI64($key21);
              $xfer += $input->readString($val22);
              $this->success[(!is_string($key21) && !is_integer($key21)) ? serialize($key21) : $key21] = $val22;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter23 => $viter24)
          {
            $xfer += $output->writeI64($kiter23);
            $xfer += $output->writeString($viter24);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStart_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStart_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size25 = 0;
            $_ktype26 = 0;
            $_vtype27 = 0;
            $xfer += $input->readMapBegin($_ktype26, $_vtype27, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $key30 = 0;
              $val31 = '';
              $xfer += $input->readI64($key30);
              $xfer += $input->readString($val31);
              $this->success[(!is_string($key30) && !is_integer($key30)) ? serialize($key30) : $key30] = $val31;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter32 => $viter33)
          {
            $xfer += $output->writeI64($kiter32);
            $xfer += $output->writeString($viter33);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size34 = 0;
            $_ktype35 = 0;
            $_vtype36 = 0;
            $xfer += $input->readMapBegin($_ktype35, $_vtype36, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $key39 = 0;
              $val40 = '';
              $xfer += $input->readI64($key39);
              $xfer += $input->readString($val40);
              $this->success[(!is_string($key39) && !is_integer($key39)) ? serialize($key39) : $key39] = $val40;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter41 => $viter42)
          {
            $xfer += $output->writeI64($kiter41);
            $xfer += $output->writeString($viter42);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartEnd_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 3);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size43 = 0;
            $_ktype44 = 0;
            $_vtype45 = 0;
            $xfer += $input->readMapBegin($_ktype44, $_vtype45, $_size43);
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $key48 = 0;
              $val49 = '';
              $xfer += $input->readI64($key48);
              $xfer += $input->readString($val49);
              $this->success[(!is_string($key48) && !is_integer($key48)) ? serialize($key48) : $key48] = $val49;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter50 => $viter51)
          {
            $xfer += $output->writeI64($kiter50);
            $xfer += $output->writeString($viter51);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstrEndstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 3);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size52 = 0;
            $_ktype53 = 0;
            $_vtype54 = 0;
            $xfer += $input->readMapBegin($_ktype53, $_vtype54, $_size52);
            for ($_i56 = 0; $_i56 < $_size52; ++$_i56)
            {
              $key57 = 0;
              $val58 = '';
              $xfer += $input->readI64($key57);
              $xfer += $input->readString($val58);
              $this->success[(!is_string($key57) && !is_integer($key57)) ? serialize($key57) : $key57] = $val58;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter59 => $viter60)
          {
            $xfer += $output->writeI64($kiter59);
            $xfer += $output->writeString($viter60);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size61 = 0;
            $_ktype62 = 0;
            $_vtype63 = 0;
            $xfer += $input->readMapBegin($_ktype62, $_vtype63, $_size61);
            for ($_i65 = 0; $_i65 < $_size61; ++$_i65)
            {
              $key66 = 0;
              $val67 = '';
              $xfer += $input->readI64($key66);
              $xfer += $input->readString($val67);
              $this->success[(!is_string($key66) && !is_integer($key66)) ? serialize($key66) : $key66] = $val67;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter68 => $viter69)
          {
            $xfer += $output->writeI64($kiter68);
            $xfer += $output->writeString($viter69);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size70 = 0;
            $_ktype71 = 0;
            $_vtype72 = 0;
            $xfer += $input->readMapBegin($_ktype71, $_vtype72, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $key75 = 0;
              $val76 = '';
              $xfer += $input->readI64($key75);
              $xfer += $input->readString($val76);
              $this->success[(!is_string($key75) && !is_integer($key75)) ? serialize($key75) : $key75] = $val76;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter77 => $viter78)
          {
            $xfer += $output->writeI64($kiter77);
            $xfer += $output->writeString($viter78);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size79 = 0;
            $_ktype80 = 0;
            $_vtype81 = 0;
            $xfer += $input->readMapBegin($_ktype80, $_vtype81, $_size79);
            for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
            {
              $key84 = 0;
              $val85 = '';
              $xfer += $input->readI64($key84);
              $xfer += $input->readString($val85);
              $this->success[(!is_string($key84) && !is_integer($key84)) ? serialize($key84) : $key84] = $val85;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter86 => $viter87)
          {
            $xfer += $output->writeI64($kiter86);
            $xfer += $output->writeString($viter87);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size88 = 0;
            $_ktype89 = 0;
            $_vtype90 = 0;
            $xfer += $input->readMapBegin($_ktype89, $_vtype90, $_size88);
            for ($_i92 = 0; $_i92 < $_size88; ++$_i92)
            {
              $key93 = 0;
              $val94 = '';
              $xfer += $input->readI64($key93);
              $xfer += $input->readString($val94);
              $this->success[(!is_string($key93) && !is_integer($key93)) ? serialize($key93) : $key93] = $val94;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter95 => $viter96)
          {
            $xfer += $output->writeI64($kiter95);
            $xfer += $output->writeString($viter96);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 4);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size97 = 0;
            $_ktype98 = 0;
            $_vtype99 = 0;
            $xfer += $input->readMapBegin($_ktype98, $_vtype99, $_size97);
            for ($_i101 = 0; $_i101 < $_size97; ++$_i101)
            {
              $key102 = 0;
              $val103 = '';
              $xfer += $input->readI64($key102);
              $xfer += $input->readString($val103);
              $this->success[(!is_string($key102) && !is_integer($key102)) ? serialize($key102) : $key102] = $val103;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter104 => $viter105)
          {
            $xfer += $output->writeI64($kiter104);
            $xfer += $output->writeString($viter105);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKey_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKey_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKey_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKey_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKey_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size106 = 0;
            $_ktype107 = 0;
            $_vtype108 = 0;
            $xfer += $input->readMapBegin($_ktype107, $_vtype108, $_size106);
            for ($_i110 = 0; $_i110 < $_size106; ++$_i110)
            {
              $key111 = new \concourse\thrift\data\TObject();
              $val112 = array();
              $key111 = new \concourse\thrift\data\TObject();
              $xfer += $key111->read($input);
              $val112 = array();
              $_size113 = 0;
              $_etype116 = 0;
              $xfer += $input->readSetBegin($_etype116, $_size113);
              for ($_i117 = 0; $_i117 < $_size113; ++$_i117)
              {
                $elem118 = null;
                $xfer += $input->readI64($elem118);
                if (is_scalar($elem118)) {
                  $val112 []= $elem118;
                } else {
                  $val112 []= $elem118;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key111) && !is_integer($key111)) ? serialize($key111) : $key111] = $val112;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKey_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter119 => $viter120)
          {
            $xfer += $kiter119->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter120));
              {
                foreach ($viter120 as $iter121 => $iter122)
                {
                  if (is_scalar($iter122)) {
                  $xfer += $output->writeI64($iter121);
                  } else {
                  $xfer += $output->writeI64($iter122);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeys_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeys_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size123 = 0;
            $_etype126 = 0;
            $xfer += $input->readListBegin($_etype126, $_size123);
            for ($_i127 = 0; $_i127 < $_size123; ++$_i127)
            {
              $elem128 = null;
              $xfer += $input->readString($elem128);
              $this->keys []= $elem128;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeys_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter129)
          {
            $xfer += $output->writeString($iter129);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeys_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeys_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size130 = 0;
            $_ktype131 = 0;
            $_vtype132 = 0;
            $xfer += $input->readMapBegin($_ktype131, $_vtype132, $_size130);
            for ($_i134 = 0; $_i134 < $_size130; ++$_i134)
            {
              $key135 = '';
              $val136 = array();
              $xfer += $input->readString($key135);
              $val136 = array();
              $_size137 = 0;
              $_ktype138 = 0;
              $_vtype139 = 0;
              $xfer += $input->readMapBegin($_ktype138, $_vtype139, $_size137);
              for ($_i141 = 0; $_i141 < $_size137; ++$_i141)
              {
                $key142 = new \concourse\thrift\data\TObject();
                $val143 = array();
                $key142 = new \concourse\thrift\data\TObject();
                $xfer += $key142->read($input);
                $val143 = array();
                $_size144 = 0;
                $_etype147 = 0;
                $xfer += $input->readSetBegin($_etype147, $_size144);
                for ($_i148 = 0; $_i148 < $_size144; ++$_i148)
                {
                  $elem149 = null;
                  $xfer += $input->readI64($elem149);
                  if (is_scalar($elem149)) {
                    $val143 []= $elem149;
                  } else {
                    $val143 []= $elem149;
                  }
                }
                $xfer += $input->readSetEnd();
                $val136[(!is_string($key142) && !is_integer($key142)) ? serialize($key142) : $key142] = $val143;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key135) && !is_integer($key135)) ? serialize($key135) : $key135] = $val136;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeys_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter150 => $viter151)
          {
            $xfer += $output->writeString($kiter150);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter151));
              {
                foreach ($viter151 as $kiter152 => $viter153)
                {
                  $xfer += $kiter152->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter153));
                    {
                      foreach ($viter153 as $iter154 => $iter155)
                      {
                        if (is_scalar($iter155)) {
                        $xfer += $output->writeI64($iter154);
                        } else {
                        $xfer += $output->writeI64($iter155);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size156 = 0;
            $_ktype157 = 0;
            $_vtype158 = 0;
            $xfer += $input->readMapBegin($_ktype157, $_vtype158, $_size156);
            for ($_i160 = 0; $_i160 < $_size156; ++$_i160)
            {
              $key161 = new \concourse\thrift\data\TObject();
              $val162 = array();
              $key161 = new \concourse\thrift\data\TObject();
              $xfer += $key161->read($input);
              $val162 = array();
              $_size163 = 0;
              $_etype166 = 0;
              $xfer += $input->readSetBegin($_etype166, $_size163);
              for ($_i167 = 0; $_i167 < $_size163; ++$_i167)
              {
                $elem168 = null;
                $xfer += $input->readI64($elem168);
                if (is_scalar($elem168)) {
                  $val162 []= $elem168;
                } else {
                  $val162 []= $elem168;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key161) && !is_integer($key161)) ? serialize($key161) : $key161] = $val162;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter169 => $viter170)
          {
            $xfer += $kiter169->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter170));
              {
                foreach ($viter170 as $iter171 => $iter172)
                {
                  if (is_scalar($iter172)) {
                  $xfer += $output->writeI64($iter171);
                  } else {
                  $xfer += $output->writeI64($iter172);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size173 = 0;
            $_ktype174 = 0;
            $_vtype175 = 0;
            $xfer += $input->readMapBegin($_ktype174, $_vtype175, $_size173);
            for ($_i177 = 0; $_i177 < $_size173; ++$_i177)
            {
              $key178 = new \concourse\thrift\data\TObject();
              $val179 = array();
              $key178 = new \concourse\thrift\data\TObject();
              $xfer += $key178->read($input);
              $val179 = array();
              $_size180 = 0;
              $_etype183 = 0;
              $xfer += $input->readSetBegin($_etype183, $_size180);
              for ($_i184 = 0; $_i184 < $_size180; ++$_i184)
              {
                $elem185 = null;
                $xfer += $input->readI64($elem185);
                if (is_scalar($elem185)) {
                  $val179 []= $elem185;
                } else {
                  $val179 []= $elem185;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key178) && !is_integer($key178)) ? serialize($key178) : $key178] = $val179;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter186 => $viter187)
          {
            $xfer += $kiter186->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter187));
              {
                foreach ($viter187 as $iter188 => $iter189)
                {
                  if (is_scalar($iter189)) {
                  $xfer += $output->writeI64($iter188);
                  } else {
                  $xfer += $output->writeI64($iter189);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size190 = 0;
            $_etype193 = 0;
            $xfer += $input->readListBegin($_etype193, $_size190);
            for ($_i194 = 0; $_i194 < $_size190; ++$_i194)
            {
              $elem195 = null;
              $xfer += $input->readString($elem195);
              $this->keys []= $elem195;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter196)
          {
            $xfer += $output->writeString($iter196);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size197 = 0;
            $_ktype198 = 0;
            $_vtype199 = 0;
            $xfer += $input->readMapBegin($_ktype198, $_vtype199, $_size197);
            for ($_i201 = 0; $_i201 < $_size197; ++$_i201)
            {
              $key202 = '';
              $val203 = array();
              $xfer += $input->readString($key202);
              $val203 = array();
              $_size204 = 0;
              $_ktype205 = 0;
              $_vtype206 = 0;
              $xfer += $input->readMapBegin($_ktype205, $_vtype206, $_size204);
              for ($_i208 = 0; $_i208 < $_size204; ++$_i208)
              {
                $key209 = new \concourse\thrift\data\TObject();
                $val210 = array();
                $key209 = new \concourse\thrift\data\TObject();
                $xfer += $key209->read($input);
                $val210 = array();
                $_size211 = 0;
                $_etype214 = 0;
                $xfer += $input->readSetBegin($_etype214, $_size211);
                for ($_i215 = 0; $_i215 < $_size211; ++$_i215)
                {
                  $elem216 = null;
                  $xfer += $input->readI64($elem216);
                  if (is_scalar($elem216)) {
                    $val210 []= $elem216;
                  } else {
                    $val210 []= $elem216;
                  }
                }
                $xfer += $input->readSetEnd();
                $val203[(!is_string($key209) && !is_integer($key209)) ? serialize($key209) : $key209] = $val210;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key202) && !is_integer($key202)) ? serialize($key202) : $key202] = $val203;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter217 => $viter218)
          {
            $xfer += $output->writeString($kiter217);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter218));
              {
                foreach ($viter218 as $kiter219 => $viter220)
                {
                  $xfer += $kiter219->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter220));
                    {
                      foreach ($viter220 as $iter221 => $iter222)
                      {
                        if (is_scalar($iter222)) {
                        $xfer += $output->writeI64($iter221);
                        } else {
                        $xfer += $output->writeI64($iter222);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size223 = 0;
            $_etype226 = 0;
            $xfer += $input->readListBegin($_etype226, $_size223);
            for ($_i227 = 0; $_i227 < $_size223; ++$_i227)
            {
              $elem228 = null;
              $xfer += $input->readString($elem228);
              $this->keys []= $elem228;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter229)
          {
            $xfer += $output->writeString($iter229);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size230 = 0;
            $_ktype231 = 0;
            $_vtype232 = 0;
            $xfer += $input->readMapBegin($_ktype231, $_vtype232, $_size230);
            for ($_i234 = 0; $_i234 < $_size230; ++$_i234)
            {
              $key235 = '';
              $val236 = array();
              $xfer += $input->readString($key235);
              $val236 = array();
              $_size237 = 0;
              $_ktype238 = 0;
              $_vtype239 = 0;
              $xfer += $input->readMapBegin($_ktype238, $_vtype239, $_size237);
              for ($_i241 = 0; $_i241 < $_size237; ++$_i241)
              {
                $key242 = new \concourse\thrift\data\TObject();
                $val243 = array();
                $key242 = new \concourse\thrift\data\TObject();
                $xfer += $key242->read($input);
                $val243 = array();
                $_size244 = 0;
                $_etype247 = 0;
                $xfer += $input->readSetBegin($_etype247, $_size244);
                for ($_i248 = 0; $_i248 < $_size244; ++$_i248)
                {
                  $elem249 = null;
                  $xfer += $input->readI64($elem249);
                  if (is_scalar($elem249)) {
                    $val243 []= $elem249;
                  } else {
                    $val243 []= $elem249;
                  }
                }
                $xfer += $input->readSetEnd();
                $val236[(!is_string($key242) && !is_integer($key242)) ? serialize($key242) : $key242] = $val243;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key235) && !is_integer($key235)) ? serialize($key235) : $key235] = $val236;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter250 => $viter251)
          {
            $xfer += $output->writeString($kiter250);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter251));
              {
                foreach ($viter251 as $kiter252 => $viter253)
                {
                  $xfer += $kiter252->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter253));
                    {
                      foreach ($viter253 as $iter254 => $iter255)
                      {
                        if (is_scalar($iter255)) {
                        $xfer += $output->writeI64($iter254);
                        } else {
                        $xfer += $output->writeI64($iter255);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size256 = 0;
            $_ktype257 = 0;
            $_vtype258 = 0;
            $xfer += $input->readMapBegin($_ktype257, $_vtype258, $_size256);
            for ($_i260 = 0; $_i260 < $_size256; ++$_i260)
            {
              $key261 = 0;
              $val262 = array();
              $xfer += $input->readI64($key261);
              $val262 = array();
              $_size263 = 0;
              $_etype266 = 0;
              $xfer += $input->readSetBegin($_etype266, $_size263);
              for ($_i267 = 0; $_i267 < $_size263; ++$_i267)
              {
                $elem268 = null;
                $elem268 = new \concourse\thrift\data\TObject();
                $xfer += $elem268->read($input);
                if (is_scalar($elem268)) {
                  $val262 []= $elem268;
                } else {
                  $val262 []= $elem268;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key261) && !is_integer($key261)) ? serialize($key261) : $key261] = $val262;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter269 => $viter270)
          {
            $xfer += $output->writeI64($kiter269);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter270));
              {
                foreach ($viter270 as $iter271 => $iter272)
                {
                  if (is_scalar($iter272)) {
                  $xfer += $iter271->write($output);
                  } else {
                  $xfer += $iter272->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size273 = 0;
            $_ktype274 = 0;
            $_vtype275 = 0;
            $xfer += $input->readMapBegin($_ktype274, $_vtype275, $_size273);
            for ($_i277 = 0; $_i277 < $_size273; ++$_i277)
            {
              $key278 = 0;
              $val279 = array();
              $xfer += $input->readI64($key278);
              $val279 = array();
              $_size280 = 0;
              $_etype283 = 0;
              $xfer += $input->readSetBegin($_etype283, $_size280);
              for ($_i284 = 0; $_i284 < $_size280; ++$_i284)
              {
                $elem285 = null;
                $elem285 = new \concourse\thrift\data\TObject();
                $xfer += $elem285->read($input);
                if (is_scalar($elem285)) {
                  $val279 []= $elem285;
                } else {
                  $val279 []= $elem285;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key278) && !is_integer($key278)) ? serialize($key278) : $key278] = $val279;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter286 => $viter287)
          {
            $xfer += $output->writeI64($kiter286);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter287));
              {
                foreach ($viter287 as $iter288 => $iter289)
                {
                  if (is_scalar($iter289)) {
                  $xfer += $iter288->write($output);
                  } else {
                  $xfer += $iter289->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size290 = 0;
            $_ktype291 = 0;
            $_vtype292 = 0;
            $xfer += $input->readMapBegin($_ktype291, $_vtype292, $_size290);
            for ($_i294 = 0; $_i294 < $_size290; ++$_i294)
            {
              $key295 = 0;
              $val296 = array();
              $xfer += $input->readI64($key295);
              $val296 = array();
              $_size297 = 0;
              $_etype300 = 0;
              $xfer += $input->readSetBegin($_etype300, $_size297);
              for ($_i301 = 0; $_i301 < $_size297; ++$_i301)
              {
                $elem302 = null;
                $elem302 = new \concourse\thrift\data\TObject();
                $xfer += $elem302->read($input);
                if (is_scalar($elem302)) {
                  $val296 []= $elem302;
                } else {
                  $val296 []= $elem302;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key295) && !is_integer($key295)) ? serialize($key295) : $key295] = $val296;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter303 => $viter304)
          {
            $xfer += $output->writeI64($kiter303);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter304));
              {
                foreach ($viter304 as $iter305 => $iter306)
                {
                  if (is_scalar($iter306)) {
                  $xfer += $iter305->write($output);
                  } else {
                  $xfer += $iter306->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size307 = 0;
            $_ktype308 = 0;
            $_vtype309 = 0;
            $xfer += $input->readMapBegin($_ktype308, $_vtype309, $_size307);
            for ($_i311 = 0; $_i311 < $_size307; ++$_i311)
            {
              $key312 = 0;
              $val313 = array();
              $xfer += $input->readI64($key312);
              $val313 = array();
              $_size314 = 0;
              $_etype317 = 0;
              $xfer += $input->readSetBegin($_etype317, $_size314);
              for ($_i318 = 0; $_i318 < $_size314; ++$_i318)
              {
                $elem319 = null;
                $elem319 = new \concourse\thrift\data\TObject();
                $xfer += $elem319->read($input);
                if (is_scalar($elem319)) {
                  $val313 []= $elem319;
                } else {
                  $val313 []= $elem319;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key312) && !is_integer($key312)) ? serialize($key312) : $key312] = $val313;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter320 => $viter321)
          {
            $xfer += $output->writeI64($kiter320);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter321));
              {
                foreach ($viter321 as $iter322 => $iter323)
                {
                  if (is_scalar($iter323)) {
                  $xfer += $iter322->write($output);
                  } else {
                  $xfer += $iter323->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 4);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size324 = 0;
            $_ktype325 = 0;
            $_vtype326 = 0;
            $xfer += $input->readMapBegin($_ktype325, $_vtype326, $_size324);
            for ($_i328 = 0; $_i328 < $_size324; ++$_i328)
            {
              $key329 = 0;
              $val330 = array();
              $xfer += $input->readI64($key329);
              $val330 = array();
              $_size331 = 0;
              $_etype334 = 0;
              $xfer += $input->readSetBegin($_etype334, $_size331);
              for ($_i335 = 0; $_i335 < $_size331; ++$_i335)
              {
                $elem336 = null;
                $elem336 = new \concourse\thrift\data\TObject();
                $xfer += $elem336->read($input);
                if (is_scalar($elem336)) {
                  $val330 []= $elem336;
                } else {
                  $val330 []= $elem336;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key329) && !is_integer($key329)) ? serialize($key329) : $key329] = $val330;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter337 => $viter338)
          {
            $xfer += $output->writeI64($kiter337);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter338));
              {
                foreach ($viter338 as $iter339 => $iter340)
                {
                  if (is_scalar($iter340)) {
                  $xfer += $iter339->write($output);
                  } else {
                  $xfer += $iter340->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size341 = 0;
            $_etype344 = 0;
            $xfer += $input->readListBegin($_etype344, $_size341);
            for ($_i345 = 0; $_i345 < $_size341; ++$_i345)
            {
              $elem346 = null;
              $xfer += $input->readI64($elem346);
              $this->records []= $elem346;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter347)
          {
            $xfer += $output->writeI64($iter347);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecords_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size348 = 0;
            $_etype351 = 0;
            $xfer += $input->readListBegin($_etype351, $_size348);
            for ($_i352 = 0; $_i352 < $_size348; ++$_i352)
            {
              $elem353 = null;
              $xfer += $input->readString($elem353);
              $this->keys []= $elem353;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter354)
          {
            $xfer += $output->writeString($iter354);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size355 = 0;
            $_etype358 = 0;
            $xfer += $input->readListBegin($_etype358, $_size355);
            for ($_i359 = 0; $_i359 < $_size355; ++$_i359)
            {
              $elem360 = null;
              $xfer += $input->readI64($elem360);
              $this->records []= $elem360;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter361)
          {
            $xfer += $output->writeI64($iter361);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecords_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size362 = 0;
            $_etype365 = 0;
            $xfer += $input->readListBegin($_etype365, $_size362);
            for ($_i366 = 0; $_i366 < $_size362; ++$_i366)
            {
              $elem367 = null;
              $xfer += $input->readString($elem367);
              $this->keys []= $elem367;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size368 = 0;
            $_etype371 = 0;
            $xfer += $input->readListBegin($_etype371, $_size368);
            for ($_i372 = 0; $_i372 < $_size368; ++$_i372)
            {
              $elem373 = null;
              $xfer += $input->readI64($elem373);
              $this->records []= $elem373;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter374)
          {
            $xfer += $output->writeString($iter374);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter375)
          {
            $xfer += $output->writeI64($iter375);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecords_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_commit_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_commit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_commit_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_commit_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_commit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_commit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecord_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size376 = 0;
            $_etype379 = 0;
            $xfer += $input->readSetBegin($_etype379, $_size376);
            for ($_i380 = 0; $_i380 < $_size376; ++$_i380)
            {
              $elem381 = null;
              $xfer += $input->readString($elem381);
              if (is_scalar($elem381)) {
                $this->success []= $elem381;
              } else {
                $this->success []= $elem381;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter382 => $iter383)
          {
            if (is_scalar($iter383)) {
            $xfer += $output->writeString($iter382);
            } else {
            $xfer += $output->writeString($iter383);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTime_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTime_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTime_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size384 = 0;
            $_etype387 = 0;
            $xfer += $input->readSetBegin($_etype387, $_size384);
            for ($_i388 = 0; $_i388 < $_size384; ++$_i388)
            {
              $elem389 = null;
              $xfer += $input->readString($elem389);
              if (is_scalar($elem389)) {
                $this->success []= $elem389;
              } else {
                $this->success []= $elem389;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter390 => $iter391)
          {
            if (is_scalar($iter391)) {
            $xfer += $output->writeString($iter390);
            } else {
            $xfer += $output->writeString($iter391);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTimestr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size392 = 0;
            $_etype395 = 0;
            $xfer += $input->readSetBegin($_etype395, $_size392);
            for ($_i396 = 0; $_i396 < $_size392; ++$_i396)
            {
              $elem397 = null;
              $xfer += $input->readString($elem397);
              if (is_scalar($elem397)) {
                $this->success []= $elem397;
              } else {
                $this->success []= $elem397;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter398 => $iter399)
          {
            if (is_scalar($iter399)) {
            $xfer += $output->writeString($iter398);
            } else {
            $xfer += $output->writeString($iter399);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size400 = 0;
            $_etype403 = 0;
            $xfer += $input->readListBegin($_etype403, $_size400);
            for ($_i404 = 0; $_i404 < $_size400; ++$_i404)
            {
              $elem405 = null;
              $xfer += $input->readI64($elem405);
              $this->records []= $elem405;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter406)
          {
            $xfer += $output->writeI64($iter406);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size407 = 0;
            $_ktype408 = 0;
            $_vtype409 = 0;
            $xfer += $input->readMapBegin($_ktype408, $_vtype409, $_size407);
            for ($_i411 = 0; $_i411 < $_size407; ++$_i411)
            {
              $key412 = 0;
              $val413 = array();
              $xfer += $input->readI64($key412);
              $val413 = array();
              $_size414 = 0;
              $_etype417 = 0;
              $xfer += $input->readSetBegin($_etype417, $_size414);
              for ($_i418 = 0; $_i418 < $_size414; ++$_i418)
              {
                $elem419 = null;
                $xfer += $input->readString($elem419);
                if (is_scalar($elem419)) {
                  $val413 []= $elem419;
                } else {
                  $val413 []= $elem419;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key412) && !is_integer($key412)) ? serialize($key412) : $key412] = $val413;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter420 => $viter421)
          {
            $xfer += $output->writeI64($kiter420);
            {
              $output->writeSetBegin(TType::STRING, count($viter421));
              {
                foreach ($viter421 as $iter422 => $iter423)
                {
                  if (is_scalar($iter423)) {
                  $xfer += $output->writeString($iter422);
                  } else {
                  $xfer += $output->writeString($iter423);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size424 = 0;
            $_etype427 = 0;
            $xfer += $input->readListBegin($_etype427, $_size424);
            for ($_i428 = 0; $_i428 < $_size424; ++$_i428)
            {
              $elem429 = null;
              $xfer += $input->readI64($elem429);
              $this->records []= $elem429;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter430)
          {
            $xfer += $output->writeI64($iter430);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size431 = 0;
            $_ktype432 = 0;
            $_vtype433 = 0;
            $xfer += $input->readMapBegin($_ktype432, $_vtype433, $_size431);
            for ($_i435 = 0; $_i435 < $_size431; ++$_i435)
            {
              $key436 = 0;
              $val437 = array();
              $xfer += $input->readI64($key436);
              $val437 = array();
              $_size438 = 0;
              $_etype441 = 0;
              $xfer += $input->readSetBegin($_etype441, $_size438);
              for ($_i442 = 0; $_i442 < $_size438; ++$_i442)
              {
                $elem443 = null;
                $xfer += $input->readString($elem443);
                if (is_scalar($elem443)) {
                  $val437 []= $elem443;
                } else {
                  $val437 []= $elem443;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key436) && !is_integer($key436)) ? serialize($key436) : $key436] = $val437;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter444 => $viter445)
          {
            $xfer += $output->writeI64($kiter444);
            {
              $output->writeSetBegin(TType::STRING, count($viter445));
              {
                foreach ($viter445 as $iter446 => $iter447)
                {
                  if (is_scalar($iter447)) {
                  $xfer += $output->writeString($iter446);
                  } else {
                  $xfer += $output->writeString($iter447);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size448 = 0;
            $_etype451 = 0;
            $xfer += $input->readListBegin($_etype451, $_size448);
            for ($_i452 = 0; $_i452 < $_size448; ++$_i452)
            {
              $elem453 = null;
              $xfer += $input->readI64($elem453);
              $this->records []= $elem453;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTimestr_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter454)
          {
            $xfer += $output->writeI64($iter454);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size455 = 0;
            $_ktype456 = 0;
            $_vtype457 = 0;
            $xfer += $input->readMapBegin($_ktype456, $_vtype457, $_size455);
            for ($_i459 = 0; $_i459 < $_size455; ++$_i459)
            {
              $key460 = 0;
              $val461 = array();
              $xfer += $input->readI64($key460);
              $val461 = array();
              $_size462 = 0;
              $_etype465 = 0;
              $xfer += $input->readSetBegin($_etype465, $_size462);
              for ($_i466 = 0; $_i466 < $_size462; ++$_i466)
              {
                $elem467 = null;
                $xfer += $input->readString($elem467);
                if (is_scalar($elem467)) {
                  $val461 []= $elem467;
                } else {
                  $val461 []= $elem467;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key460) && !is_integer($key460)) ? serialize($key460) : $key460] = $val461;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter468 => $viter469)
          {
            $xfer += $output->writeI64($kiter468);
            {
              $output->writeSetBegin(TType::STRING, count($viter469));
              {
                foreach ($viter469 as $iter470 => $iter471)
                {
                  if (is_scalar($iter471)) {
                  $xfer += $output->writeString($iter470);
                  } else {
                  $xfer += $output->writeString($iter471);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStart_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStart_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size472 = 0;
            $_ktype473 = 0;
            $_vtype474 = 0;
            $xfer += $input->readMapBegin($_ktype473, $_vtype474, $_size472);
            for ($_i476 = 0; $_i476 < $_size472; ++$_i476)
            {
              $key477 = '';
              $val478 = array();
              $xfer += $input->readString($key477);
              $val478 = array();
              $_size479 = 0;
              $_ktype480 = 0;
              $_vtype481 = 0;
              $xfer += $input->readMapBegin($_ktype480, $_vtype481, $_size479);
              for ($_i483 = 0; $_i483 < $_size479; ++$_i483)
              {
                $key484 = 0;
                $val485 = array();
                $xfer += $input->readI32($key484);
                $val485 = array();
                $_size486 = 0;
                $_etype489 = 0;
                $xfer += $input->readSetBegin($_etype489, $_size486);
                for ($_i490 = 0; $_i490 < $_size486; ++$_i490)
                {
                  $elem491 = null;
                  $elem491 = new \concourse\thrift\data\TObject();
                  $xfer += $elem491->read($input);
                  if (is_scalar($elem491)) {
                    $val485 []= $elem491;
                  } else {
                    $val485 []= $elem491;
                  }
                }
                $xfer += $input->readSetEnd();
                $val478[(!is_string($key484) && !is_integer($key484)) ? serialize($key484) : $key484] = $val485;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key477) && !is_integer($key477)) ? serialize($key477) : $key477] = $val478;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter492 => $viter493)
          {
            $xfer += $output->writeString($kiter492);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter493));
              {
                foreach ($viter493 as $kiter494 => $viter495)
                {
                  $xfer += $output->writeI32($kiter494);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter495));
                    {
                      foreach ($viter495 as $iter496 => $iter497)
                      {
                        if (is_scalar($iter497)) {
                        $xfer += $iter496->write($output);
                        } else {
                        $xfer += $iter497->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size498 = 0;
            $_ktype499 = 0;
            $_vtype500 = 0;
            $xfer += $input->readMapBegin($_ktype499, $_vtype500, $_size498);
            for ($_i502 = 0; $_i502 < $_size498; ++$_i502)
            {
              $key503 = '';
              $val504 = array();
              $xfer += $input->readString($key503);
              $val504 = array();
              $_size505 = 0;
              $_ktype506 = 0;
              $_vtype507 = 0;
              $xfer += $input->readMapBegin($_ktype506, $_vtype507, $_size505);
              for ($_i509 = 0; $_i509 < $_size505; ++$_i509)
              {
                $key510 = 0;
                $val511 = array();
                $xfer += $input->readI32($key510);
                $val511 = array();
                $_size512 = 0;
                $_etype515 = 0;
                $xfer += $input->readSetBegin($_etype515, $_size512);
                for ($_i516 = 0; $_i516 < $_size512; ++$_i516)
                {
                  $elem517 = null;
                  $elem517 = new \concourse\thrift\data\TObject();
                  $xfer += $elem517->read($input);
                  if (is_scalar($elem517)) {
                    $val511 []= $elem517;
                  } else {
                    $val511 []= $elem517;
                  }
                }
                $xfer += $input->readSetEnd();
                $val504[(!is_string($key510) && !is_integer($key510)) ? serialize($key510) : $key510] = $val511;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key503) && !is_integer($key503)) ? serialize($key503) : $key503] = $val504;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter518 => $viter519)
          {
            $xfer += $output->writeString($kiter518);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter519));
              {
                foreach ($viter519 as $kiter520 => $viter521)
                {
                  $xfer += $output->writeI32($kiter520);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter521));
                    {
                      foreach ($viter521 as $iter522 => $iter523)
                      {
                        if (is_scalar($iter523)) {
                        $xfer += $iter522->write($output);
                        } else {
                        $xfer += $iter523->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartEnd_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 3);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size524 = 0;
            $_ktype525 = 0;
            $_vtype526 = 0;
            $xfer += $input->readMapBegin($_ktype525, $_vtype526, $_size524);
            for ($_i528 = 0; $_i528 < $_size524; ++$_i528)
            {
              $key529 = '';
              $val530 = array();
              $xfer += $input->readString($key529);
              $val530 = array();
              $_size531 = 0;
              $_ktype532 = 0;
              $_vtype533 = 0;
              $xfer += $input->readMapBegin($_ktype532, $_vtype533, $_size531);
              for ($_i535 = 0; $_i535 < $_size531; ++$_i535)
              {
                $key536 = 0;
                $val537 = array();
                $xfer += $input->readI32($key536);
                $val537 = array();
                $_size538 = 0;
                $_etype541 = 0;
                $xfer += $input->readSetBegin($_etype541, $_size538);
                for ($_i542 = 0; $_i542 < $_size538; ++$_i542)
                {
                  $elem543 = null;
                  $elem543 = new \concourse\thrift\data\TObject();
                  $xfer += $elem543->read($input);
                  if (is_scalar($elem543)) {
                    $val537 []= $elem543;
                  } else {
                    $val537 []= $elem543;
                  }
                }
                $xfer += $input->readSetEnd();
                $val530[(!is_string($key536) && !is_integer($key536)) ? serialize($key536) : $key536] = $val537;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key529) && !is_integer($key529)) ? serialize($key529) : $key529] = $val530;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter544 => $viter545)
          {
            $xfer += $output->writeString($kiter544);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter545));
              {
                foreach ($viter545 as $kiter546 => $viter547)
                {
                  $xfer += $output->writeI32($kiter546);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter547));
                    {
                      foreach ($viter547 as $iter548 => $iter549)
                      {
                        if (is_scalar($iter549)) {
                        $xfer += $iter548->write($output);
                        } else {
                        $xfer += $iter549->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstrEndstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 3);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size550 = 0;
            $_ktype551 = 0;
            $_vtype552 = 0;
            $xfer += $input->readMapBegin($_ktype551, $_vtype552, $_size550);
            for ($_i554 = 0; $_i554 < $_size550; ++$_i554)
            {
              $key555 = '';
              $val556 = array();
              $xfer += $input->readString($key555);
              $val556 = array();
              $_size557 = 0;
              $_ktype558 = 0;
              $_vtype559 = 0;
              $xfer += $input->readMapBegin($_ktype558, $_vtype559, $_size557);
              for ($_i561 = 0; $_i561 < $_size557; ++$_i561)
              {
                $key562 = 0;
                $val563 = array();
                $xfer += $input->readI32($key562);
                $val563 = array();
                $_size564 = 0;
                $_etype567 = 0;
                $xfer += $input->readSetBegin($_etype567, $_size564);
                for ($_i568 = 0; $_i568 < $_size564; ++$_i568)
                {
                  $elem569 = null;
                  $elem569 = new \concourse\thrift\data\TObject();
                  $xfer += $elem569->read($input);
                  if (is_scalar($elem569)) {
                    $val563 []= $elem569;
                  } else {
                    $val563 []= $elem569;
                  }
                }
                $xfer += $input->readSetEnd();
                $val556[(!is_string($key562) && !is_integer($key562)) ? serialize($key562) : $key562] = $val563;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key555) && !is_integer($key555)) ? serialize($key555) : $key555] = $val556;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter570 => $viter571)
          {
            $xfer += $output->writeString($kiter570);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter571));
              {
                foreach ($viter571 as $kiter572 => $viter573)
                {
                  $xfer += $output->writeI32($kiter572);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter573));
                    {
                      foreach ($viter573 as $iter574 => $iter575)
                      {
                        if (is_scalar($iter575)) {
                        $xfer += $iter574->write($output);
                        } else {
                        $xfer += $iter575->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size576 = 0;
            $_ktype577 = 0;
            $_vtype578 = 0;
            $xfer += $input->readMapBegin($_ktype577, $_vtype578, $_size576);
            for ($_i580 = 0; $_i580 < $_size576; ++$_i580)
            {
              $key581 = 0;
              $val582 = array();
              $xfer += $input->readI32($key581);
              $val582 = array();
              $_size583 = 0;
              $_etype586 = 0;
              $xfer += $input->readSetBegin($_etype586, $_size583);
              for ($_i587 = 0; $_i587 < $_size583; ++$_i587)
              {
                $elem588 = null;
                $elem588 = new \concourse\thrift\data\TObject();
                $xfer += $elem588->read($input);
                if (is_scalar($elem588)) {
                  $val582 []= $elem588;
                } else {
                  $val582 []= $elem588;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key581) && !is_integer($key581)) ? serialize($key581) : $key581] = $val582;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter589 => $viter590)
          {
            $xfer += $output->writeI32($kiter589);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter590));
              {
                foreach ($viter590 as $iter591 => $iter592)
                {
                  if (is_scalar($iter592)) {
                  $xfer += $iter591->write($output);
                  } else {
                  $xfer += $iter592->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size593 = 0;
            $_ktype594 = 0;
            $_vtype595 = 0;
            $xfer += $input->readMapBegin($_ktype594, $_vtype595, $_size593);
            for ($_i597 = 0; $_i597 < $_size593; ++$_i597)
            {
              $key598 = 0;
              $val599 = array();
              $xfer += $input->readI32($key598);
              $val599 = array();
              $_size600 = 0;
              $_etype603 = 0;
              $xfer += $input->readSetBegin($_etype603, $_size600);
              for ($_i604 = 0; $_i604 < $_size600; ++$_i604)
              {
                $elem605 = null;
                $elem605 = new \concourse\thrift\data\TObject();
                $xfer += $elem605->read($input);
                if (is_scalar($elem605)) {
                  $val599 []= $elem605;
                } else {
                  $val599 []= $elem605;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key598) && !is_integer($key598)) ? serialize($key598) : $key598] = $val599;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter606 => $viter607)
          {
            $xfer += $output->writeI32($kiter606);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter607));
              {
                foreach ($viter607 as $iter608 => $iter609)
                {
                  if (is_scalar($iter609)) {
                  $xfer += $iter608->write($output);
                  } else {
                  $xfer += $iter609->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size610 = 0;
            $_ktype611 = 0;
            $_vtype612 = 0;
            $xfer += $input->readMapBegin($_ktype611, $_vtype612, $_size610);
            for ($_i614 = 0; $_i614 < $_size610; ++$_i614)
            {
              $key615 = 0;
              $val616 = array();
              $xfer += $input->readI32($key615);
              $val616 = array();
              $_size617 = 0;
              $_etype620 = 0;
              $xfer += $input->readSetBegin($_etype620, $_size617);
              for ($_i621 = 0; $_i621 < $_size617; ++$_i621)
              {
                $elem622 = null;
                $elem622 = new \concourse\thrift\data\TObject();
                $xfer += $elem622->read($input);
                if (is_scalar($elem622)) {
                  $val616 []= $elem622;
                } else {
                  $val616 []= $elem622;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key615) && !is_integer($key615)) ? serialize($key615) : $key615] = $val616;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter623 => $viter624)
          {
            $xfer += $output->writeI32($kiter623);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter624));
              {
                foreach ($viter624 as $iter625 => $iter626)
                {
                  if (is_scalar($iter626)) {
                  $xfer += $iter625->write($output);
                  } else {
                  $xfer += $iter626->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 4);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size627 = 0;
            $_ktype628 = 0;
            $_vtype629 = 0;
            $xfer += $input->readMapBegin($_ktype628, $_vtype629, $_size627);
            for ($_i631 = 0; $_i631 < $_size627; ++$_i631)
            {
              $key632 = 0;
              $val633 = array();
              $xfer += $input->readI32($key632);
              $val633 = array();
              $_size634 = 0;
              $_etype637 = 0;
              $xfer += $input->readSetBegin($_etype637, $_size634);
              for ($_i638 = 0; $_i638 < $_size634; ++$_i638)
              {
                $elem639 = null;
                $elem639 = new \concourse\thrift\data\TObject();
                $xfer += $elem639->read($input);
                if (is_scalar($elem639)) {
                  $val633 []= $elem639;
                } else {
                  $val633 []= $elem639;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key632) && !is_integer($key632)) ? serialize($key632) : $key632] = $val633;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter640 => $viter641)
          {
            $xfer += $output->writeI32($kiter640);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter641));
              {
                foreach ($viter641 as $iter642 => $iter643)
                {
                  if (is_scalar($iter643)) {
                  $xfer += $iter642->write($output);
                  } else {
                  $xfer += $iter643->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size644 = 0;
            $_ktype645 = 0;
            $_vtype646 = 0;
            $xfer += $input->readMapBegin($_ktype645, $_vtype646, $_size644);
            for ($_i648 = 0; $_i648 < $_size644; ++$_i648)
            {
              $key649 = new \concourse\thrift\data\TObject();
              $val650 = array();
              $key649 = new \concourse\thrift\data\TObject();
              $xfer += $key649->read($input);
              $val650 = array();
              $_size651 = 0;
              $_ktype652 = 0;
              $_vtype653 = 0;
              $xfer += $input->readMapBegin($_ktype652, $_vtype653, $_size651);
              for ($_i655 = 0; $_i655 < $_size651; ++$_i655)
              {
                $key656 = 0;
                $val657 = array();
                $xfer += $input->readI32($key656);
                $val657 = array();
                $_size658 = 0;
                $_etype661 = 0;
                $xfer += $input->readSetBegin($_etype661, $_size658);
                for ($_i662 = 0; $_i662 < $_size658; ++$_i662)
                {
                  $elem663 = null;
                  $xfer += $input->readI64($elem663);
                  if (is_scalar($elem663)) {
                    $val657 []= $elem663;
                  } else {
                    $val657 []= $elem663;
                  }
                }
                $xfer += $input->readSetEnd();
                $val650[(!is_string($key656) && !is_integer($key656)) ? serialize($key656) : $key656] = $val657;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key649) && !is_integer($key649)) ? serialize($key649) : $key649] = $val650;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter664 => $viter665)
          {
            $xfer += $kiter664->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter665));
              {
                foreach ($viter665 as $kiter666 => $viter667)
                {
                  $xfer += $output->writeI32($kiter666);
                  {
                    $output->writeSetBegin(TType::I64, count($viter667));
                    {
                      foreach ($viter667 as $iter668 => $iter669)
                      {
                        if (is_scalar($iter669)) {
                        $xfer += $output->writeI64($iter668);
                        } else {
                        $xfer += $output->writeI64($iter669);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size670 = 0;
            $_ktype671 = 0;
            $_vtype672 = 0;
            $xfer += $input->readMapBegin($_ktype671, $_vtype672, $_size670);
            for ($_i674 = 0; $_i674 < $_size670; ++$_i674)
            {
              $key675 = new \concourse\thrift\data\TObject();
              $val676 = array();
              $key675 = new \concourse\thrift\data\TObject();
              $xfer += $key675->read($input);
              $val676 = array();
              $_size677 = 0;
              $_ktype678 = 0;
              $_vtype679 = 0;
              $xfer += $input->readMapBegin($_ktype678, $_vtype679, $_size677);
              for ($_i681 = 0; $_i681 < $_size677; ++$_i681)
              {
                $key682 = 0;
                $val683 = array();
                $xfer += $input->readI32($key682);
                $val683 = array();
                $_size684 = 0;
                $_etype687 = 0;
                $xfer += $input->readSetBegin($_etype687, $_size684);
                for ($_i688 = 0; $_i688 < $_size684; ++$_i688)
                {
                  $elem689 = null;
                  $xfer += $input->readI64($elem689);
                  if (is_scalar($elem689)) {
                    $val683 []= $elem689;
                  } else {
                    $val683 []= $elem689;
                  }
                }
                $xfer += $input->readSetEnd();
                $val676[(!is_string($key682) && !is_integer($key682)) ? serialize($key682) : $key682] = $val683;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key675) && !is_integer($key675)) ? serialize($key675) : $key675] = $val676;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter690 => $viter691)
          {
            $xfer += $kiter690->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter691));
              {
                foreach ($viter691 as $kiter692 => $viter693)
                {
                  $xfer += $output->writeI32($kiter692);
                  {
                    $output->writeSetBegin(TType::I64, count($viter693));
                    {
                      foreach ($viter693 as $iter694 => $iter695)
                      {
                        if (is_scalar($iter695)) {
                        $xfer += $output->writeI64($iter694);
                        } else {
                        $xfer += $output->writeI64($iter695);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 3);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size696 = 0;
            $_ktype697 = 0;
            $_vtype698 = 0;
            $xfer += $input->readMapBegin($_ktype697, $_vtype698, $_size696);
            for ($_i700 = 0; $_i700 < $_size696; ++$_i700)
            {
              $key701 = new \concourse\thrift\data\TObject();
              $val702 = array();
              $key701 = new \concourse\thrift\data\TObject();
              $xfer += $key701->read($input);
              $val702 = array();
              $_size703 = 0;
              $_ktype704 = 0;
              $_vtype705 = 0;
              $xfer += $input->readMapBegin($_ktype704, $_vtype705, $_size703);
              for ($_i707 = 0; $_i707 < $_size703; ++$_i707)
              {
                $key708 = 0;
                $val709 = array();
                $xfer += $input->readI32($key708);
                $val709 = array();
                $_size710 = 0;
                $_etype713 = 0;
                $xfer += $input->readSetBegin($_etype713, $_size710);
                for ($_i714 = 0; $_i714 < $_size710; ++$_i714)
                {
                  $elem715 = null;
                  $xfer += $input->readI64($elem715);
                  if (is_scalar($elem715)) {
                    $val709 []= $elem715;
                  } else {
                    $val709 []= $elem715;
                  }
                }
                $xfer += $input->readSetEnd();
                $val702[(!is_string($key708) && !is_integer($key708)) ? serialize($key708) : $key708] = $val709;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key701) && !is_integer($key701)) ? serialize($key701) : $key701] = $val702;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter716 => $viter717)
          {
            $xfer += $kiter716->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter717));
              {
                foreach ($viter717 as $kiter718 => $viter719)
                {
                  $xfer += $output->writeI32($kiter718);
                  {
                    $output->writeSetBegin(TType::I64, count($viter719));
                    {
                      foreach ($viter719 as $iter720 => $iter721)
                      {
                        if (is_scalar($iter721)) {
                        $xfer += $output->writeI64($iter720);
                        } else {
                        $xfer += $output->writeI64($iter721);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 3);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size722 = 0;
            $_ktype723 = 0;
            $_vtype724 = 0;
            $xfer += $input->readMapBegin($_ktype723, $_vtype724, $_size722);
            for ($_i726 = 0; $_i726 < $_size722; ++$_i726)
            {
              $key727 = new \concourse\thrift\data\TObject();
              $val728 = array();
              $key727 = new \concourse\thrift\data\TObject();
              $xfer += $key727->read($input);
              $val728 = array();
              $_size729 = 0;
              $_ktype730 = 0;
              $_vtype731 = 0;
              $xfer += $input->readMapBegin($_ktype730, $_vtype731, $_size729);
              for ($_i733 = 0; $_i733 < $_size729; ++$_i733)
              {
                $key734 = 0;
                $val735 = array();
                $xfer += $input->readI32($key734);
                $val735 = array();
                $_size736 = 0;
                $_etype739 = 0;
                $xfer += $input->readSetBegin($_etype739, $_size736);
                for ($_i740 = 0; $_i740 < $_size736; ++$_i740)
                {
                  $elem741 = null;
                  $xfer += $input->readI64($elem741);
                  if (is_scalar($elem741)) {
                    $val735 []= $elem741;
                  } else {
                    $val735 []= $elem741;
                  }
                }
                $xfer += $input->readSetEnd();
                $val728[(!is_string($key734) && !is_integer($key734)) ? serialize($key734) : $key734] = $val735;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key727) && !is_integer($key727)) ? serialize($key727) : $key727] = $val728;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter742 => $viter743)
          {
            $xfer += $kiter742->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter743));
              {
                foreach ($viter743 as $kiter744 => $viter745)
                {
                  $xfer += $output->writeI32($kiter744);
                  {
                    $output->writeSetBegin(TType::I64, count($viter745));
                    {
                      foreach ($viter745 as $iter746 => $iter747)
                      {
                        if (is_scalar($iter747)) {
                        $xfer += $output->writeI64($iter746);
                        } else {
                        $xfer += $output->writeI64($iter747);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_login_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_login_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_login_args');
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 1);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 2);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_login_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_login_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_login_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_logout_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_logout_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_logout_args');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 2);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_logout_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_logout_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_logout_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_stage_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_stage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_stage_args');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 2);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_stage_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_stage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_stage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJson_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJson_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJson_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size748 = 0;
            $_etype751 = 0;
            $xfer += $input->readSetBegin($_etype751, $_size748);
            for ($_i752 = 0; $_i752 < $_size748; ++$_i752)
            {
              $elem753 = null;
              $xfer += $input->readI64($elem753);
              if (is_scalar($elem753)) {
                $this->success []= $elem753;
              } else {
                $this->success []= $elem753;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJson_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter754 => $iter755)
          {
            if (is_scalar($iter755)) {
            $xfer += $output->writeI64($iter754);
            } else {
            $xfer += $output->writeI64($iter755);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecord_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size756 = 0;
            $_etype759 = 0;
            $xfer += $input->readListBegin($_etype759, $_size756);
            for ($_i760 = 0; $_i760 < $_size756; ++$_i760)
            {
              $elem761 = null;
              $xfer += $input->readI64($elem761);
              $this->records []= $elem761;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecords_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter762)
          {
            $xfer += $output->writeI64($iter762);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size763 = 0;
            $_ktype764 = 0;
            $_vtype765 = 0;
            $xfer += $input->readMapBegin($_ktype764, $_vtype765, $_size763);
            for ($_i767 = 0; $_i767 < $_size763; ++$_i767)
            {
              $key768 = 0;
              $val769 = false;
              $xfer += $input->readI64($key768);
              $xfer += $input->readBool($val769);
              $this->success[(!is_string($key768) && !is_integer($key768)) ? serialize($key768) : $key768] = $val769;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter770 => $viter771)
          {
            $xfer += $output->writeI64($kiter770);
            $xfer += $output->writeBool($viter771);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size772 = 0;
            $_etype775 = 0;
            $xfer += $input->readListBegin($_etype775, $_size772);
            for ($_i776 = 0; $_i776 < $_size772; ++$_i776)
            {
              $elem777 = null;
              $xfer += $input->readI64($elem777);
              $this->records []= $elem777;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter778)
          {
            $xfer += $output->writeI64($iter778);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size779 = 0;
            $_ktype780 = 0;
            $_vtype781 = 0;
            $xfer += $input->readMapBegin($_ktype780, $_vtype781, $_size779);
            for ($_i783 = 0; $_i783 < $_size779; ++$_i783)
            {
              $key784 = 0;
              $val785 = false;
              $xfer += $input->readI64($key784);
              $xfer += $input->readBool($val785);
              $this->success[(!is_string($key784) && !is_integer($key784)) ? serialize($key784) : $key784] = $val785;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter786 => $viter787)
          {
            $xfer += $output->writeI64($kiter786);
            $xfer += $output->writeBool($viter787);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size788 = 0;
            $_etype791 = 0;
            $xfer += $input->readListBegin($_etype791, $_size788);
            for ($_i792 = 0; $_i792 < $_size788; ++$_i792)
            {
              $elem793 = null;
              $xfer += $input->readI64($elem793);
              $this->records []= $elem793;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter794)
          {
            $xfer += $output->writeI64($iter794);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_inventory_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_inventory_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_inventory_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_inventory_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_inventory_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size795 = 0;
            $_etype798 = 0;
            $xfer += $input->readSetBegin($_etype798, $_size795);
            for ($_i799 = 0; $_i799 < $_size795; ++$_i799)
            {
              $elem800 = null;
              $xfer += $input->readI64($elem800);
              if (is_scalar($elem800)) {
                $this->success []= $elem800;
              } else {
                $this->success []= $elem800;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_inventory_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter801 => $iter802)
          {
            if (is_scalar($iter802)) {
            $xfer += $output->writeI64($iter801);
            } else {
            $xfer += $output->writeI64($iter802);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size803 = 0;
            $_ktype804 = 0;
            $_vtype805 = 0;
            $xfer += $input->readMapBegin($_ktype804, $_vtype805, $_size803);
            for ($_i807 = 0; $_i807 < $_size803; ++$_i807)
            {
              $key808 = '';
              $val809 = array();
              $xfer += $input->readString($key808);
              $val809 = array();
              $_size810 = 0;
              $_etype813 = 0;
              $xfer += $input->readSetBegin($_etype813, $_size810);
              for ($_i814 = 0; $_i814 < $_size810; ++$_i814)
              {
                $elem815 = null;
                $elem815 = new \concourse\thrift\data\TObject();
                $xfer += $elem815->read($input);
                if (is_scalar($elem815)) {
                  $val809 []= $elem815;
                } else {
                  $val809 []= $elem815;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key808) && !is_integer($key808)) ? serialize($key808) : $key808] = $val809;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter816 => $viter817)
          {
            $xfer += $output->writeString($kiter816);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter817));
              {
                foreach ($viter817 as $iter818 => $iter819)
                {
                  if (is_scalar($iter819)) {
                  $xfer += $iter818->write($output);
                  } else {
                  $xfer += $iter819->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size820 = 0;
            $_etype823 = 0;
            $xfer += $input->readListBegin($_etype823, $_size820);
            for ($_i824 = 0; $_i824 < $_size820; ++$_i824)
            {
              $elem825 = null;
              $xfer += $input->readI64($elem825);
              $this->records []= $elem825;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter826)
          {
            $xfer += $output->writeI64($iter826);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size827 = 0;
            $_ktype828 = 0;
            $_vtype829 = 0;
            $xfer += $input->readMapBegin($_ktype828, $_vtype829, $_size827);
            for ($_i831 = 0; $_i831 < $_size827; ++$_i831)
            {
              $key832 = 0;
              $val833 = array();
              $xfer += $input->readI64($key832);
              $val833 = array();
              $_size834 = 0;
              $_ktype835 = 0;
              $_vtype836 = 0;
              $xfer += $input->readMapBegin($_ktype835, $_vtype836, $_size834);
              for ($_i838 = 0; $_i838 < $_size834; ++$_i838)
              {
                $key839 = '';
                $val840 = array();
                $xfer += $input->readString($key839);
                $val840 = array();
                $_size841 = 0;
                $_etype844 = 0;
                $xfer += $input->readSetBegin($_etype844, $_size841);
                for ($_i845 = 0; $_i845 < $_size841; ++$_i845)
                {
                  $elem846 = null;
                  $elem846 = new \concourse\thrift\data\TObject();
                  $xfer += $elem846->read($input);
                  if (is_scalar($elem846)) {
                    $val840 []= $elem846;
                  } else {
                    $val840 []= $elem846;
                  }
                }
                $xfer += $input->readSetEnd();
                $val833[(!is_string($key839) && !is_integer($key839)) ? serialize($key839) : $key839] = $val840;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key832) && !is_integer($key832)) ? serialize($key832) : $key832] = $val833;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter847 => $viter848)
          {
            $xfer += $output->writeI64($kiter847);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter848));
              {
                foreach ($viter848 as $kiter849 => $viter850)
                {
                  $xfer += $output->writeString($kiter849);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter850));
                    {
                      foreach ($viter850 as $iter851 => $iter852)
                      {
                        if (is_scalar($iter852)) {
                        $xfer += $iter851->write($output);
                        } else {
                        $xfer += $iter852->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTime_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTime_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size853 = 0;
            $_ktype854 = 0;
            $_vtype855 = 0;
            $xfer += $input->readMapBegin($_ktype854, $_vtype855, $_size853);
            for ($_i857 = 0; $_i857 < $_size853; ++$_i857)
            {
              $key858 = '';
              $val859 = array();
              $xfer += $input->readString($key858);
              $val859 = array();
              $_size860 = 0;
              $_etype863 = 0;
              $xfer += $input->readSetBegin($_etype863, $_size860);
              for ($_i864 = 0; $_i864 < $_size860; ++$_i864)
              {
                $elem865 = null;
                $elem865 = new \concourse\thrift\data\TObject();
                $xfer += $elem865->read($input);
                if (is_scalar($elem865)) {
                  $val859 []= $elem865;
                } else {
                  $val859 []= $elem865;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key858) && !is_integer($key858)) ? serialize($key858) : $key858] = $val859;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter866 => $viter867)
          {
            $xfer += $output->writeString($kiter866);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter867));
              {
                foreach ($viter867 as $iter868 => $iter869)
                {
                  if (is_scalar($iter869)) {
                  $xfer += $iter868->write($output);
                  } else {
                  $xfer += $iter869->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTimestr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size870 = 0;
            $_ktype871 = 0;
            $_vtype872 = 0;
            $xfer += $input->readMapBegin($_ktype871, $_vtype872, $_size870);
            for ($_i874 = 0; $_i874 < $_size870; ++$_i874)
            {
              $key875 = '';
              $val876 = array();
              $xfer += $input->readString($key875);
              $val876 = array();
              $_size877 = 0;
              $_etype880 = 0;
              $xfer += $input->readSetBegin($_etype880, $_size877);
              for ($_i881 = 0; $_i881 < $_size877; ++$_i881)
              {
                $elem882 = null;
                $elem882 = new \concourse\thrift\data\TObject();
                $xfer += $elem882->read($input);
                if (is_scalar($elem882)) {
                  $val876 []= $elem882;
                } else {
                  $val876 []= $elem882;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key875) && !is_integer($key875)) ? serialize($key875) : $key875] = $val876;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter883 => $viter884)
          {
            $xfer += $output->writeString($kiter883);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter884));
              {
                foreach ($viter884 as $iter885 => $iter886)
                {
                  if (is_scalar($iter886)) {
                  $xfer += $iter885->write($output);
                  } else {
                  $xfer += $iter886->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size887 = 0;
            $_etype890 = 0;
            $xfer += $input->readListBegin($_etype890, $_size887);
            for ($_i891 = 0; $_i891 < $_size887; ++$_i891)
            {
              $elem892 = null;
              $xfer += $input->readI64($elem892);
              $this->records []= $elem892;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter893)
          {
            $xfer += $output->writeI64($iter893);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size894 = 0;
            $_ktype895 = 0;
            $_vtype896 = 0;
            $xfer += $input->readMapBegin($_ktype895, $_vtype896, $_size894);
            for ($_i898 = 0; $_i898 < $_size894; ++$_i898)
            {
              $key899 = 0;
              $val900 = array();
              $xfer += $input->readI64($key899);
              $val900 = array();
              $_size901 = 0;
              $_ktype902 = 0;
              $_vtype903 = 0;
              $xfer += $input->readMapBegin($_ktype902, $_vtype903, $_size901);
              for ($_i905 = 0; $_i905 < $_size901; ++$_i905)
              {
                $key906 = '';
                $val907 = array();
                $xfer += $input->readString($key906);
                $val907 = array();
                $_size908 = 0;
                $_etype911 = 0;
                $xfer += $input->readSetBegin($_etype911, $_size908);
                for ($_i912 = 0; $_i912 < $_size908; ++$_i912)
                {
                  $elem913 = null;
                  $elem913 = new \concourse\thrift\data\TObject();
                  $xfer += $elem913->read($input);
                  if (is_scalar($elem913)) {
                    $val907 []= $elem913;
                  } else {
                    $val907 []= $elem913;
                  }
                }
                $xfer += $input->readSetEnd();
                $val900[(!is_string($key906) && !is_integer($key906)) ? serialize($key906) : $key906] = $val907;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key899) && !is_integer($key899)) ? serialize($key899) : $key899] = $val900;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter914 => $viter915)
          {
            $xfer += $output->writeI64($kiter914);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter915));
              {
                foreach ($viter915 as $kiter916 => $viter917)
                {
                  $xfer += $output->writeString($kiter916);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter917));
                    {
                      foreach ($viter917 as $iter918 => $iter919)
                      {
                        if (is_scalar($iter919)) {
                        $xfer += $iter918->write($output);
                        } else {
                        $xfer += $iter919->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size920 = 0;
            $_etype923 = 0;
            $xfer += $input->readListBegin($_etype923, $_size920);
            for ($_i924 = 0; $_i924 < $_size920; ++$_i924)
            {
              $elem925 = null;
              $xfer += $input->readI64($elem925);
              $this->records []= $elem925;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTimestr_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter926)
          {
            $xfer += $output->writeI64($iter926);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size927 = 0;
            $_ktype928 = 0;
            $_vtype929 = 0;
            $xfer += $input->readMapBegin($_ktype928, $_vtype929, $_size927);
            for ($_i931 = 0; $_i931 < $_size927; ++$_i931)
            {
              $key932 = 0;
              $val933 = array();
              $xfer += $input->readI64($key932);
              $val933 = array();
              $_size934 = 0;
              $_ktype935 = 0;
              $_vtype936 = 0;
              $xfer += $input->readMapBegin($_ktype935, $_vtype936, $_size934);
              for ($_i938 = 0; $_i938 < $_size934; ++$_i938)
              {
                $key939 = '';
                $val940 = array();
                $xfer += $input->readString($key939);
                $val940 = array();
                $_size941 = 0;
                $_etype944 = 0;
                $xfer += $input->readSetBegin($_etype944, $_size941);
                for ($_i945 = 0; $_i945 < $_size941; ++$_i945)
                {
                  $elem946 = null;
                  $elem946 = new \concourse\thrift\data\TObject();
                  $xfer += $elem946->read($input);
                  if (is_scalar($elem946)) {
                    $val940 []= $elem946;
                  } else {
                    $val940 []= $elem946;
                  }
                }
                $xfer += $input->readSetEnd();
                $val933[(!is_string($key939) && !is_integer($key939)) ? serialize($key939) : $key939] = $val940;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key932) && !is_integer($key932)) ? serialize($key932) : $key932] = $val933;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter947 => $viter948)
          {
            $xfer += $output->writeI64($kiter947);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter948));
              {
                foreach ($viter948 as $kiter949 => $viter950)
                {
                  $xfer += $output->writeString($kiter949);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter950));
                    {
                      foreach ($viter950 as $iter951 => $iter952)
                      {
                        if (is_scalar($iter952)) {
                        $xfer += $iter951->write($output);
                        } else {
                        $xfer += $iter952->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size953 = 0;
            $_etype956 = 0;
            $xfer += $input->readSetBegin($_etype956, $_size953);
            for ($_i957 = 0; $_i957 < $_size953; ++$_i957)
            {
              $elem958 = null;
              $elem958 = new \concourse\thrift\data\TObject();
              $xfer += $elem958->read($input);
              if (is_scalar($elem958)) {
                $this->success []= $elem958;
              } else {
                $this->success []= $elem958;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter959 => $iter960)
          {
            if (is_scalar($iter960)) {
            $xfer += $iter959->write($output);
            } else {
            $xfer += $iter960->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size961 = 0;
            $_etype964 = 0;
            $xfer += $input->readSetBegin($_etype964, $_size961);
            for ($_i965 = 0; $_i965 < $_size961; ++$_i965)
            {
              $elem966 = null;
              $elem966 = new \concourse\thrift\data\TObject();
              $xfer += $elem966->read($input);
              if (is_scalar($elem966)) {
                $this->success []= $elem966;
              } else {
                $this->success []= $elem966;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter967 => $iter968)
          {
            if (is_scalar($iter968)) {
            $xfer += $iter967->write($output);
            } else {
            $xfer += $iter968->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size969 = 0;
            $_etype972 = 0;
            $xfer += $input->readSetBegin($_etype972, $_size969);
            for ($_i973 = 0; $_i973 < $_size969; ++$_i973)
            {
              $elem974 = null;
              $elem974 = new \concourse\thrift\data\TObject();
              $xfer += $elem974->read($input);
              if (is_scalar($elem974)) {
                $this->success []= $elem974;
              } else {
                $this->success []= $elem974;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter975 => $iter976)
          {
            if (is_scalar($iter976)) {
            $xfer += $iter975->write($output);
            } else {
            $xfer += $iter976->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size977 = 0;
            $_etype980 = 0;
            $xfer += $input->readListBegin($_etype980, $_size977);
            for ($_i981 = 0; $_i981 < $_size977; ++$_i981)
            {
              $elem982 = null;
              $xfer += $input->readString($elem982);
              $this->keys []= $elem982;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter983)
          {
            $xfer += $output->writeString($iter983);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size984 = 0;
            $_ktype985 = 0;
            $_vtype986 = 0;
            $xfer += $input->readMapBegin($_ktype985, $_vtype986, $_size984);
            for ($_i988 = 0; $_i988 < $_size984; ++$_i988)
            {
              $key989 = '';
              $val990 = array();
              $xfer += $input->readString($key989);
              $val990 = array();
              $_size991 = 0;
              $_etype994 = 0;
              $xfer += $input->readSetBegin($_etype994, $_size991);
              for ($_i995 = 0; $_i995 < $_size991; ++$_i995)
              {
                $elem996 = null;
                $elem996 = new \concourse\thrift\data\TObject();
                $xfer += $elem996->read($input);
                if (is_scalar($elem996)) {
                  $val990 []= $elem996;
                } else {
                  $val990 []= $elem996;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key989) && !is_integer($key989)) ? serialize($key989) : $key989] = $val990;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter997 => $viter998)
          {
            $xfer += $output->writeString($kiter997);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter998));
              {
                foreach ($viter998 as $iter999 => $iter1000)
                {
                  if (is_scalar($iter1000)) {
                  $xfer += $iter999->write($output);
                  } else {
                  $xfer += $iter1000->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1001 = 0;
            $_etype1004 = 0;
            $xfer += $input->readListBegin($_etype1004, $_size1001);
            for ($_i1005 = 0; $_i1005 < $_size1001; ++$_i1005)
            {
              $elem1006 = null;
              $xfer += $input->readString($elem1006);
              $this->keys []= $elem1006;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1007)
          {
            $xfer += $output->writeString($iter1007);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1008 = 0;
            $_ktype1009 = 0;
            $_vtype1010 = 0;
            $xfer += $input->readMapBegin($_ktype1009, $_vtype1010, $_size1008);
            for ($_i1012 = 0; $_i1012 < $_size1008; ++$_i1012)
            {
              $key1013 = '';
              $val1014 = array();
              $xfer += $input->readString($key1013);
              $val1014 = array();
              $_size1015 = 0;
              $_etype1018 = 0;
              $xfer += $input->readSetBegin($_etype1018, $_size1015);
              for ($_i1019 = 0; $_i1019 < $_size1015; ++$_i1019)
              {
                $elem1020 = null;
                $elem1020 = new \concourse\thrift\data\TObject();
                $xfer += $elem1020->read($input);
                if (is_scalar($elem1020)) {
                  $val1014 []= $elem1020;
                } else {
                  $val1014 []= $elem1020;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1013) && !is_integer($key1013)) ? serialize($key1013) : $key1013] = $val1014;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1021 => $viter1022)
          {
            $xfer += $output->writeString($kiter1021);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1022));
              {
                foreach ($viter1022 as $iter1023 => $iter1024)
                {
                  if (is_scalar($iter1024)) {
                  $xfer += $iter1023->write($output);
                  } else {
                  $xfer += $iter1024->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1025 = 0;
            $_etype1028 = 0;
            $xfer += $input->readListBegin($_etype1028, $_size1025);
            for ($_i1029 = 0; $_i1029 < $_size1025; ++$_i1029)
            {
              $elem1030 = null;
              $xfer += $input->readString($elem1030);
              $this->keys []= $elem1030;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1031)
          {
            $xfer += $output->writeString($iter1031);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1032 = 0;
            $_ktype1033 = 0;
            $_vtype1034 = 0;
            $xfer += $input->readMapBegin($_ktype1033, $_vtype1034, $_size1032);
            for ($_i1036 = 0; $_i1036 < $_size1032; ++$_i1036)
            {
              $key1037 = '';
              $val1038 = array();
              $xfer += $input->readString($key1037);
              $val1038 = array();
              $_size1039 = 0;
              $_etype1042 = 0;
              $xfer += $input->readSetBegin($_etype1042, $_size1039);
              for ($_i1043 = 0; $_i1043 < $_size1039; ++$_i1043)
              {
                $elem1044 = null;
                $elem1044 = new \concourse\thrift\data\TObject();
                $xfer += $elem1044->read($input);
                if (is_scalar($elem1044)) {
                  $val1038 []= $elem1044;
                } else {
                  $val1038 []= $elem1044;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1037) && !is_integer($key1037)) ? serialize($key1037) : $key1037] = $val1038;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1045 => $viter1046)
          {
            $xfer += $output->writeString($kiter1045);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1046));
              {
                foreach ($viter1046 as $iter1047 => $iter1048)
                {
                  if (is_scalar($iter1048)) {
                  $xfer += $iter1047->write($output);
                  } else {
                  $xfer += $iter1048->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1049 = 0;
            $_etype1052 = 0;
            $xfer += $input->readListBegin($_etype1052, $_size1049);
            for ($_i1053 = 0; $_i1053 < $_size1049; ++$_i1053)
            {
              $elem1054 = null;
              $xfer += $input->readString($elem1054);
              $this->keys []= $elem1054;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1055 = 0;
            $_etype1058 = 0;
            $xfer += $input->readListBegin($_etype1058, $_size1055);
            for ($_i1059 = 0; $_i1059 < $_size1055; ++$_i1059)
            {
              $elem1060 = null;
              $xfer += $input->readI64($elem1060);
              $this->records []= $elem1060;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1061)
          {
            $xfer += $output->writeString($iter1061);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1062)
          {
            $xfer += $output->writeI64($iter1062);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1063 = 0;
            $_ktype1064 = 0;
            $_vtype1065 = 0;
            $xfer += $input->readMapBegin($_ktype1064, $_vtype1065, $_size1063);
            for ($_i1067 = 0; $_i1067 < $_size1063; ++$_i1067)
            {
              $key1068 = 0;
              $val1069 = array();
              $xfer += $input->readI64($key1068);
              $val1069 = array();
              $_size1070 = 0;
              $_ktype1071 = 0;
              $_vtype1072 = 0;
              $xfer += $input->readMapBegin($_ktype1071, $_vtype1072, $_size1070);
              for ($_i1074 = 0; $_i1074 < $_size1070; ++$_i1074)
              {
                $key1075 = '';
                $val1076 = array();
                $xfer += $input->readString($key1075);
                $val1076 = array();
                $_size1077 = 0;
                $_etype1080 = 0;
                $xfer += $input->readSetBegin($_etype1080, $_size1077);
                for ($_i1081 = 0; $_i1081 < $_size1077; ++$_i1081)
                {
                  $elem1082 = null;
                  $elem1082 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1082->read($input);
                  if (is_scalar($elem1082)) {
                    $val1076 []= $elem1082;
                  } else {
                    $val1076 []= $elem1082;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1069[(!is_string($key1075) && !is_integer($key1075)) ? serialize($key1075) : $key1075] = $val1076;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1068) && !is_integer($key1068)) ? serialize($key1068) : $key1068] = $val1069;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1083 => $viter1084)
          {
            $xfer += $output->writeI64($kiter1083);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1084));
              {
                foreach ($viter1084 as $kiter1085 => $viter1086)
                {
                  $xfer += $output->writeString($kiter1085);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1086));
                    {
                      foreach ($viter1086 as $iter1087 => $iter1088)
                      {
                        if (is_scalar($iter1088)) {
                        $xfer += $iter1087->write($output);
                        } else {
                        $xfer += $iter1088->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1089 = 0;
            $_etype1092 = 0;
            $xfer += $input->readListBegin($_etype1092, $_size1089);
            for ($_i1093 = 0; $_i1093 < $_size1089; ++$_i1093)
            {
              $elem1094 = null;
              $xfer += $input->readI64($elem1094);
              $this->records []= $elem1094;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1095)
          {
            $xfer += $output->writeI64($iter1095);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1096 = 0;
            $_ktype1097 = 0;
            $_vtype1098 = 0;
            $xfer += $input->readMapBegin($_ktype1097, $_vtype1098, $_size1096);
            for ($_i1100 = 0; $_i1100 < $_size1096; ++$_i1100)
            {
              $key1101 = 0;
              $val1102 = array();
              $xfer += $input->readI64($key1101);
              $val1102 = array();
              $_size1103 = 0;
              $_etype1106 = 0;
              $xfer += $input->readSetBegin($_etype1106, $_size1103);
              for ($_i1107 = 0; $_i1107 < $_size1103; ++$_i1107)
              {
                $elem1108 = null;
                $elem1108 = new \concourse\thrift\data\TObject();
                $xfer += $elem1108->read($input);
                if (is_scalar($elem1108)) {
                  $val1102 []= $elem1108;
                } else {
                  $val1102 []= $elem1108;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1101) && !is_integer($key1101)) ? serialize($key1101) : $key1101] = $val1102;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1109 => $viter1110)
          {
            $xfer += $output->writeI64($kiter1109);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1110));
              {
                foreach ($viter1110 as $iter1111 => $iter1112)
                {
                  if (is_scalar($iter1112)) {
                  $xfer += $iter1111->write($output);
                  } else {
                  $xfer += $iter1112->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1113 = 0;
            $_etype1116 = 0;
            $xfer += $input->readListBegin($_etype1116, $_size1113);
            for ($_i1117 = 0; $_i1117 < $_size1113; ++$_i1117)
            {
              $elem1118 = null;
              $xfer += $input->readI64($elem1118);
              $this->records []= $elem1118;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1119)
          {
            $xfer += $output->writeI64($iter1119);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1120 = 0;
            $_ktype1121 = 0;
            $_vtype1122 = 0;
            $xfer += $input->readMapBegin($_ktype1121, $_vtype1122, $_size1120);
            for ($_i1124 = 0; $_i1124 < $_size1120; ++$_i1124)
            {
              $key1125 = 0;
              $val1126 = array();
              $xfer += $input->readI64($key1125);
              $val1126 = array();
              $_size1127 = 0;
              $_etype1130 = 0;
              $xfer += $input->readSetBegin($_etype1130, $_size1127);
              for ($_i1131 = 0; $_i1131 < $_size1127; ++$_i1131)
              {
                $elem1132 = null;
                $elem1132 = new \concourse\thrift\data\TObject();
                $xfer += $elem1132->read($input);
                if (is_scalar($elem1132)) {
                  $val1126 []= $elem1132;
                } else {
                  $val1126 []= $elem1132;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1125) && !is_integer($key1125)) ? serialize($key1125) : $key1125] = $val1126;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1133 => $viter1134)
          {
            $xfer += $output->writeI64($kiter1133);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1134));
              {
                foreach ($viter1134 as $iter1135 => $iter1136)
                {
                  if (is_scalar($iter1136)) {
                  $xfer += $iter1135->write($output);
                  } else {
                  $xfer += $iter1136->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1137 = 0;
            $_etype1140 = 0;
            $xfer += $input->readListBegin($_etype1140, $_size1137);
            for ($_i1141 = 0; $_i1141 < $_size1137; ++$_i1141)
            {
              $elem1142 = null;
              $xfer += $input->readI64($elem1142);
              $this->records []= $elem1142;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1143)
          {
            $xfer += $output->writeI64($iter1143);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1144 = 0;
            $_ktype1145 = 0;
            $_vtype1146 = 0;
            $xfer += $input->readMapBegin($_ktype1145, $_vtype1146, $_size1144);
            for ($_i1148 = 0; $_i1148 < $_size1144; ++$_i1148)
            {
              $key1149 = 0;
              $val1150 = array();
              $xfer += $input->readI64($key1149);
              $val1150 = array();
              $_size1151 = 0;
              $_etype1154 = 0;
              $xfer += $input->readSetBegin($_etype1154, $_size1151);
              for ($_i1155 = 0; $_i1155 < $_size1151; ++$_i1155)
              {
                $elem1156 = null;
                $elem1156 = new \concourse\thrift\data\TObject();
                $xfer += $elem1156->read($input);
                if (is_scalar($elem1156)) {
                  $val1150 []= $elem1156;
                } else {
                  $val1150 []= $elem1156;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1149) && !is_integer($key1149)) ? serialize($key1149) : $key1149] = $val1150;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1157 => $viter1158)
          {
            $xfer += $output->writeI64($kiter1157);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1158));
              {
                foreach ($viter1158 as $iter1159 => $iter1160)
                {
                  if (is_scalar($iter1160)) {
                  $xfer += $iter1159->write($output);
                  } else {
                  $xfer += $iter1160->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1161 = 0;
            $_etype1164 = 0;
            $xfer += $input->readListBegin($_etype1164, $_size1161);
            for ($_i1165 = 0; $_i1165 < $_size1161; ++$_i1165)
            {
              $elem1166 = null;
              $xfer += $input->readString($elem1166);
              $this->keys []= $elem1166;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1167 = 0;
            $_etype1170 = 0;
            $xfer += $input->readListBegin($_etype1170, $_size1167);
            for ($_i1171 = 0; $_i1171 < $_size1167; ++$_i1171)
            {
              $elem1172 = null;
              $xfer += $input->readI64($elem1172);
              $this->records []= $elem1172;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1173)
          {
            $xfer += $output->writeString($iter1173);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1174)
          {
            $xfer += $output->writeI64($iter1174);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1175 = 0;
            $_ktype1176 = 0;
            $_vtype1177 = 0;
            $xfer += $input->readMapBegin($_ktype1176, $_vtype1177, $_size1175);
            for ($_i1179 = 0; $_i1179 < $_size1175; ++$_i1179)
            {
              $key1180 = 0;
              $val1181 = array();
              $xfer += $input->readI64($key1180);
              $val1181 = array();
              $_size1182 = 0;
              $_ktype1183 = 0;
              $_vtype1184 = 0;
              $xfer += $input->readMapBegin($_ktype1183, $_vtype1184, $_size1182);
              for ($_i1186 = 0; $_i1186 < $_size1182; ++$_i1186)
              {
                $key1187 = '';
                $val1188 = array();
                $xfer += $input->readString($key1187);
                $val1188 = array();
                $_size1189 = 0;
                $_etype1192 = 0;
                $xfer += $input->readSetBegin($_etype1192, $_size1189);
                for ($_i1193 = 0; $_i1193 < $_size1189; ++$_i1193)
                {
                  $elem1194 = null;
                  $elem1194 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1194->read($input);
                  if (is_scalar($elem1194)) {
                    $val1188 []= $elem1194;
                  } else {
                    $val1188 []= $elem1194;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1181[(!is_string($key1187) && !is_integer($key1187)) ? serialize($key1187) : $key1187] = $val1188;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1180) && !is_integer($key1180)) ? serialize($key1180) : $key1180] = $val1181;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1195 => $viter1196)
          {
            $xfer += $output->writeI64($kiter1195);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1196));
              {
                foreach ($viter1196 as $kiter1197 => $viter1198)
                {
                  $xfer += $output->writeString($kiter1197);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1198));
                    {
                      foreach ($viter1198 as $iter1199 => $iter1200)
                      {
                        if (is_scalar($iter1200)) {
                        $xfer += $iter1199->write($output);
                        } else {
                        $xfer += $iter1200->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1201 = 0;
            $_etype1204 = 0;
            $xfer += $input->readListBegin($_etype1204, $_size1201);
            for ($_i1205 = 0; $_i1205 < $_size1201; ++$_i1205)
            {
              $elem1206 = null;
              $xfer += $input->readString($elem1206);
              $this->keys []= $elem1206;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1207 = 0;
            $_etype1210 = 0;
            $xfer += $input->readListBegin($_etype1210, $_size1207);
            for ($_i1211 = 0; $_i1211 < $_size1207; ++$_i1211)
            {
              $elem1212 = null;
              $xfer += $input->readI64($elem1212);
              $this->records []= $elem1212;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1213)
          {
            $xfer += $output->writeString($iter1213);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1214)
          {
            $xfer += $output->writeI64($iter1214);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1215 = 0;
            $_ktype1216 = 0;
            $_vtype1217 = 0;
            $xfer += $input->readMapBegin($_ktype1216, $_vtype1217, $_size1215);
            for ($_i1219 = 0; $_i1219 < $_size1215; ++$_i1219)
            {
              $key1220 = 0;
              $val1221 = array();
              $xfer += $input->readI64($key1220);
              $val1221 = array();
              $_size1222 = 0;
              $_ktype1223 = 0;
              $_vtype1224 = 0;
              $xfer += $input->readMapBegin($_ktype1223, $_vtype1224, $_size1222);
              for ($_i1226 = 0; $_i1226 < $_size1222; ++$_i1226)
              {
                $key1227 = '';
                $val1228 = array();
                $xfer += $input->readString($key1227);
                $val1228 = array();
                $_size1229 = 0;
                $_etype1232 = 0;
                $xfer += $input->readSetBegin($_etype1232, $_size1229);
                for ($_i1233 = 0; $_i1233 < $_size1229; ++$_i1233)
                {
                  $elem1234 = null;
                  $elem1234 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1234->read($input);
                  if (is_scalar($elem1234)) {
                    $val1228 []= $elem1234;
                  } else {
                    $val1228 []= $elem1234;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1221[(!is_string($key1227) && !is_integer($key1227)) ? serialize($key1227) : $key1227] = $val1228;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1220) && !is_integer($key1220)) ? serialize($key1220) : $key1220] = $val1221;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1235 => $viter1236)
          {
            $xfer += $output->writeI64($kiter1235);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1236));
              {
                foreach ($viter1236 as $kiter1237 => $viter1238)
                {
                  $xfer += $output->writeString($kiter1237);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1238));
                    {
                      foreach ($viter1238 as $iter1239 => $iter1240)
                      {
                        if (is_scalar($iter1240)) {
                        $xfer += $iter1239->write($output);
                        } else {
                        $xfer += $iter1240->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteria_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1241 = 0;
            $_ktype1242 = 0;
            $_vtype1243 = 0;
            $xfer += $input->readMapBegin($_ktype1242, $_vtype1243, $_size1241);
            for ($_i1245 = 0; $_i1245 < $_size1241; ++$_i1245)
            {
              $key1246 = 0;
              $val1247 = array();
              $xfer += $input->readI64($key1246);
              $val1247 = array();
              $_size1248 = 0;
              $_ktype1249 = 0;
              $_vtype1250 = 0;
              $xfer += $input->readMapBegin($_ktype1249, $_vtype1250, $_size1248);
              for ($_i1252 = 0; $_i1252 < $_size1248; ++$_i1252)
              {
                $key1253 = '';
                $val1254 = array();
                $xfer += $input->readString($key1253);
                $val1254 = array();
                $_size1255 = 0;
                $_etype1258 = 0;
                $xfer += $input->readSetBegin($_etype1258, $_size1255);
                for ($_i1259 = 0; $_i1259 < $_size1255; ++$_i1259)
                {
                  $elem1260 = null;
                  $elem1260 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1260->read($input);
                  if (is_scalar($elem1260)) {
                    $val1254 []= $elem1260;
                  } else {
                    $val1254 []= $elem1260;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1247[(!is_string($key1253) && !is_integer($key1253)) ? serialize($key1253) : $key1253] = $val1254;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1246) && !is_integer($key1246)) ? serialize($key1246) : $key1246] = $val1247;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1261 => $viter1262)
          {
            $xfer += $output->writeI64($kiter1261);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1262));
              {
                foreach ($viter1262 as $kiter1263 => $viter1264)
                {
                  $xfer += $output->writeString($kiter1263);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1264));
                    {
                      foreach ($viter1264 as $iter1265 => $iter1266)
                      {
                        if (is_scalar($iter1266)) {
                        $xfer += $iter1265->write($output);
                        } else {
                        $xfer += $iter1266->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1267 = 0;
            $_ktype1268 = 0;
            $_vtype1269 = 0;
            $xfer += $input->readMapBegin($_ktype1268, $_vtype1269, $_size1267);
            for ($_i1271 = 0; $_i1271 < $_size1267; ++$_i1271)
            {
              $key1272 = 0;
              $val1273 = array();
              $xfer += $input->readI64($key1272);
              $val1273 = array();
              $_size1274 = 0;
              $_ktype1275 = 0;
              $_vtype1276 = 0;
              $xfer += $input->readMapBegin($_ktype1275, $_vtype1276, $_size1274);
              for ($_i1278 = 0; $_i1278 < $_size1274; ++$_i1278)
              {
                $key1279 = '';
                $val1280 = array();
                $xfer += $input->readString($key1279);
                $val1280 = array();
                $_size1281 = 0;
                $_etype1284 = 0;
                $xfer += $input->readSetBegin($_etype1284, $_size1281);
                for ($_i1285 = 0; $_i1285 < $_size1281; ++$_i1285)
                {
                  $elem1286 = null;
                  $elem1286 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1286->read($input);
                  if (is_scalar($elem1286)) {
                    $val1280 []= $elem1286;
                  } else {
                    $val1280 []= $elem1286;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1273[(!is_string($key1279) && !is_integer($key1279)) ? serialize($key1279) : $key1279] = $val1280;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1272) && !is_integer($key1272)) ? serialize($key1272) : $key1272] = $val1273;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1287 => $viter1288)
          {
            $xfer += $output->writeI64($kiter1287);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1288));
              {
                foreach ($viter1288 as $kiter1289 => $viter1290)
                {
                  $xfer += $output->writeString($kiter1289);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1290));
                    {
                      foreach ($viter1290 as $iter1291 => $iter1292)
                      {
                        if (is_scalar($iter1292)) {
                        $xfer += $iter1291->write($output);
                        } else {
                        $xfer += $iter1292->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTime_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1293 = 0;
            $_ktype1294 = 0;
            $_vtype1295 = 0;
            $xfer += $input->readMapBegin($_ktype1294, $_vtype1295, $_size1293);
            for ($_i1297 = 0; $_i1297 < $_size1293; ++$_i1297)
            {
              $key1298 = 0;
              $val1299 = array();
              $xfer += $input->readI64($key1298);
              $val1299 = array();
              $_size1300 = 0;
              $_ktype1301 = 0;
              $_vtype1302 = 0;
              $xfer += $input->readMapBegin($_ktype1301, $_vtype1302, $_size1300);
              for ($_i1304 = 0; $_i1304 < $_size1300; ++$_i1304)
              {
                $key1305 = '';
                $val1306 = array();
                $xfer += $input->readString($key1305);
                $val1306 = array();
                $_size1307 = 0;
                $_etype1310 = 0;
                $xfer += $input->readSetBegin($_etype1310, $_size1307);
                for ($_i1311 = 0; $_i1311 < $_size1307; ++$_i1311)
                {
                  $elem1312 = null;
                  $elem1312 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1312->read($input);
                  if (is_scalar($elem1312)) {
                    $val1306 []= $elem1312;
                  } else {
                    $val1306 []= $elem1312;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1299[(!is_string($key1305) && !is_integer($key1305)) ? serialize($key1305) : $key1305] = $val1306;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1298) && !is_integer($key1298)) ? serialize($key1298) : $key1298] = $val1299;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1313 => $viter1314)
          {
            $xfer += $output->writeI64($kiter1313);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1314));
              {
                foreach ($viter1314 as $kiter1315 => $viter1316)
                {
                  $xfer += $output->writeString($kiter1315);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1316));
                    {
                      foreach ($viter1316 as $iter1317 => $iter1318)
                      {
                        if (is_scalar($iter1318)) {
                        $xfer += $iter1317->write($output);
                        } else {
                        $xfer += $iter1318->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTimestr_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1319 = 0;
            $_ktype1320 = 0;
            $_vtype1321 = 0;
            $xfer += $input->readMapBegin($_ktype1320, $_vtype1321, $_size1319);
            for ($_i1323 = 0; $_i1323 < $_size1319; ++$_i1323)
            {
              $key1324 = 0;
              $val1325 = array();
              $xfer += $input->readI64($key1324);
              $val1325 = array();
              $_size1326 = 0;
              $_ktype1327 = 0;
              $_vtype1328 = 0;
              $xfer += $input->readMapBegin($_ktype1327, $_vtype1328, $_size1326);
              for ($_i1330 = 0; $_i1330 < $_size1326; ++$_i1330)
              {
                $key1331 = '';
                $val1332 = array();
                $xfer += $input->readString($key1331);
                $val1332 = array();
                $_size1333 = 0;
                $_etype1336 = 0;
                $xfer += $input->readSetBegin($_etype1336, $_size1333);
                for ($_i1337 = 0; $_i1337 < $_size1333; ++$_i1337)
                {
                  $elem1338 = null;
                  $elem1338 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1338->read($input);
                  if (is_scalar($elem1338)) {
                    $val1332 []= $elem1338;
                  } else {
                    $val1332 []= $elem1338;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1325[(!is_string($key1331) && !is_integer($key1331)) ? serialize($key1331) : $key1331] = $val1332;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1324) && !is_integer($key1324)) ? serialize($key1324) : $key1324] = $val1325;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1339 => $viter1340)
          {
            $xfer += $output->writeI64($kiter1339);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1340));
              {
                foreach ($viter1340 as $kiter1341 => $viter1342)
                {
                  $xfer += $output->writeString($kiter1341);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1342));
                    {
                      foreach ($viter1342 as $iter1343 => $iter1344)
                      {
                        if (is_scalar($iter1344)) {
                        $xfer += $iter1343->write($output);
                        } else {
                        $xfer += $iter1344->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTime_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1345 = 0;
            $_ktype1346 = 0;
            $_vtype1347 = 0;
            $xfer += $input->readMapBegin($_ktype1346, $_vtype1347, $_size1345);
            for ($_i1349 = 0; $_i1349 < $_size1345; ++$_i1349)
            {
              $key1350 = 0;
              $val1351 = array();
              $xfer += $input->readI64($key1350);
              $val1351 = array();
              $_size1352 = 0;
              $_ktype1353 = 0;
              $_vtype1354 = 0;
              $xfer += $input->readMapBegin($_ktype1353, $_vtype1354, $_size1352);
              for ($_i1356 = 0; $_i1356 < $_size1352; ++$_i1356)
              {
                $key1357 = '';
                $val1358 = array();
                $xfer += $input->readString($key1357);
                $val1358 = array();
                $_size1359 = 0;
                $_etype1362 = 0;
                $xfer += $input->readSetBegin($_etype1362, $_size1359);
                for ($_i1363 = 0; $_i1363 < $_size1359; ++$_i1363)
                {
                  $elem1364 = null;
                  $elem1364 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1364->read($input);
                  if (is_scalar($elem1364)) {
                    $val1358 []= $elem1364;
                  } else {
                    $val1358 []= $elem1364;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1351[(!is_string($key1357) && !is_integer($key1357)) ? serialize($key1357) : $key1357] = $val1358;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1350) && !is_integer($key1350)) ? serialize($key1350) : $key1350] = $val1351;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1365 => $viter1366)
          {
            $xfer += $output->writeI64($kiter1365);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1366));
              {
                foreach ($viter1366 as $kiter1367 => $viter1368)
                {
                  $xfer += $output->writeString($kiter1367);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1368));
                    {
                      foreach ($viter1368 as $iter1369 => $iter1370)
                      {
                        if (is_scalar($iter1370)) {
                        $xfer += $iter1369->write($output);
                        } else {
                        $xfer += $iter1370->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTimestr_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1371 = 0;
            $_ktype1372 = 0;
            $_vtype1373 = 0;
            $xfer += $input->readMapBegin($_ktype1372, $_vtype1373, $_size1371);
            for ($_i1375 = 0; $_i1375 < $_size1371; ++$_i1375)
            {
              $key1376 = 0;
              $val1377 = array();
              $xfer += $input->readI64($key1376);
              $val1377 = array();
              $_size1378 = 0;
              $_ktype1379 = 0;
              $_vtype1380 = 0;
              $xfer += $input->readMapBegin($_ktype1379, $_vtype1380, $_size1378);
              for ($_i1382 = 0; $_i1382 < $_size1378; ++$_i1382)
              {
                $key1383 = '';
                $val1384 = array();
                $xfer += $input->readString($key1383);
                $val1384 = array();
                $_size1385 = 0;
                $_etype1388 = 0;
                $xfer += $input->readSetBegin($_etype1388, $_size1385);
                for ($_i1389 = 0; $_i1389 < $_size1385; ++$_i1389)
                {
                  $elem1390 = null;
                  $elem1390 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1390->read($input);
                  if (is_scalar($elem1390)) {
                    $val1384 []= $elem1390;
                  } else {
                    $val1384 []= $elem1390;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1377[(!is_string($key1383) && !is_integer($key1383)) ? serialize($key1383) : $key1383] = $val1384;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1376) && !is_integer($key1376)) ? serialize($key1376) : $key1376] = $val1377;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1391 => $viter1392)
          {
            $xfer += $output->writeI64($kiter1391);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1392));
              {
                foreach ($viter1392 as $kiter1393 => $viter1394)
                {
                  $xfer += $output->writeString($kiter1393);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1394));
                    {
                      foreach ($viter1394 as $iter1395 => $iter1396)
                      {
                        if (is_scalar($iter1396)) {
                        $xfer += $iter1395->write($output);
                        } else {
                        $xfer += $iter1396->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteria_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteria_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1397 = 0;
            $_ktype1398 = 0;
            $_vtype1399 = 0;
            $xfer += $input->readMapBegin($_ktype1398, $_vtype1399, $_size1397);
            for ($_i1401 = 0; $_i1401 < $_size1397; ++$_i1401)
            {
              $key1402 = 0;
              $val1403 = array();
              $xfer += $input->readI64($key1402);
              $val1403 = array();
              $_size1404 = 0;
              $_etype1407 = 0;
              $xfer += $input->readSetBegin($_etype1407, $_size1404);
              for ($_i1408 = 0; $_i1408 < $_size1404; ++$_i1408)
              {
                $elem1409 = null;
                $elem1409 = new \concourse\thrift\data\TObject();
                $xfer += $elem1409->read($input);
                if (is_scalar($elem1409)) {
                  $val1403 []= $elem1409;
                } else {
                  $val1403 []= $elem1409;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1402) && !is_integer($key1402)) ? serialize($key1402) : $key1402] = $val1403;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1410 => $viter1411)
          {
            $xfer += $output->writeI64($kiter1410);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1411));
              {
                foreach ($viter1411 as $iter1412 => $iter1413)
                {
                  if (is_scalar($iter1413)) {
                  $xfer += $iter1412->write($output);
                  } else {
                  $xfer += $iter1413->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCcl_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1414 = 0;
            $_ktype1415 = 0;
            $_vtype1416 = 0;
            $xfer += $input->readMapBegin($_ktype1415, $_vtype1416, $_size1414);
            for ($_i1418 = 0; $_i1418 < $_size1414; ++$_i1418)
            {
              $key1419 = 0;
              $val1420 = array();
              $xfer += $input->readI64($key1419);
              $val1420 = array();
              $_size1421 = 0;
              $_etype1424 = 0;
              $xfer += $input->readSetBegin($_etype1424, $_size1421);
              for ($_i1425 = 0; $_i1425 < $_size1421; ++$_i1425)
              {
                $elem1426 = null;
                $elem1426 = new \concourse\thrift\data\TObject();
                $xfer += $elem1426->read($input);
                if (is_scalar($elem1426)) {
                  $val1420 []= $elem1426;
                } else {
                  $val1420 []= $elem1426;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1419) && !is_integer($key1419)) ? serialize($key1419) : $key1419] = $val1420;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1427 => $viter1428)
          {
            $xfer += $output->writeI64($kiter1427);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1428));
              {
                foreach ($viter1428 as $iter1429 => $iter1430)
                {
                  if (is_scalar($iter1430)) {
                  $xfer += $iter1429->write($output);
                  } else {
                  $xfer += $iter1430->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1431 = 0;
            $_ktype1432 = 0;
            $_vtype1433 = 0;
            $xfer += $input->readMapBegin($_ktype1432, $_vtype1433, $_size1431);
            for ($_i1435 = 0; $_i1435 < $_size1431; ++$_i1435)
            {
              $key1436 = 0;
              $val1437 = array();
              $xfer += $input->readI64($key1436);
              $val1437 = array();
              $_size1438 = 0;
              $_etype1441 = 0;
              $xfer += $input->readSetBegin($_etype1441, $_size1438);
              for ($_i1442 = 0; $_i1442 < $_size1438; ++$_i1442)
              {
                $elem1443 = null;
                $elem1443 = new \concourse\thrift\data\TObject();
                $xfer += $elem1443->read($input);
                if (is_scalar($elem1443)) {
                  $val1437 []= $elem1443;
                } else {
                  $val1437 []= $elem1443;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1436) && !is_integer($key1436)) ? serialize($key1436) : $key1436] = $val1437;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1444 => $viter1445)
          {
            $xfer += $output->writeI64($kiter1444);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1445));
              {
                foreach ($viter1445 as $iter1446 => $iter1447)
                {
                  if (is_scalar($iter1447)) {
                  $xfer += $iter1446->write($output);
                  } else {
                  $xfer += $iter1447->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1448 = 0;
            $_ktype1449 = 0;
            $_vtype1450 = 0;
            $xfer += $input->readMapBegin($_ktype1449, $_vtype1450, $_size1448);
            for ($_i1452 = 0; $_i1452 < $_size1448; ++$_i1452)
            {
              $key1453 = 0;
              $val1454 = array();
              $xfer += $input->readI64($key1453);
              $val1454 = array();
              $_size1455 = 0;
              $_etype1458 = 0;
              $xfer += $input->readSetBegin($_etype1458, $_size1455);
              for ($_i1459 = 0; $_i1459 < $_size1455; ++$_i1459)
              {
                $elem1460 = null;
                $elem1460 = new \concourse\thrift\data\TObject();
                $xfer += $elem1460->read($input);
                if (is_scalar($elem1460)) {
                  $val1454 []= $elem1460;
                } else {
                  $val1454 []= $elem1460;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1453) && !is_integer($key1453)) ? serialize($key1453) : $key1453] = $val1454;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1461 => $viter1462)
          {
            $xfer += $output->writeI64($kiter1461);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1462));
              {
                foreach ($viter1462 as $iter1463 => $iter1464)
                {
                  if (is_scalar($iter1464)) {
                  $xfer += $iter1463->write($output);
                  } else {
                  $xfer += $iter1464->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1465 = 0;
            $_ktype1466 = 0;
            $_vtype1467 = 0;
            $xfer += $input->readMapBegin($_ktype1466, $_vtype1467, $_size1465);
            for ($_i1469 = 0; $_i1469 < $_size1465; ++$_i1469)
            {
              $key1470 = 0;
              $val1471 = array();
              $xfer += $input->readI64($key1470);
              $val1471 = array();
              $_size1472 = 0;
              $_etype1475 = 0;
              $xfer += $input->readSetBegin($_etype1475, $_size1472);
              for ($_i1476 = 0; $_i1476 < $_size1472; ++$_i1476)
              {
                $elem1477 = null;
                $elem1477 = new \concourse\thrift\data\TObject();
                $xfer += $elem1477->read($input);
                if (is_scalar($elem1477)) {
                  $val1471 []= $elem1477;
                } else {
                  $val1471 []= $elem1477;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1470) && !is_integer($key1470)) ? serialize($key1470) : $key1470] = $val1471;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1478 => $viter1479)
          {
            $xfer += $output->writeI64($kiter1478);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1479));
              {
                foreach ($viter1479 as $iter1480 => $iter1481)
                {
                  if (is_scalar($iter1481)) {
                  $xfer += $iter1480->write($output);
                  } else {
                  $xfer += $iter1481->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1482 = 0;
            $_ktype1483 = 0;
            $_vtype1484 = 0;
            $xfer += $input->readMapBegin($_ktype1483, $_vtype1484, $_size1482);
            for ($_i1486 = 0; $_i1486 < $_size1482; ++$_i1486)
            {
              $key1487 = 0;
              $val1488 = array();
              $xfer += $input->readI64($key1487);
              $val1488 = array();
              $_size1489 = 0;
              $_etype1492 = 0;
              $xfer += $input->readSetBegin($_etype1492, $_size1489);
              for ($_i1493 = 0; $_i1493 < $_size1489; ++$_i1493)
              {
                $elem1494 = null;
                $elem1494 = new \concourse\thrift\data\TObject();
                $xfer += $elem1494->read($input);
                if (is_scalar($elem1494)) {
                  $val1488 []= $elem1494;
                } else {
                  $val1488 []= $elem1494;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1487) && !is_integer($key1487)) ? serialize($key1487) : $key1487] = $val1488;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1495 => $viter1496)
          {
            $xfer += $output->writeI64($kiter1495);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1496));
              {
                foreach ($viter1496 as $iter1497 => $iter1498)
                {
                  if (is_scalar($iter1498)) {
                  $xfer += $iter1497->write($output);
                  } else {
                  $xfer += $iter1498->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteria_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1499 = 0;
            $_etype1502 = 0;
            $xfer += $input->readListBegin($_etype1502, $_size1499);
            for ($_i1503 = 0; $_i1503 < $_size1499; ++$_i1503)
            {
              $elem1504 = null;
              $xfer += $input->readString($elem1504);
              $this->keys []= $elem1504;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteria_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1505)
          {
            $xfer += $output->writeString($iter1505);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1506 = 0;
            $_ktype1507 = 0;
            $_vtype1508 = 0;
            $xfer += $input->readMapBegin($_ktype1507, $_vtype1508, $_size1506);
            for ($_i1510 = 0; $_i1510 < $_size1506; ++$_i1510)
            {
              $key1511 = 0;
              $val1512 = array();
              $xfer += $input->readI64($key1511);
              $val1512 = array();
              $_size1513 = 0;
              $_ktype1514 = 0;
              $_vtype1515 = 0;
              $xfer += $input->readMapBegin($_ktype1514, $_vtype1515, $_size1513);
              for ($_i1517 = 0; $_i1517 < $_size1513; ++$_i1517)
              {
                $key1518 = '';
                $val1519 = array();
                $xfer += $input->readString($key1518);
                $val1519 = array();
                $_size1520 = 0;
                $_etype1523 = 0;
                $xfer += $input->readSetBegin($_etype1523, $_size1520);
                for ($_i1524 = 0; $_i1524 < $_size1520; ++$_i1524)
                {
                  $elem1525 = null;
                  $elem1525 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1525->read($input);
                  if (is_scalar($elem1525)) {
                    $val1519 []= $elem1525;
                  } else {
                    $val1519 []= $elem1525;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1512[(!is_string($key1518) && !is_integer($key1518)) ? serialize($key1518) : $key1518] = $val1519;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1511) && !is_integer($key1511)) ? serialize($key1511) : $key1511] = $val1512;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1526 => $viter1527)
          {
            $xfer += $output->writeI64($kiter1526);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1527));
              {
                foreach ($viter1527 as $kiter1528 => $viter1529)
                {
                  $xfer += $output->writeString($kiter1528);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1529));
                    {
                      foreach ($viter1529 as $iter1530 => $iter1531)
                      {
                        if (is_scalar($iter1531)) {
                        $xfer += $iter1530->write($output);
                        } else {
                        $xfer += $iter1531->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCcl_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1532 = 0;
            $_etype1535 = 0;
            $xfer += $input->readListBegin($_etype1535, $_size1532);
            for ($_i1536 = 0; $_i1536 < $_size1532; ++$_i1536)
            {
              $elem1537 = null;
              $xfer += $input->readString($elem1537);
              $this->keys []= $elem1537;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCcl_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1538)
          {
            $xfer += $output->writeString($iter1538);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1539 = 0;
            $_ktype1540 = 0;
            $_vtype1541 = 0;
            $xfer += $input->readMapBegin($_ktype1540, $_vtype1541, $_size1539);
            for ($_i1543 = 0; $_i1543 < $_size1539; ++$_i1543)
            {
              $key1544 = 0;
              $val1545 = array();
              $xfer += $input->readI64($key1544);
              $val1545 = array();
              $_size1546 = 0;
              $_ktype1547 = 0;
              $_vtype1548 = 0;
              $xfer += $input->readMapBegin($_ktype1547, $_vtype1548, $_size1546);
              for ($_i1550 = 0; $_i1550 < $_size1546; ++$_i1550)
              {
                $key1551 = '';
                $val1552 = array();
                $xfer += $input->readString($key1551);
                $val1552 = array();
                $_size1553 = 0;
                $_etype1556 = 0;
                $xfer += $input->readSetBegin($_etype1556, $_size1553);
                for ($_i1557 = 0; $_i1557 < $_size1553; ++$_i1557)
                {
                  $elem1558 = null;
                  $elem1558 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1558->read($input);
                  if (is_scalar($elem1558)) {
                    $val1552 []= $elem1558;
                  } else {
                    $val1552 []= $elem1558;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1545[(!is_string($key1551) && !is_integer($key1551)) ? serialize($key1551) : $key1551] = $val1552;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1544) && !is_integer($key1544)) ? serialize($key1544) : $key1544] = $val1545;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1559 => $viter1560)
          {
            $xfer += $output->writeI64($kiter1559);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1560));
              {
                foreach ($viter1560 as $kiter1561 => $viter1562)
                {
                  $xfer += $output->writeString($kiter1561);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1562));
                    {
                      foreach ($viter1562 as $iter1563 => $iter1564)
                      {
                        if (is_scalar($iter1564)) {
                        $xfer += $iter1563->write($output);
                        } else {
                        $xfer += $iter1564->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1565 = 0;
            $_etype1568 = 0;
            $xfer += $input->readListBegin($_etype1568, $_size1565);
            for ($_i1569 = 0; $_i1569 < $_size1565; ++$_i1569)
            {
              $elem1570 = null;
              $xfer += $input->readString($elem1570);
              $this->keys []= $elem1570;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1571)
          {
            $xfer += $output->writeString($iter1571);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1572 = 0;
            $_ktype1573 = 0;
            $_vtype1574 = 0;
            $xfer += $input->readMapBegin($_ktype1573, $_vtype1574, $_size1572);
            for ($_i1576 = 0; $_i1576 < $_size1572; ++$_i1576)
            {
              $key1577 = 0;
              $val1578 = array();
              $xfer += $input->readI64($key1577);
              $val1578 = array();
              $_size1579 = 0;
              $_ktype1580 = 0;
              $_vtype1581 = 0;
              $xfer += $input->readMapBegin($_ktype1580, $_vtype1581, $_size1579);
              for ($_i1583 = 0; $_i1583 < $_size1579; ++$_i1583)
              {
                $key1584 = '';
                $val1585 = array();
                $xfer += $input->readString($key1584);
                $val1585 = array();
                $_size1586 = 0;
                $_etype1589 = 0;
                $xfer += $input->readSetBegin($_etype1589, $_size1586);
                for ($_i1590 = 0; $_i1590 < $_size1586; ++$_i1590)
                {
                  $elem1591 = null;
                  $elem1591 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1591->read($input);
                  if (is_scalar($elem1591)) {
                    $val1585 []= $elem1591;
                  } else {
                    $val1585 []= $elem1591;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1578[(!is_string($key1584) && !is_integer($key1584)) ? serialize($key1584) : $key1584] = $val1585;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1577) && !is_integer($key1577)) ? serialize($key1577) : $key1577] = $val1578;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1592 => $viter1593)
          {
            $xfer += $output->writeI64($kiter1592);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1593));
              {
                foreach ($viter1593 as $kiter1594 => $viter1595)
                {
                  $xfer += $output->writeString($kiter1594);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1595));
                    {
                      foreach ($viter1595 as $iter1596 => $iter1597)
                      {
                        if (is_scalar($iter1597)) {
                        $xfer += $iter1596->write($output);
                        } else {
                        $xfer += $iter1597->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1598 = 0;
            $_etype1601 = 0;
            $xfer += $input->readListBegin($_etype1601, $_size1598);
            for ($_i1602 = 0; $_i1602 < $_size1598; ++$_i1602)
            {
              $elem1603 = null;
              $xfer += $input->readString($elem1603);
              $this->keys []= $elem1603;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1604)
          {
            $xfer += $output->writeString($iter1604);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1605 = 0;
            $_ktype1606 = 0;
            $_vtype1607 = 0;
            $xfer += $input->readMapBegin($_ktype1606, $_vtype1607, $_size1605);
            for ($_i1609 = 0; $_i1609 < $_size1605; ++$_i1609)
            {
              $key1610 = 0;
              $val1611 = array();
              $xfer += $input->readI64($key1610);
              $val1611 = array();
              $_size1612 = 0;
              $_ktype1613 = 0;
              $_vtype1614 = 0;
              $xfer += $input->readMapBegin($_ktype1613, $_vtype1614, $_size1612);
              for ($_i1616 = 0; $_i1616 < $_size1612; ++$_i1616)
              {
                $key1617 = '';
                $val1618 = array();
                $xfer += $input->readString($key1617);
                $val1618 = array();
                $_size1619 = 0;
                $_etype1622 = 0;
                $xfer += $input->readSetBegin($_etype1622, $_size1619);
                for ($_i1623 = 0; $_i1623 < $_size1619; ++$_i1623)
                {
                  $elem1624 = null;
                  $elem1624 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1624->read($input);
                  if (is_scalar($elem1624)) {
                    $val1618 []= $elem1624;
                  } else {
                    $val1618 []= $elem1624;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1611[(!is_string($key1617) && !is_integer($key1617)) ? serialize($key1617) : $key1617] = $val1618;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1610) && !is_integer($key1610)) ? serialize($key1610) : $key1610] = $val1611;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1625 => $viter1626)
          {
            $xfer += $output->writeI64($kiter1625);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1626));
              {
                foreach ($viter1626 as $kiter1627 => $viter1628)
                {
                  $xfer += $output->writeString($kiter1627);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1628));
                    {
                      foreach ($viter1628 as $iter1629 => $iter1630)
                      {
                        if (is_scalar($iter1630)) {
                        $xfer += $iter1629->write($output);
                        } else {
                        $xfer += $iter1630->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1631 = 0;
            $_etype1634 = 0;
            $xfer += $input->readListBegin($_etype1634, $_size1631);
            for ($_i1635 = 0; $_i1635 < $_size1631; ++$_i1635)
            {
              $elem1636 = null;
              $xfer += $input->readString($elem1636);
              $this->keys []= $elem1636;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1637)
          {
            $xfer += $output->writeString($iter1637);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1638 = 0;
            $_ktype1639 = 0;
            $_vtype1640 = 0;
            $xfer += $input->readMapBegin($_ktype1639, $_vtype1640, $_size1638);
            for ($_i1642 = 0; $_i1642 < $_size1638; ++$_i1642)
            {
              $key1643 = 0;
              $val1644 = array();
              $xfer += $input->readI64($key1643);
              $val1644 = array();
              $_size1645 = 0;
              $_ktype1646 = 0;
              $_vtype1647 = 0;
              $xfer += $input->readMapBegin($_ktype1646, $_vtype1647, $_size1645);
              for ($_i1649 = 0; $_i1649 < $_size1645; ++$_i1649)
              {
                $key1650 = '';
                $val1651 = array();
                $xfer += $input->readString($key1650);
                $val1651 = array();
                $_size1652 = 0;
                $_etype1655 = 0;
                $xfer += $input->readSetBegin($_etype1655, $_size1652);
                for ($_i1656 = 0; $_i1656 < $_size1652; ++$_i1656)
                {
                  $elem1657 = null;
                  $elem1657 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1657->read($input);
                  if (is_scalar($elem1657)) {
                    $val1651 []= $elem1657;
                  } else {
                    $val1651 []= $elem1657;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1644[(!is_string($key1650) && !is_integer($key1650)) ? serialize($key1650) : $key1650] = $val1651;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1643) && !is_integer($key1643)) ? serialize($key1643) : $key1643] = $val1644;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1658 => $viter1659)
          {
            $xfer += $output->writeI64($kiter1658);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1659));
              {
                foreach ($viter1659 as $kiter1660 => $viter1661)
                {
                  $xfer += $output->writeString($kiter1660);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1661));
                    {
                      foreach ($viter1661 as $iter1662 => $iter1663)
                      {
                        if (is_scalar($iter1663)) {
                        $xfer += $iter1662->write($output);
                        } else {
                        $xfer += $iter1663->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1664 = 0;
            $_etype1667 = 0;
            $xfer += $input->readListBegin($_etype1667, $_size1664);
            for ($_i1668 = 0; $_i1668 < $_size1664; ++$_i1668)
            {
              $elem1669 = null;
              $xfer += $input->readString($elem1669);
              $this->keys []= $elem1669;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1670)
          {
            $xfer += $output->writeString($iter1670);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1671 = 0;
            $_ktype1672 = 0;
            $_vtype1673 = 0;
            $xfer += $input->readMapBegin($_ktype1672, $_vtype1673, $_size1671);
            for ($_i1675 = 0; $_i1675 < $_size1671; ++$_i1675)
            {
              $key1676 = 0;
              $val1677 = array();
              $xfer += $input->readI64($key1676);
              $val1677 = array();
              $_size1678 = 0;
              $_ktype1679 = 0;
              $_vtype1680 = 0;
              $xfer += $input->readMapBegin($_ktype1679, $_vtype1680, $_size1678);
              for ($_i1682 = 0; $_i1682 < $_size1678; ++$_i1682)
              {
                $key1683 = '';
                $val1684 = array();
                $xfer += $input->readString($key1683);
                $val1684 = array();
                $_size1685 = 0;
                $_etype1688 = 0;
                $xfer += $input->readSetBegin($_etype1688, $_size1685);
                for ($_i1689 = 0; $_i1689 < $_size1685; ++$_i1689)
                {
                  $elem1690 = null;
                  $elem1690 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1690->read($input);
                  if (is_scalar($elem1690)) {
                    $val1684 []= $elem1690;
                  } else {
                    $val1684 []= $elem1690;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1677[(!is_string($key1683) && !is_integer($key1683)) ? serialize($key1683) : $key1683] = $val1684;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1676) && !is_integer($key1676)) ? serialize($key1676) : $key1676] = $val1677;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1691 => $viter1692)
          {
            $xfer += $output->writeI64($kiter1691);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1692));
              {
                foreach ($viter1692 as $kiter1693 => $viter1694)
                {
                  $xfer += $output->writeString($kiter1693);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1694));
                    {
                      foreach ($viter1694 as $iter1695 => $iter1696)
                      {
                        if (is_scalar($iter1696)) {
                        $xfer += $iter1695->write($output);
                        } else {
                        $xfer += $iter1696->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \concourse\thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecord_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \concourse\thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTime_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \concourse\thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1697 = 0;
            $_etype1700 = 0;
            $xfer += $input->readListBegin($_etype1700, $_size1697);
            for ($_i1701 = 0; $_i1701 < $_size1697; ++$_i1701)
            {
              $elem1702 = null;
              $xfer += $input->readString($elem1702);
              $this->keys []= $elem1702;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1703)
          {
            $xfer += $output->writeString($iter1703);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1704 = 0;
            $_ktype1705 = 0;
            $_vtype1706 = 0;
            $xfer += $input->readMapBegin($_ktype1705, $_vtype1706, $_size1704);
            for ($_i1708 = 0; $_i1708 < $_size1704; ++$_i1708)
            {
              $key1709 = '';
              $val1710 = new \concourse\thrift\data\TObject();
              $xfer += $input->readString($key1709);
              $val1710 = new \concourse\thrift\data\TObject();
              $xfer += $val1710->read($input);
              $this->success[(!is_string($key1709) && !is_integer($key1709)) ? serialize($key1709) : $key1709] = $val1710;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1711 => $viter1712)
          {
            $xfer += $output->writeString($kiter1711);
            $xfer += $viter1712->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1713 = 0;
            $_etype1716 = 0;
            $xfer += $input->readListBegin($_etype1716, $_size1713);
            for ($_i1717 = 0; $_i1717 < $_size1713; ++$_i1717)
            {
              $elem1718 = null;
              $xfer += $input->readString($elem1718);
              $this->keys []= $elem1718;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1719)
          {
            $xfer += $output->writeString($iter1719);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1720 = 0;
            $_ktype1721 = 0;
            $_vtype1722 = 0;
            $xfer += $input->readMapBegin($_ktype1721, $_vtype1722, $_size1720);
            for ($_i1724 = 0; $_i1724 < $_size1720; ++$_i1724)
            {
              $key1725 = '';
              $val1726 = new \concourse\thrift\data\TObject();
              $xfer += $input->readString($key1725);
              $val1726 = new \concourse\thrift\data\TObject();
              $xfer += $val1726->read($input);
              $this->success[(!is_string($key1725) && !is_integer($key1725)) ? serialize($key1725) : $key1725] = $val1726;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1727 => $viter1728)
          {
            $xfer += $output->writeString($kiter1727);
            $xfer += $viter1728->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1729 = 0;
            $_etype1732 = 0;
            $xfer += $input->readListBegin($_etype1732, $_size1729);
            for ($_i1733 = 0; $_i1733 < $_size1729; ++$_i1733)
            {
              $elem1734 = null;
              $xfer += $input->readString($elem1734);
              $this->keys []= $elem1734;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1735)
          {
            $xfer += $output->writeString($iter1735);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1736 = 0;
            $_ktype1737 = 0;
            $_vtype1738 = 0;
            $xfer += $input->readMapBegin($_ktype1737, $_vtype1738, $_size1736);
            for ($_i1740 = 0; $_i1740 < $_size1736; ++$_i1740)
            {
              $key1741 = '';
              $val1742 = new \concourse\thrift\data\TObject();
              $xfer += $input->readString($key1741);
              $val1742 = new \concourse\thrift\data\TObject();
              $xfer += $val1742->read($input);
              $this->success[(!is_string($key1741) && !is_integer($key1741)) ? serialize($key1741) : $key1741] = $val1742;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1743 => $viter1744)
          {
            $xfer += $output->writeString($kiter1743);
            $xfer += $viter1744->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1745 = 0;
            $_etype1748 = 0;
            $xfer += $input->readListBegin($_etype1748, $_size1745);
            for ($_i1749 = 0; $_i1749 < $_size1745; ++$_i1749)
            {
              $elem1750 = null;
              $xfer += $input->readString($elem1750);
              $this->keys []= $elem1750;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1751 = 0;
            $_etype1754 = 0;
            $xfer += $input->readListBegin($_etype1754, $_size1751);
            for ($_i1755 = 0; $_i1755 < $_size1751; ++$_i1755)
            {
              $elem1756 = null;
              $xfer += $input->readI64($elem1756);
              $this->records []= $elem1756;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1757)
          {
            $xfer += $output->writeString($iter1757);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1758)
          {
            $xfer += $output->writeI64($iter1758);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1759 = 0;
            $_ktype1760 = 0;
            $_vtype1761 = 0;
            $xfer += $input->readMapBegin($_ktype1760, $_vtype1761, $_size1759);
            for ($_i1763 = 0; $_i1763 < $_size1759; ++$_i1763)
            {
              $key1764 = 0;
              $val1765 = array();
              $xfer += $input->readI64($key1764);
              $val1765 = array();
              $_size1766 = 0;
              $_ktype1767 = 0;
              $_vtype1768 = 0;
              $xfer += $input->readMapBegin($_ktype1767, $_vtype1768, $_size1766);
              for ($_i1770 = 0; $_i1770 < $_size1766; ++$_i1770)
              {
                $key1771 = '';
                $val1772 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1771);
                $val1772 = new \concourse\thrift\data\TObject();
                $xfer += $val1772->read($input);
                $val1765[(!is_string($key1771) && !is_integer($key1771)) ? serialize($key1771) : $key1771] = $val1772;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1764) && !is_integer($key1764)) ? serialize($key1764) : $key1764] = $val1765;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1773 => $viter1774)
          {
            $xfer += $output->writeI64($kiter1773);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1774));
              {
                foreach ($viter1774 as $kiter1775 => $viter1776)
                {
                  $xfer += $output->writeString($kiter1775);
                  $xfer += $viter1776->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1777 = 0;
            $_etype1780 = 0;
            $xfer += $input->readListBegin($_etype1780, $_size1777);
            for ($_i1781 = 0; $_i1781 < $_size1777; ++$_i1781)
            {
              $elem1782 = null;
              $xfer += $input->readI64($elem1782);
              $this->records []= $elem1782;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1783)
          {
            $xfer += $output->writeI64($iter1783);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1784 = 0;
            $_ktype1785 = 0;
            $_vtype1786 = 0;
            $xfer += $input->readMapBegin($_ktype1785, $_vtype1786, $_size1784);
            for ($_i1788 = 0; $_i1788 < $_size1784; ++$_i1788)
            {
              $key1789 = 0;
              $val1790 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key1789);
              $val1790 = new \concourse\thrift\data\TObject();
              $xfer += $val1790->read($input);
              $this->success[(!is_string($key1789) && !is_integer($key1789)) ? serialize($key1789) : $key1789] = $val1790;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1791 => $viter1792)
          {
            $xfer += $output->writeI64($kiter1791);
            $xfer += $viter1792->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1793 = 0;
            $_etype1796 = 0;
            $xfer += $input->readListBegin($_etype1796, $_size1793);
            for ($_i1797 = 0; $_i1797 < $_size1793; ++$_i1797)
            {
              $elem1798 = null;
              $xfer += $input->readI64($elem1798);
              $this->records []= $elem1798;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1799)
          {
            $xfer += $output->writeI64($iter1799);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1800 = 0;
            $_ktype1801 = 0;
            $_vtype1802 = 0;
            $xfer += $input->readMapBegin($_ktype1801, $_vtype1802, $_size1800);
            for ($_i1804 = 0; $_i1804 < $_size1800; ++$_i1804)
            {
              $key1805 = 0;
              $val1806 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key1805);
              $val1806 = new \concourse\thrift\data\TObject();
              $xfer += $val1806->read($input);
              $this->success[(!is_string($key1805) && !is_integer($key1805)) ? serialize($key1805) : $key1805] = $val1806;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1807 => $viter1808)
          {
            $xfer += $output->writeI64($kiter1807);
            $xfer += $viter1808->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1809 = 0;
            $_etype1812 = 0;
            $xfer += $input->readListBegin($_etype1812, $_size1809);
            for ($_i1813 = 0; $_i1813 < $_size1809; ++$_i1813)
            {
              $elem1814 = null;
              $xfer += $input->readI64($elem1814);
              $this->records []= $elem1814;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1815)
          {
            $xfer += $output->writeI64($iter1815);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1816 = 0;
            $_ktype1817 = 0;
            $_vtype1818 = 0;
            $xfer += $input->readMapBegin($_ktype1817, $_vtype1818, $_size1816);
            for ($_i1820 = 0; $_i1820 < $_size1816; ++$_i1820)
            {
              $key1821 = 0;
              $val1822 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key1821);
              $val1822 = new \concourse\thrift\data\TObject();
              $xfer += $val1822->read($input);
              $this->success[(!is_string($key1821) && !is_integer($key1821)) ? serialize($key1821) : $key1821] = $val1822;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1823 => $viter1824)
          {
            $xfer += $output->writeI64($kiter1823);
            $xfer += $viter1824->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1825 = 0;
            $_etype1828 = 0;
            $xfer += $input->readListBegin($_etype1828, $_size1825);
            for ($_i1829 = 0; $_i1829 < $_size1825; ++$_i1829)
            {
              $elem1830 = null;
              $xfer += $input->readString($elem1830);
              $this->keys []= $elem1830;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1831 = 0;
            $_etype1834 = 0;
            $xfer += $input->readListBegin($_etype1834, $_size1831);
            for ($_i1835 = 0; $_i1835 < $_size1831; ++$_i1835)
            {
              $elem1836 = null;
              $xfer += $input->readI64($elem1836);
              $this->records []= $elem1836;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1837)
          {
            $xfer += $output->writeString($iter1837);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1838)
          {
            $xfer += $output->writeI64($iter1838);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1839 = 0;
            $_ktype1840 = 0;
            $_vtype1841 = 0;
            $xfer += $input->readMapBegin($_ktype1840, $_vtype1841, $_size1839);
            for ($_i1843 = 0; $_i1843 < $_size1839; ++$_i1843)
            {
              $key1844 = 0;
              $val1845 = array();
              $xfer += $input->readI64($key1844);
              $val1845 = array();
              $_size1846 = 0;
              $_ktype1847 = 0;
              $_vtype1848 = 0;
              $xfer += $input->readMapBegin($_ktype1847, $_vtype1848, $_size1846);
              for ($_i1850 = 0; $_i1850 < $_size1846; ++$_i1850)
              {
                $key1851 = '';
                $val1852 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1851);
                $val1852 = new \concourse\thrift\data\TObject();
                $xfer += $val1852->read($input);
                $val1845[(!is_string($key1851) && !is_integer($key1851)) ? serialize($key1851) : $key1851] = $val1852;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1844) && !is_integer($key1844)) ? serialize($key1844) : $key1844] = $val1845;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1853 => $viter1854)
          {
            $xfer += $output->writeI64($kiter1853);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1854));
              {
                foreach ($viter1854 as $kiter1855 => $viter1856)
                {
                  $xfer += $output->writeString($kiter1855);
                  $xfer += $viter1856->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1857 = 0;
            $_etype1860 = 0;
            $xfer += $input->readListBegin($_etype1860, $_size1857);
            for ($_i1861 = 0; $_i1861 < $_size1857; ++$_i1861)
            {
              $elem1862 = null;
              $xfer += $input->readString($elem1862);
              $this->keys []= $elem1862;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1863 = 0;
            $_etype1866 = 0;
            $xfer += $input->readListBegin($_etype1866, $_size1863);
            for ($_i1867 = 0; $_i1867 < $_size1863; ++$_i1867)
            {
              $elem1868 = null;
              $xfer += $input->readI64($elem1868);
              $this->records []= $elem1868;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1869)
          {
            $xfer += $output->writeString($iter1869);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1870)
          {
            $xfer += $output->writeI64($iter1870);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1871 = 0;
            $_ktype1872 = 0;
            $_vtype1873 = 0;
            $xfer += $input->readMapBegin($_ktype1872, $_vtype1873, $_size1871);
            for ($_i1875 = 0; $_i1875 < $_size1871; ++$_i1875)
            {
              $key1876 = 0;
              $val1877 = array();
              $xfer += $input->readI64($key1876);
              $val1877 = array();
              $_size1878 = 0;
              $_ktype1879 = 0;
              $_vtype1880 = 0;
              $xfer += $input->readMapBegin($_ktype1879, $_vtype1880, $_size1878);
              for ($_i1882 = 0; $_i1882 < $_size1878; ++$_i1882)
              {
                $key1883 = '';
                $val1884 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1883);
                $val1884 = new \concourse\thrift\data\TObject();
                $xfer += $val1884->read($input);
                $val1877[(!is_string($key1883) && !is_integer($key1883)) ? serialize($key1883) : $key1883] = $val1884;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1876) && !is_integer($key1876)) ? serialize($key1876) : $key1876] = $val1877;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1885 => $viter1886)
          {
            $xfer += $output->writeI64($kiter1885);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1886));
              {
                foreach ($viter1886 as $kiter1887 => $viter1888)
                {
                  $xfer += $output->writeString($kiter1887);
                  $xfer += $viter1888->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteria_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteria_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1889 = 0;
            $_ktype1890 = 0;
            $_vtype1891 = 0;
            $xfer += $input->readMapBegin($_ktype1890, $_vtype1891, $_size1889);
            for ($_i1893 = 0; $_i1893 < $_size1889; ++$_i1893)
            {
              $key1894 = 0;
              $val1895 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key1894);
              $val1895 = new \concourse\thrift\data\TObject();
              $xfer += $val1895->read($input);
              $this->success[(!is_string($key1894) && !is_integer($key1894)) ? serialize($key1894) : $key1894] = $val1895;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1896 => $viter1897)
          {
            $xfer += $output->writeI64($kiter1896);
            $xfer += $viter1897->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteria_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1898 = 0;
            $_ktype1899 = 0;
            $_vtype1900 = 0;
            $xfer += $input->readMapBegin($_ktype1899, $_vtype1900, $_size1898);
            for ($_i1902 = 0; $_i1902 < $_size1898; ++$_i1902)
            {
              $key1903 = 0;
              $val1904 = array();
              $xfer += $input->readI64($key1903);
              $val1904 = array();
              $_size1905 = 0;
              $_ktype1906 = 0;
              $_vtype1907 = 0;
              $xfer += $input->readMapBegin($_ktype1906, $_vtype1907, $_size1905);
              for ($_i1909 = 0; $_i1909 < $_size1905; ++$_i1909)
              {
                $key1910 = '';
                $val1911 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1910);
                $val1911 = new \concourse\thrift\data\TObject();
                $xfer += $val1911->read($input);
                $val1904[(!is_string($key1910) && !is_integer($key1910)) ? serialize($key1910) : $key1910] = $val1911;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1903) && !is_integer($key1903)) ? serialize($key1903) : $key1903] = $val1904;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1912 => $viter1913)
          {
            $xfer += $output->writeI64($kiter1912);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1913));
              {
                foreach ($viter1913 as $kiter1914 => $viter1915)
                {
                  $xfer += $output->writeString($kiter1914);
                  $xfer += $viter1915->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1916 = 0;
            $_ktype1917 = 0;
            $_vtype1918 = 0;
            $xfer += $input->readMapBegin($_ktype1917, $_vtype1918, $_size1916);
            for ($_i1920 = 0; $_i1920 < $_size1916; ++$_i1920)
            {
              $key1921 = 0;
              $val1922 = array();
              $xfer += $input->readI64($key1921);
              $val1922 = array();
              $_size1923 = 0;
              $_ktype1924 = 0;
              $_vtype1925 = 0;
              $xfer += $input->readMapBegin($_ktype1924, $_vtype1925, $_size1923);
              for ($_i1927 = 0; $_i1927 < $_size1923; ++$_i1927)
              {
                $key1928 = '';
                $val1929 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1928);
                $val1929 = new \concourse\thrift\data\TObject();
                $xfer += $val1929->read($input);
                $val1922[(!is_string($key1928) && !is_integer($key1928)) ? serialize($key1928) : $key1928] = $val1929;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1921) && !is_integer($key1921)) ? serialize($key1921) : $key1921] = $val1922;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1930 => $viter1931)
          {
            $xfer += $output->writeI64($kiter1930);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1931));
              {
                foreach ($viter1931 as $kiter1932 => $viter1933)
                {
                  $xfer += $output->writeString($kiter1932);
                  $xfer += $viter1933->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTime_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1934 = 0;
            $_ktype1935 = 0;
            $_vtype1936 = 0;
            $xfer += $input->readMapBegin($_ktype1935, $_vtype1936, $_size1934);
            for ($_i1938 = 0; $_i1938 < $_size1934; ++$_i1938)
            {
              $key1939 = 0;
              $val1940 = array();
              $xfer += $input->readI64($key1939);
              $val1940 = array();
              $_size1941 = 0;
              $_ktype1942 = 0;
              $_vtype1943 = 0;
              $xfer += $input->readMapBegin($_ktype1942, $_vtype1943, $_size1941);
              for ($_i1945 = 0; $_i1945 < $_size1941; ++$_i1945)
              {
                $key1946 = '';
                $val1947 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1946);
                $val1947 = new \concourse\thrift\data\TObject();
                $xfer += $val1947->read($input);
                $val1940[(!is_string($key1946) && !is_integer($key1946)) ? serialize($key1946) : $key1946] = $val1947;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1939) && !is_integer($key1939)) ? serialize($key1939) : $key1939] = $val1940;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1948 => $viter1949)
          {
            $xfer += $output->writeI64($kiter1948);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1949));
              {
                foreach ($viter1949 as $kiter1950 => $viter1951)
                {
                  $xfer += $output->writeString($kiter1950);
                  $xfer += $viter1951->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTimestr_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1952 = 0;
            $_ktype1953 = 0;
            $_vtype1954 = 0;
            $xfer += $input->readMapBegin($_ktype1953, $_vtype1954, $_size1952);
            for ($_i1956 = 0; $_i1956 < $_size1952; ++$_i1956)
            {
              $key1957 = 0;
              $val1958 = array();
              $xfer += $input->readI64($key1957);
              $val1958 = array();
              $_size1959 = 0;
              $_ktype1960 = 0;
              $_vtype1961 = 0;
              $xfer += $input->readMapBegin($_ktype1960, $_vtype1961, $_size1959);
              for ($_i1963 = 0; $_i1963 < $_size1959; ++$_i1963)
              {
                $key1964 = '';
                $val1965 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1964);
                $val1965 = new \concourse\thrift\data\TObject();
                $xfer += $val1965->read($input);
                $val1958[(!is_string($key1964) && !is_integer($key1964)) ? serialize($key1964) : $key1964] = $val1965;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1957) && !is_integer($key1957)) ? serialize($key1957) : $key1957] = $val1958;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1966 => $viter1967)
          {
            $xfer += $output->writeI64($kiter1966);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1967));
              {
                foreach ($viter1967 as $kiter1968 => $viter1969)
                {
                  $xfer += $output->writeString($kiter1968);
                  $xfer += $viter1969->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTime_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1970 = 0;
            $_ktype1971 = 0;
            $_vtype1972 = 0;
            $xfer += $input->readMapBegin($_ktype1971, $_vtype1972, $_size1970);
            for ($_i1974 = 0; $_i1974 < $_size1970; ++$_i1974)
            {
              $key1975 = 0;
              $val1976 = array();
              $xfer += $input->readI64($key1975);
              $val1976 = array();
              $_size1977 = 0;
              $_ktype1978 = 0;
              $_vtype1979 = 0;
              $xfer += $input->readMapBegin($_ktype1978, $_vtype1979, $_size1977);
              for ($_i1981 = 0; $_i1981 < $_size1977; ++$_i1981)
              {
                $key1982 = '';
                $val1983 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1982);
                $val1983 = new \concourse\thrift\data\TObject();
                $xfer += $val1983->read($input);
                $val1976[(!is_string($key1982) && !is_integer($key1982)) ? serialize($key1982) : $key1982] = $val1983;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1975) && !is_integer($key1975)) ? serialize($key1975) : $key1975] = $val1976;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1984 => $viter1985)
          {
            $xfer += $output->writeI64($kiter1984);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1985));
              {
                foreach ($viter1985 as $kiter1986 => $viter1987)
                {
                  $xfer += $output->writeString($kiter1986);
                  $xfer += $viter1987->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTimestr_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1988 = 0;
            $_ktype1989 = 0;
            $_vtype1990 = 0;
            $xfer += $input->readMapBegin($_ktype1989, $_vtype1990, $_size1988);
            for ($_i1992 = 0; $_i1992 < $_size1988; ++$_i1992)
            {
              $key1993 = 0;
              $val1994 = array();
              $xfer += $input->readI64($key1993);
              $val1994 = array();
              $_size1995 = 0;
              $_ktype1996 = 0;
              $_vtype1997 = 0;
              $xfer += $input->readMapBegin($_ktype1996, $_vtype1997, $_size1995);
              for ($_i1999 = 0; $_i1999 < $_size1995; ++$_i1999)
              {
                $key2000 = '';
                $val2001 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2000);
                $val2001 = new \concourse\thrift\data\TObject();
                $xfer += $val2001->read($input);
                $val1994[(!is_string($key2000) && !is_integer($key2000)) ? serialize($key2000) : $key2000] = $val2001;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1993) && !is_integer($key1993)) ? serialize($key1993) : $key1993] = $val1994;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2002 => $viter2003)
          {
            $xfer += $output->writeI64($kiter2002);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2003));
              {
                foreach ($viter2003 as $kiter2004 => $viter2005)
                {
                  $xfer += $output->writeString($kiter2004);
                  $xfer += $viter2005->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCcl_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2006 = 0;
            $_ktype2007 = 0;
            $_vtype2008 = 0;
            $xfer += $input->readMapBegin($_ktype2007, $_vtype2008, $_size2006);
            for ($_i2010 = 0; $_i2010 < $_size2006; ++$_i2010)
            {
              $key2011 = 0;
              $val2012 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key2011);
              $val2012 = new \concourse\thrift\data\TObject();
              $xfer += $val2012->read($input);
              $this->success[(!is_string($key2011) && !is_integer($key2011)) ? serialize($key2011) : $key2011] = $val2012;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter2013 => $viter2014)
          {
            $xfer += $output->writeI64($kiter2013);
            $xfer += $viter2014->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2015 = 0;
            $_ktype2016 = 0;
            $_vtype2017 = 0;
            $xfer += $input->readMapBegin($_ktype2016, $_vtype2017, $_size2015);
            for ($_i2019 = 0; $_i2019 < $_size2015; ++$_i2019)
            {
              $key2020 = 0;
              $val2021 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key2020);
              $val2021 = new \concourse\thrift\data\TObject();
              $xfer += $val2021->read($input);
              $this->success[(!is_string($key2020) && !is_integer($key2020)) ? serialize($key2020) : $key2020] = $val2021;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter2022 => $viter2023)
          {
            $xfer += $output->writeI64($kiter2022);
            $xfer += $viter2023->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2024 = 0;
            $_ktype2025 = 0;
            $_vtype2026 = 0;
            $xfer += $input->readMapBegin($_ktype2025, $_vtype2026, $_size2024);
            for ($_i2028 = 0; $_i2028 < $_size2024; ++$_i2028)
            {
              $key2029 = 0;
              $val2030 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key2029);
              $val2030 = new \concourse\thrift\data\TObject();
              $xfer += $val2030->read($input);
              $this->success[(!is_string($key2029) && !is_integer($key2029)) ? serialize($key2029) : $key2029] = $val2030;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter2031 => $viter2032)
          {
            $xfer += $output->writeI64($kiter2031);
            $xfer += $viter2032->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2033 = 0;
            $_ktype2034 = 0;
            $_vtype2035 = 0;
            $xfer += $input->readMapBegin($_ktype2034, $_vtype2035, $_size2033);
            for ($_i2037 = 0; $_i2037 < $_size2033; ++$_i2037)
            {
              $key2038 = 0;
              $val2039 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key2038);
              $val2039 = new \concourse\thrift\data\TObject();
              $xfer += $val2039->read($input);
              $this->success[(!is_string($key2038) && !is_integer($key2038)) ? serialize($key2038) : $key2038] = $val2039;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter2040 => $viter2041)
          {
            $xfer += $output->writeI64($kiter2040);
            $xfer += $viter2041->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2042 = 0;
            $_ktype2043 = 0;
            $_vtype2044 = 0;
            $xfer += $input->readMapBegin($_ktype2043, $_vtype2044, $_size2042);
            for ($_i2046 = 0; $_i2046 < $_size2042; ++$_i2046)
            {
              $key2047 = 0;
              $val2048 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key2047);
              $val2048 = new \concourse\thrift\data\TObject();
              $xfer += $val2048->read($input);
              $this->success[(!is_string($key2047) && !is_integer($key2047)) ? serialize($key2047) : $key2047] = $val2048;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter2049 => $viter2050)
          {
            $xfer += $output->writeI64($kiter2049);
            $xfer += $viter2050->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteria_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2051 = 0;
            $_etype2054 = 0;
            $xfer += $input->readListBegin($_etype2054, $_size2051);
            for ($_i2055 = 0; $_i2055 < $_size2051; ++$_i2055)
            {
              $elem2056 = null;
              $xfer += $input->readString($elem2056);
              $this->keys []= $elem2056;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteria_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2057)
          {
            $xfer += $output->writeString($iter2057);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2058 = 0;
            $_ktype2059 = 0;
            $_vtype2060 = 0;
            $xfer += $input->readMapBegin($_ktype2059, $_vtype2060, $_size2058);
            for ($_i2062 = 0; $_i2062 < $_size2058; ++$_i2062)
            {
              $key2063 = 0;
              $val2064 = array();
              $xfer += $input->readI64($key2063);
              $val2064 = array();
              $_size2065 = 0;
              $_ktype2066 = 0;
              $_vtype2067 = 0;
              $xfer += $input->readMapBegin($_ktype2066, $_vtype2067, $_size2065);
              for ($_i2069 = 0; $_i2069 < $_size2065; ++$_i2069)
              {
                $key2070 = '';
                $val2071 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2070);
                $val2071 = new \concourse\thrift\data\TObject();
                $xfer += $val2071->read($input);
                $val2064[(!is_string($key2070) && !is_integer($key2070)) ? serialize($key2070) : $key2070] = $val2071;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2063) && !is_integer($key2063)) ? serialize($key2063) : $key2063] = $val2064;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2072 => $viter2073)
          {
            $xfer += $output->writeI64($kiter2072);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2073));
              {
                foreach ($viter2073 as $kiter2074 => $viter2075)
                {
                  $xfer += $output->writeString($kiter2074);
                  $xfer += $viter2075->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCcl_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2076 = 0;
            $_etype2079 = 0;
            $xfer += $input->readListBegin($_etype2079, $_size2076);
            for ($_i2080 = 0; $_i2080 < $_size2076; ++$_i2080)
            {
              $elem2081 = null;
              $xfer += $input->readString($elem2081);
              $this->keys []= $elem2081;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCcl_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2082)
          {
            $xfer += $output->writeString($iter2082);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2083 = 0;
            $_ktype2084 = 0;
            $_vtype2085 = 0;
            $xfer += $input->readMapBegin($_ktype2084, $_vtype2085, $_size2083);
            for ($_i2087 = 0; $_i2087 < $_size2083; ++$_i2087)
            {
              $key2088 = 0;
              $val2089 = array();
              $xfer += $input->readI64($key2088);
              $val2089 = array();
              $_size2090 = 0;
              $_ktype2091 = 0;
              $_vtype2092 = 0;
              $xfer += $input->readMapBegin($_ktype2091, $_vtype2092, $_size2090);
              for ($_i2094 = 0; $_i2094 < $_size2090; ++$_i2094)
              {
                $key2095 = '';
                $val2096 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2095);
                $val2096 = new \concourse\thrift\data\TObject();
                $xfer += $val2096->read($input);
                $val2089[(!is_string($key2095) && !is_integer($key2095)) ? serialize($key2095) : $key2095] = $val2096;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2088) && !is_integer($key2088)) ? serialize($key2088) : $key2088] = $val2089;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2097 => $viter2098)
          {
            $xfer += $output->writeI64($kiter2097);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2098));
              {
                foreach ($viter2098 as $kiter2099 => $viter2100)
                {
                  $xfer += $output->writeString($kiter2099);
                  $xfer += $viter2100->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2101 = 0;
            $_etype2104 = 0;
            $xfer += $input->readListBegin($_etype2104, $_size2101);
            for ($_i2105 = 0; $_i2105 < $_size2101; ++$_i2105)
            {
              $elem2106 = null;
              $xfer += $input->readString($elem2106);
              $this->keys []= $elem2106;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2107)
          {
            $xfer += $output->writeString($iter2107);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2108 = 0;
            $_ktype2109 = 0;
            $_vtype2110 = 0;
            $xfer += $input->readMapBegin($_ktype2109, $_vtype2110, $_size2108);
            for ($_i2112 = 0; $_i2112 < $_size2108; ++$_i2112)
            {
              $key2113 = 0;
              $val2114 = array();
              $xfer += $input->readI64($key2113);
              $val2114 = array();
              $_size2115 = 0;
              $_ktype2116 = 0;
              $_vtype2117 = 0;
              $xfer += $input->readMapBegin($_ktype2116, $_vtype2117, $_size2115);
              for ($_i2119 = 0; $_i2119 < $_size2115; ++$_i2119)
              {
                $key2120 = '';
                $val2121 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2120);
                $val2121 = new \concourse\thrift\data\TObject();
                $xfer += $val2121->read($input);
                $val2114[(!is_string($key2120) && !is_integer($key2120)) ? serialize($key2120) : $key2120] = $val2121;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2113) && !is_integer($key2113)) ? serialize($key2113) : $key2113] = $val2114;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2122 => $viter2123)
          {
            $xfer += $output->writeI64($kiter2122);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2123));
              {
                foreach ($viter2123 as $kiter2124 => $viter2125)
                {
                  $xfer += $output->writeString($kiter2124);
                  $xfer += $viter2125->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2126 = 0;
            $_etype2129 = 0;
            $xfer += $input->readListBegin($_etype2129, $_size2126);
            for ($_i2130 = 0; $_i2130 < $_size2126; ++$_i2130)
            {
              $elem2131 = null;
              $xfer += $input->readString($elem2131);
              $this->keys []= $elem2131;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2132)
          {
            $xfer += $output->writeString($iter2132);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2133 = 0;
            $_ktype2134 = 0;
            $_vtype2135 = 0;
            $xfer += $input->readMapBegin($_ktype2134, $_vtype2135, $_size2133);
            for ($_i2137 = 0; $_i2137 < $_size2133; ++$_i2137)
            {
              $key2138 = 0;
              $val2139 = array();
              $xfer += $input->readI64($key2138);
              $val2139 = array();
              $_size2140 = 0;
              $_ktype2141 = 0;
              $_vtype2142 = 0;
              $xfer += $input->readMapBegin($_ktype2141, $_vtype2142, $_size2140);
              for ($_i2144 = 0; $_i2144 < $_size2140; ++$_i2144)
              {
                $key2145 = '';
                $val2146 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2145);
                $val2146 = new \concourse\thrift\data\TObject();
                $xfer += $val2146->read($input);
                $val2139[(!is_string($key2145) && !is_integer($key2145)) ? serialize($key2145) : $key2145] = $val2146;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2138) && !is_integer($key2138)) ? serialize($key2138) : $key2138] = $val2139;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2147 => $viter2148)
          {
            $xfer += $output->writeI64($kiter2147);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2148));
              {
                foreach ($viter2148 as $kiter2149 => $viter2150)
                {
                  $xfer += $output->writeString($kiter2149);
                  $xfer += $viter2150->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2151 = 0;
            $_etype2154 = 0;
            $xfer += $input->readListBegin($_etype2154, $_size2151);
            for ($_i2155 = 0; $_i2155 < $_size2151; ++$_i2155)
            {
              $elem2156 = null;
              $xfer += $input->readString($elem2156);
              $this->keys []= $elem2156;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2157)
          {
            $xfer += $output->writeString($iter2157);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2158 = 0;
            $_ktype2159 = 0;
            $_vtype2160 = 0;
            $xfer += $input->readMapBegin($_ktype2159, $_vtype2160, $_size2158);
            for ($_i2162 = 0; $_i2162 < $_size2158; ++$_i2162)
            {
              $key2163 = 0;
              $val2164 = array();
              $xfer += $input->readI64($key2163);
              $val2164 = array();
              $_size2165 = 0;
              $_ktype2166 = 0;
              $_vtype2167 = 0;
              $xfer += $input->readMapBegin($_ktype2166, $_vtype2167, $_size2165);
              for ($_i2169 = 0; $_i2169 < $_size2165; ++$_i2169)
              {
                $key2170 = '';
                $val2171 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2170);
                $val2171 = new \concourse\thrift\data\TObject();
                $xfer += $val2171->read($input);
                $val2164[(!is_string($key2170) && !is_integer($key2170)) ? serialize($key2170) : $key2170] = $val2171;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2163) && !is_integer($key2163)) ? serialize($key2163) : $key2163] = $val2164;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2172 => $viter2173)
          {
            $xfer += $output->writeI64($kiter2172);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2173));
              {
                foreach ($viter2173 as $kiter2174 => $viter2175)
                {
                  $xfer += $output->writeString($kiter2174);
                  $xfer += $viter2175->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2176 = 0;
            $_etype2179 = 0;
            $xfer += $input->readListBegin($_etype2179, $_size2176);
            for ($_i2180 = 0; $_i2180 < $_size2176; ++$_i2180)
            {
              $elem2181 = null;
              $xfer += $input->readString($elem2181);
              $this->keys []= $elem2181;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2182)
          {
            $xfer += $output->writeString($iter2182);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2183 = 0;
            $_ktype2184 = 0;
            $_vtype2185 = 0;
            $xfer += $input->readMapBegin($_ktype2184, $_vtype2185, $_size2183);
            for ($_i2187 = 0; $_i2187 < $_size2183; ++$_i2187)
            {
              $key2188 = 0;
              $val2189 = array();
              $xfer += $input->readI64($key2188);
              $val2189 = array();
              $_size2190 = 0;
              $_ktype2191 = 0;
              $_vtype2192 = 0;
              $xfer += $input->readMapBegin($_ktype2191, $_vtype2192, $_size2190);
              for ($_i2194 = 0; $_i2194 < $_size2190; ++$_i2194)
              {
                $key2195 = '';
                $val2196 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2195);
                $val2196 = new \concourse\thrift\data\TObject();
                $xfer += $val2196->read($input);
                $val2189[(!is_string($key2195) && !is_integer($key2195)) ? serialize($key2195) : $key2195] = $val2196;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2188) && !is_integer($key2188)) ? serialize($key2188) : $key2188] = $val2189;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2197 => $viter2198)
          {
            $xfer += $output->writeI64($kiter2197);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2198));
              {
                foreach ($viter2198 as $kiter2199 => $viter2200)
                {
                  $xfer += $output->writeString($kiter2199);
                  $xfer += $viter2200->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTime_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTime_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 4);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2201 = 0;
            $_etype2204 = 0;
            $xfer += $input->readListBegin($_etype2204, $_size2201);
            for ($_i2205 = 0; $_i2205 < $_size2201; ++$_i2205)
            {
              $elem2206 = null;
              $xfer += $input->readI64($elem2206);
              $this->records []= $elem2206;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2207)
          {
            $xfer += $output->writeI64($iter2207);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 2);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecords_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecords_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2208 = 0;
            $_etype2211 = 0;
            $xfer += $input->readListBegin($_etype2211, $_size2208);
            for ($_i2212 = 0; $_i2212 < $_size2208; ++$_i2212)
            {
              $elem2213 = null;
              $xfer += $input->readI64($elem2213);
              $this->records []= $elem2213;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2214)
          {
            $xfer += $output->writeI64($iter2214);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 3);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTime_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2215 = 0;
            $_etype2218 = 0;
            $xfer += $input->readListBegin($_etype2218, $_size2215);
            for ($_i2219 = 0; $_i2219 < $_size2215; ++$_i2219)
            {
              $elem2220 = null;
              $xfer += $input->readI64($elem2220);
              $this->records []= $elem2220;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTimestr_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2221)
          {
            $xfer += $output->writeI64($iter2221);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 3);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTimestr_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCriteria_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCriteria_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2222 = 0;
            $_etype2225 = 0;
            $xfer += $input->readSetBegin($_etype2225, $_size2222);
            for ($_i2226 = 0; $_i2226 < $_size2222; ++$_i2226)
            {
              $elem2227 = null;
              $xfer += $input->readI64($elem2227);
              if (is_scalar($elem2227)) {
                $this->success []= $elem2227;
              } else {
                $this->success []= $elem2227;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2228 => $iter2229)
          {
            if (is_scalar($iter2229)) {
            $xfer += $output->writeI64($iter2228);
            } else {
            $xfer += $output->writeI64($iter2229);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCcl_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2230 = 0;
            $_etype2233 = 0;
            $xfer += $input->readSetBegin($_etype2233, $_size2230);
            for ($_i2234 = 0; $_i2234 < $_size2230; ++$_i2234)
            {
              $elem2235 = null;
              $xfer += $input->readI64($elem2235);
              if (is_scalar($elem2235)) {
                $this->success []= $elem2235;
              } else {
                $this->success []= $elem2235;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2236 => $iter2237)
          {
            if (is_scalar($iter2237)) {
            $xfer += $output->writeI64($iter2236);
            } else {
            $xfer += $output->writeI64($iter2237);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValues_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2238 = 0;
            $_etype2241 = 0;
            $xfer += $input->readListBegin($_etype2241, $_size2238);
            for ($_i2242 = 0; $_i2242 < $_size2238; ++$_i2242)
            {
              $elem2243 = null;
              $elem2243 = new \concourse\thrift\data\TObject();
              $xfer += $elem2243->read($input);
              $this->values []= $elem2243;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValues_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2244)
          {
            $xfer += $iter2244->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValues_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2245 = 0;
            $_etype2248 = 0;
            $xfer += $input->readSetBegin($_etype2248, $_size2245);
            for ($_i2249 = 0; $_i2249 < $_size2245; ++$_i2249)
            {
              $elem2250 = null;
              $xfer += $input->readI64($elem2250);
              if (is_scalar($elem2250)) {
                $this->success []= $elem2250;
              } else {
                $this->success []= $elem2250;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValues_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2251 => $iter2252)
          {
            if (is_scalar($iter2252)) {
            $xfer += $output->writeI64($iter2251);
            } else {
            $xfer += $output->writeI64($iter2252);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2253 = 0;
            $_etype2256 = 0;
            $xfer += $input->readListBegin($_etype2256, $_size2253);
            for ($_i2257 = 0; $_i2257 < $_size2253; ++$_i2257)
            {
              $elem2258 = null;
              $elem2258 = new \concourse\thrift\data\TObject();
              $xfer += $elem2258->read($input);
              $this->values []= $elem2258;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2259)
          {
            $xfer += $iter2259->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTime_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2260 = 0;
            $_etype2263 = 0;
            $xfer += $input->readSetBegin($_etype2263, $_size2260);
            for ($_i2264 = 0; $_i2264 < $_size2260; ++$_i2264)
            {
              $elem2265 = null;
              $xfer += $input->readI64($elem2265);
              if (is_scalar($elem2265)) {
                $this->success []= $elem2265;
              } else {
                $this->success []= $elem2265;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2266 => $iter2267)
          {
            if (is_scalar($iter2267)) {
            $xfer += $output->writeI64($iter2266);
            } else {
            $xfer += $output->writeI64($iter2267);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2268 = 0;
            $_etype2271 = 0;
            $xfer += $input->readListBegin($_etype2271, $_size2268);
            for ($_i2272 = 0; $_i2272 < $_size2268; ++$_i2272)
            {
              $elem2273 = null;
              $elem2273 = new \concourse\thrift\data\TObject();
              $xfer += $elem2273->read($input);
              $this->values []= $elem2273;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2274)
          {
            $xfer += $iter2274->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 4);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTimestr_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2275 = 0;
            $_etype2278 = 0;
            $xfer += $input->readSetBegin($_etype2278, $_size2275);
            for ($_i2279 = 0; $_i2279 < $_size2275; ++$_i2279)
            {
              $elem2280 = null;
              $xfer += $input->readI64($elem2280);
              if (is_scalar($elem2280)) {
                $this->success []= $elem2280;
              } else {
                $this->success []= $elem2280;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2281 => $iter2282)
          {
            if (is_scalar($iter2282)) {
            $xfer += $output->writeI64($iter2281);
            } else {
            $xfer += $output->writeI64($iter2282);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValues_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2283 = 0;
            $_etype2286 = 0;
            $xfer += $input->readListBegin($_etype2286, $_size2283);
            for ($_i2287 = 0; $_i2287 < $_size2283; ++$_i2287)
            {
              $elem2288 = null;
              $elem2288 = new \concourse\thrift\data\TObject();
              $xfer += $elem2288->read($input);
              $this->values []= $elem2288;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValues_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2289)
          {
            $xfer += $iter2289->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValues_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2290 = 0;
            $_etype2293 = 0;
            $xfer += $input->readSetBegin($_etype2293, $_size2290);
            for ($_i2294 = 0; $_i2294 < $_size2290; ++$_i2294)
            {
              $elem2295 = null;
              $xfer += $input->readI64($elem2295);
              if (is_scalar($elem2295)) {
                $this->success []= $elem2295;
              } else {
                $this->success []= $elem2295;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValues_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2296 => $iter2297)
          {
            if (is_scalar($iter2297)) {
            $xfer += $output->writeI64($iter2296);
            } else {
            $xfer += $output->writeI64($iter2297);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2298 = 0;
            $_etype2301 = 0;
            $xfer += $input->readListBegin($_etype2301, $_size2298);
            for ($_i2302 = 0; $_i2302 < $_size2298; ++$_i2302)
            {
              $elem2303 = null;
              $elem2303 = new \concourse\thrift\data\TObject();
              $xfer += $elem2303->read($input);
              $this->values []= $elem2303;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2304)
          {
            $xfer += $iter2304->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTime_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2305 = 0;
            $_etype2308 = 0;
            $xfer += $input->readSetBegin($_etype2308, $_size2305);
            for ($_i2309 = 0; $_i2309 < $_size2305; ++$_i2309)
            {
              $elem2310 = null;
              $xfer += $input->readI64($elem2310);
              if (is_scalar($elem2310)) {
                $this->success []= $elem2310;
              } else {
                $this->success []= $elem2310;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2311 => $iter2312)
          {
            if (is_scalar($iter2312)) {
            $xfer += $output->writeI64($iter2311);
            } else {
            $xfer += $output->writeI64($iter2312);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2313 = 0;
            $_etype2316 = 0;
            $xfer += $input->readListBegin($_etype2316, $_size2313);
            for ($_i2317 = 0; $_i2317 < $_size2313; ++$_i2317)
            {
              $elem2318 = null;
              $elem2318 = new \concourse\thrift\data\TObject();
              $xfer += $elem2318->read($input);
              $this->values []= $elem2318;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2319)
          {
            $xfer += $iter2319->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 4);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTimestr_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2320 = 0;
            $_etype2323 = 0;
            $xfer += $input->readSetBegin($_etype2323, $_size2320);
            for ($_i2324 = 0; $_i2324 < $_size2320; ++$_i2324)
            {
              $elem2325 = null;
              $xfer += $input->readI64($elem2325);
              if (is_scalar($elem2325)) {
                $this->success []= $elem2325;
              } else {
                $this->success []= $elem2325;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2326 => $iter2327)
          {
            if (is_scalar($iter2327)) {
            $xfer += $output->writeI64($iter2326);
            } else {
            $xfer += $output->writeI64($iter2327);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_search_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $query = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'query',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['query'])) {
        $this->query = $vals['query'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_search_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->query);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_search_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query !== null) {
      $xfer += $output->writeFieldBegin('query', TType::STRING, 2);
      $xfer += $output->writeString($this->query);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_search_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_search_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2328 = 0;
            $_etype2331 = 0;
            $xfer += $input->readSetBegin($_etype2331, $_size2328);
            for ($_i2332 = 0; $_i2332 < $_size2328; ++$_i2332)
            {
              $elem2333 = null;
              $xfer += $input->readI64($elem2333);
              if (is_scalar($elem2333)) {
                $this->success []= $elem2333;
              } else {
                $this->success []= $elem2333;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_search_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2334 => $iter2335)
          {
            if (is_scalar($iter2335)) {
            $xfer += $output->writeI64($iter2334);
            } else {
            $xfer += $output->writeI64($iter2335);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2336 = 0;
            $_etype2339 = 0;
            $xfer += $input->readListBegin($_etype2339, $_size2336);
            for ($_i2340 = 0; $_i2340 < $_size2336; ++$_i2340)
            {
              $elem2341 = null;
              $xfer += $input->readString($elem2341);
              $this->keys []= $elem2341;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2342 = 0;
            $_etype2345 = 0;
            $xfer += $input->readListBegin($_etype2345, $_size2342);
            for ($_i2346 = 0; $_i2346 < $_size2342; ++$_i2346)
            {
              $elem2347 = null;
              $xfer += $input->readI64($elem2347);
              $this->records []= $elem2347;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2348)
          {
            $xfer += $output->writeString($iter2348);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2349)
          {
            $xfer += $output->writeI64($iter2349);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2350 = 0;
            $_etype2353 = 0;
            $xfer += $input->readListBegin($_etype2353, $_size2350);
            for ($_i2354 = 0; $_i2354 < $_size2350; ++$_i2354)
            {
              $elem2355 = null;
              $xfer += $input->readString($elem2355);
              $this->keys []= $elem2355;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2356 = 0;
            $_etype2359 = 0;
            $xfer += $input->readListBegin($_etype2359, $_size2356);
            for ($_i2360 = 0; $_i2360 < $_size2356; ++$_i2360)
            {
              $elem2361 = null;
              $xfer += $input->readI64($elem2361);
              $this->records []= $elem2361;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2362)
          {
            $xfer += $output->writeString($iter2362);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2363)
          {
            $xfer += $output->writeI64($iter2363);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2364 = 0;
            $_etype2367 = 0;
            $xfer += $input->readListBegin($_etype2367, $_size2364);
            for ($_i2368 = 0; $_i2368 < $_size2364; ++$_i2368)
            {
              $elem2369 = null;
              $xfer += $input->readString($elem2369);
              $this->keys []= $elem2369;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2370)
          {
            $xfer += $output->writeString($iter2370);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2371 = 0;
            $_etype2374 = 0;
            $xfer += $input->readListBegin($_etype2374, $_size2371);
            for ($_i2375 = 0; $_i2375 < $_size2371; ++$_i2375)
            {
              $elem2376 = null;
              $xfer += $input->readString($elem2376);
              $this->keys []= $elem2376;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2377)
          {
            $xfer += $output->writeString($iter2377);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2378 = 0;
            $_etype2381 = 0;
            $xfer += $input->readListBegin($_etype2381, $_size2378);
            for ($_i2382 = 0; $_i2382 < $_size2378; ++$_i2382)
            {
              $elem2383 = null;
              $xfer += $input->readI64($elem2383);
              $this->records []= $elem2383;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2384)
          {
            $xfer += $output->writeI64($iter2384);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2385 = 0;
            $_etype2388 = 0;
            $xfer += $input->readListBegin($_etype2388, $_size2385);
            for ($_i2389 = 0; $_i2389 < $_size2385; ++$_i2389)
            {
              $elem2390 = null;
              $xfer += $input->readI64($elem2390);
              $this->records []= $elem2390;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2391)
          {
            $xfer += $output->writeI64($iter2391);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2392 = 0;
            $_etype2395 = 0;
            $xfer += $input->readListBegin($_etype2395, $_size2392);
            for ($_i2396 = 0; $_i2396 < $_size2392; ++$_i2396)
            {
              $elem2397 = null;
              $xfer += $input->readI64($elem2397);
              $this->records []= $elem2397;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2398)
          {
            $xfer += $output->writeI64($iter2398);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2399 = 0;
            $_ktype2400 = 0;
            $_vtype2401 = 0;
            $xfer += $input->readMapBegin($_ktype2400, $_vtype2401, $_size2399);
            for ($_i2403 = 0; $_i2403 < $_size2399; ++$_i2403)
            {
              $key2404 = 0;
              $val2405 = false;
              $xfer += $input->readI64($key2404);
              $xfer += $input->readBool($val2405);
              $this->success[(!is_string($key2404) && !is_integer($key2404)) ? serialize($key2404) : $key2404] = $val2405;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter2406 => $viter2407)
          {
            $xfer += $output->writeI64($kiter2406);
            $xfer += $output->writeBool($viter2407);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyAndSwap_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $expected = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $replacement = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'expected',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'replacement',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['expected'])) {
        $this->expected = $vals['expected'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['replacement'])) {
        $this->replacement = $vals['replacement'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyAndSwap_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->expected = new \concourse\thrift\data\TObject();
            $xfer += $this->expected->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->replacement = new \concourse\thrift\data\TObject();
            $xfer += $this->replacement->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyAndSwap_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expected !== null) {
      if (!is_object($this->expected)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('expected', TType::STRUCT, 2);
      $xfer += $this->expected->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replacement !== null) {
      if (!is_object($this->replacement)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('replacement', TType::STRUCT, 4);
      $xfer += $this->replacement->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyAndSwap_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyAndSwap_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyAndSwap_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyOrSet_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyOrSet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyOrSet_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyOrSet_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyOrSet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyOrSet_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrAddKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrAddKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrAddKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrAddKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\DuplicateEntryException
   */
  public $ex3 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\DuplicateEntryException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrAddKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\DuplicateEntryException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrAddKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCriteriaJson_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $json = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCriteriaJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCriteriaJson_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 2);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCriteriaJson_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\DuplicateEntryException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\DuplicateEntryException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCriteriaJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\DuplicateEntryException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCriteriaJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCclJson_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $json = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCclJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCclJson_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 2);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCclJson_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;
  /**
   * @var \concourse\thrift\exceptions\DuplicateEntryException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\DuplicateEntryException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCclJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \concourse\thrift\exceptions\DuplicateEntryException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCclJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerEnvironment_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerEnvironment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->token = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerEnvironment_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 2);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerEnvironment_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerEnvironment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerEnvironment_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerVersion_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ConcourseService_getServerVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerVersion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerVersion_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerVersion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_time_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_time_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->token = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_time_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 2);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_time_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_time_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_time_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_timePhrase_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $phrase = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phrase',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['phrase'])) {
        $this->phrase = $vals['phrase'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_timePhrase_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phrase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->token = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_timePhrase_args');
    if ($this->phrase !== null) {
      $xfer += $output->writeFieldBegin('phrase', TType::STRING, 1);
      $xfer += $output->writeString($this->phrase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 3);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_timePhrase_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_timePhrase_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_timePhrase_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



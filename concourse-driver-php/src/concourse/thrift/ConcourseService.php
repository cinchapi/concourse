<?php
namespace concourse\thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * The interface definition for the Concourse Server API.
 */
interface ConcourseServiceIf {
  /**
   * Abort the current transaction and discard any changes that are
   * currently staged.
   * <p>
   * After returning, the driver will return to {@code autocommit} mode and
   * all subsequent changes will be committed immediately.
   * </p>
   * <p>
   * Calling this method when the driver is not in {@code staging} mode is a
   * no-op.
   * </p>
   * @param record the id of the record in which an attempt is made to add
   *                 the data
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @throws exceptions.SecurityException if the {@code creds} don't represent a
   *         valid session
   * 
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   */
  public function abort(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Append {@code key} as {@code value} in a new record.
   * 
   * @param key the field name
   * @param value the value to add
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return the new record id
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.InvalidArgumentException if any of provided data
   *         can't be stored
   * 
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function addKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Append {@code key} as {@code value} in {@code record}.
   * 
   * @param key the field name
   * @param value the value to add
   * @param record the record id where an attempt is made to add the data
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a bool that indicates if the data was added
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.InvalidArgumentException if any of provided data
   *         can't be stored
   * 
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function addKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Append {@code key} as {@code value} in each of the {@code records} where it
   * doesn't exist.
   * 
   * @param key the field name
   * @param value the value to add
   * @param records a list of record ids where an attempt is made to add the
   *                  data
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a mapping from each record id to a boolean that indicates if the
   *                   data was added
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.InvalidArgumentException if any of provided data
   *         can't be stored
   * 
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function addKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes ever made to {@code record}.
   * 
   * @param record the record id
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *                  revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to {@code record} since {@code start}
   * (inclusive).
   * 
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *                  revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to {@code record} since {@code start}
   * (inclusive).
   * 
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *                  revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int $record
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function auditRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to {@code record} between {@code start}
   * (inclusive) and {@code end} (non-inclusive).
   * 
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param end a non-inclusive timestamp that for the most recent recent
   *              change that should possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to {@code record} between {@code start}
   * (inclusive) and {@code end} (non-inclusive).
   * 
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param end a non-inclusive timestamp that for the most recent recent
   *              change that should possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function auditRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes ever made to the {@code key} field in {@code record}.
   * 
   * @param key the field name
   * @param record the record id
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to the {@code key} field in {@code record} since
   * {@code start} (inclusive).
   * 
   * @param key the field name
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to the {@code key} field in {@code record} since
   * {@code start} (inclusive).
   * 
   * @param key the field name
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function auditKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to the {@code key} field in {@code record}
   * between {@code start} (inclusive) and {@code end} (non-inclusive).
   * 
   * @param key the field name
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param end a non-inclusive timestamp that for the most recent change that
   *              should possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function auditKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the changes made to the {@code key} field in {@code record}
   * between {@code start} (inclusive) and {@code end} (non-inclusive).
   * 
   * @param key the field name
   * @param record the record id
   * @param start an inclusive timestamp for the oldest change that should
   *                possibly be included in the audit
   * @param end a non-inclusive timestamp that for the most recent recent
   *              change that should possibly be included in the audit
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return for each change, a mapping from timestamp to a description of the
   *         revision
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function auditKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that are currently stored for {@code key}.
   * 
   * @param keys the field name
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each value to the {@link Set} of records
   *         that contain that value in the {@code key} field
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function browseKey($key, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that are currently stored for each of the
   * {@code keys}.
   * 
   * @param keys a list of field names
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each key to a {@link Map} associating
   *         each value to the set of records that contain that value in the
   *         {@code key} field
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string[] $keys
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function browseKeys(array $keys, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that were stored for {@code key} at
   * {@code timestamp}.
   * 
   * @param keys the field name
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each value to the {@link Set} of records
   *         that contained that value in the {@code key} field at {@code
   *         timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function browseKeyTime($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that were stored for {@code key} at
   * {@code timestamp}.
   * 
   * @param keys the field name
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each value to the {@link Set} of records
   *         that contained that value in the {@code key} field at {@code
   *         timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function browseKeyTimestr($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that were stored for each of the
   * {@code keys} at {@code timestamp}.
   * 
   * @param keys a list of field names
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each key to a {@link Map} associating
   *         each value to the {@link Set} of records that contained that value
   *         in the {@code key} field at {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string[] $keys
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function browseKeysTime(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View the values from all records that were stored for each of the
   * {@code keys} at {@code timestamp}.
   * 
   * @param keys a list of field names
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each key to a {@link Map} associating
   *         each value to the {@link Set} of records that contained that value
   *         in the {@code key} field at {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string[] $keys
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function browseKeysTimestr(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View a time series that associates the timestamp of each modification for
   * {@code key} in {@code record} to a snapshot containing the values that
   * were stored in the field after the change.
   * 
   * @param key the field name
   * @param record the record id
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each modification timestamp to the
   *         {@link Set} of values that were stored in the field after the
   *         change.
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function chronologizeKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View a time series between {@code start} (inclusive) and the present that
   * associates the timestamp of each modification for {@code key} in
   * {@code record} to a snapshot containing the values that
   * were stored in the field after the change.
   * 
   * @param key the field name
   * @param record the record id
   * @param start the first possible {@link Timestamp} to include in the
   *            time series
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each modification timestamp to the
   *         {@link Set} of values that were stored in the field after the
   *         change.
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function chronologizeKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View a time series between {@code start} (inclusive) and the present that
   * associates the timestamp of each modification for {@code key} in
   * {@code record} to a snapshot containing the values that
   * were stored in the field after the change.
   * 
   * @param key the field name
   * @param record the record id
   * @param start the first possible {@link Timestamp} to include in the
   *            time series
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each modification timestamp to the
   *         {@link Set} of values that were stored in the field after the
   *         change.
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function chronologizeKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View a time series between {@code start} (inclusive) and {@code end}
   * (non-inclusive) that associates the timestamp of each modification for
   * {@code key} in {@code record} to a snapshot containing the values that
   * were stored in the field after the change.
   * 
   * @param key the field name
   * @param record the record id
   * @param start the first possible {@link Timestamp} to include in the
   *            time series
   * @param end the {@link Timestamp} that should be greater than every
   *            timestamp in the time series
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each modification timestamp to the
   *         {@link Set} of values that were stored in the field after the
   *         change.
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * View a time series between {@code start} (inclusive) and {@code end}
   * (non-inclusive) that associates the timestamp of each modification for
   * {@code key} in {@code record} to a snapshot containing the values that
   * were stored in the field after the change.
   * 
   * @param key the field name
   * @param record the record id
   * @param start the first possible {@link Timestamp} to include in the
   *            time series
   * @param end the {@link Timestamp} that should be greater than every
   *            timestamp in the time series
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each modification timestamp to the
   *         {@link Set} of values that were stored in the field after the
   *         change.
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function clearKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Attempt to permanently commit any changes that are staged in a transaction
   * and return {@code true} if and only if all the changes can be applied.
   * Otherwise, returns {@code false} and all the changes are discarded.
   * <p>
   * After returning, the driver will return to {@code autocommit} mode and
   * all subsequent changes will be committed immediately.
   * </p>
   * <p>
   * This method will return {@code false} if it is called when the driver is
   * not in {@code staging} mode.
   * </p>
   * 
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return {@code true} if all staged changes are committed, otherwise {@code
   *                      false}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function commit(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the keys in {@code record} that have at least one value.
   * 
   * @param record the record id
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return the {@link Set} of keys in {@code record}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function describeRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the keys in {@code record} that had at least one value at
   * {@code timestamp}.
   * 
   * @param record the record id
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return the {@link Set} of keys that were in {@code record} at
   *         {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function describeRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List all the keys in {@code record} that have at least one value.
   * 
   * @param record the record id
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return the {@link Set} of keys that were in {@code record} at
   *         {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function describeRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * For each of the {@code records}, list all of the keys that have at least
   * one value.
   * 
   * @param records a collection of record ids
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each record id to the {@link Set} of
   *         keys in that record
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function describeRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * For each of the {@code records}, list all the keys that had at least one
   * value at {@code timestamp}.
   * 
   * @param records a collection of record ids
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each record id to the {@link Set} of
   *         keys that were in that record at {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function describeRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * For each of the {@code records}, list all the keys that had at least one
   * value at {@code timestamp}.
   * 
   * @param records a collection of record ids
   * @param timestamp the historical timestamp to use in the lookup
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} associating each record id to the {@link Set} of
   *         keys that were in that record at {@code timestamp}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function describeRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code record} since {@code start}.
   * 
   * <p>
   * If you begin with the state of the {@code record} at {@code start} and
   * re-apply all the changes in the diff, you'll re-create the state of the
   * {@code record} at the present.
   * </p>
   * 
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each key in the {@code record} to
   *         another {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {"key": {ADDED: ["value1", "value2"], REMOVED: ["value3",
   *         "value4"]}}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code record} since {@code start}.
   * 
   * <p>
   * If you begin with the state of the {@code record} at {@code start} and
   * re-apply all the changes in the diff, you'll re-create the state of the
   * {@code record} at the present.
   * </p>
   * 
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each key in the {@code record} to
   *         another {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {"key": {ADDED: ["value1", "value2"], REMOVED: ["value3",
   *         "value4"]}}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int $record
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code record} from {@code start} to
   * {@code end}.
   * 
   * <p>
   * If you begin with the state of the {@code record} at {@code start} and
   * re-apply all the changes in the diff, you'll re-create the state of the
   * {@code record} at {@code end}.
   * </p>
   * 
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each key in the {@code record} to
   *         another {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {"key": {ADDED: ["value1", "value2"], REMOVED: ["value3",
   *         "value4"]}}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code record} from {@code start} to
   * {@code end}.
   * 
   * <p>
   * If you begin with the state of the {@code record} at {@code start} and
   * re-apply all the changes in the diff, you'll re-create the state of the
   * {@code record} at {@code end}.
   * </p>
   * 
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each key in the {@code record} to
   *         another {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {"key": {ADDED: ["value1", "value2"], REMOVED: ["value3",
   *         "value4"]}}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code key} in {@code record} since
   * {@code start}.
   * 
   * <p>
   * If you begin with the state of the field at {@code start} and re-apply
   * all the changes in the diff, you'll re-create the state of the field at
   * the present.
   * </p>
   * 
   * @param key the field name
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {ADDED: ["value1", "value2"], REMOVED: ["value3", "value4"]}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code key} in {@code record} since
   * {@code start}.
   * 
   * <p>
   * If you begin with the state of the field at {@code start} and re-apply
   * all the changes in the diff, you'll re-create the state of the field at
   * the present.
   * </p>
   * 
   * @param key the field name
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {ADDED: ["value1", "value2"], REMOVED: ["value3", "value4"]}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code key} in {@code record} from
   * {@code start} to {@code end}.
   * 
   * <p>
   * If you begin with the state of the field at {@code start} and re-apply
   * all the changes in the diff, you'll re-create the state of the field at
   * {@code end}.
   * </p>
   * 
   * @param key the field name
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {ADDED: ["value1", "value2"], REMOVED: ["value3", "value4"]}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to {@code key} in {@code record} from
   * {@code start} to {@code end}.
   * 
   * <p>
   * If you begin with the state of the field at {@code start} and re-apply
   * all the changes in the diff, you'll re-create the state of the field at
   * {@code end}.
   * </p>
   * 
   * @param key the field name
   * @param record the record id
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates a {@link Diff change
   *         description} to the {@link Set} of values that fit the
   *         description (i.e. <code>
   *         {ADDED: ["value1", "value2"], REMOVED: ["value3", "value4"]}
   *         </code> )
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to the {@code key} field across all records
   * since {@code start}.
   * 
   * <p>
   * If you begin with the state of an inverted index for {@code key} at
   * {@code start} and re-apply all the changes in the diff, you'll re-create
   * the state of the same index at the present.
   * </p>
   * 
   * @param key the field name
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each value stored for {@code key}
   *         across all records to another {@link Map} that associates a
   *         {@link Diff change description} to the {@link Set} of records
   *         where the description applies to that value in the {@code key}
   *         field (i.e. <code>
   *         {"value1": {ADDED: [1, 2], REMOVED: [3, 4]}}
   *         </code>)
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffKeyStart($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to the {@code key} field across all records
   * since {@code start}.
   * 
   * <p>
   * If you begin with the state of an inverted index for {@code key} at
   * {@code start} and re-apply all the changes in the diff, you'll re-create
   * the state of the same index at the present.
   * </p>
   * 
   * @param key the field name
   * @param start the base timestamp from which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each value stored for {@code key}
   *         across all records to another {@link Map} that associates a
   *         {@link Diff change description} to the {@link Set} of records
   *         where the description applies to that value in the {@code key}
   *         field (i.e. <code>
   *         {"value1": {ADDED: [1, 2], REMOVED: [3, 4]}}
   *         </code>)
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param string $start
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffKeyStartstr($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to the {@code key} field across all records
   * from {@code start} to {@code end}.
   * 
   * <p>
   * If you begin with the state of an inverted index for {@code key} at
   * {@code start} and re-apply all the changes in the diff, you'll re-create
   * the state of the same index at {@code end}.
   * </p>
   * 
   * @param key the field name
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each value stored for {@code key}
   *         across all records to another {@link Map} that associates a
   *         {@link Diff change description} to the {@link Set} of records
   *         where the description applies to that value in the {@code key}
   *         field (i.e. <code>
   *         {"value1": {ADDED: [1, 2], REMOVED: [3, 4]}}
   *         </code>)
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * 
   * @param string $key
   * @param int $start
   * @param int $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function diffKeyStartEnd($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * List the net changes made to the {@code key} field across all records
   * from {@code start} to {@code end}.
   * 
   * <p>
   * If you begin with the state of an inverted index for {@code key} at
   * {@code start} and re-apply all the changes in the diff, you'll re-create
   * the state of the same index at {@code end}.
   * </p>
   * 
   * @param key the field name
   * @param start the base timestamp from which the diff is calculated
   * @param end the comparison timestamp to which the diff is calculated
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a {@link Map} that associates each value stored for {@code key}
   *         across all records to another {@link Map} that associates a
   *         {@link Diff change description} to the {@link Set} of records
   *         where the description applies to that value in the {@code key}
   *         field (i.e. <code>
   *         {"value1": {ADDED: [1, 2], REMOVED: [3, 4]}}
   *         </code>)
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.ParseException if a string cannot be properly parsed
   *         into a timestamp
   * 
   * @param string $key
   * @param string $start
   * @param string $tend
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function diffKeyStartstrEndstr($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Attempt to authenticate the user identified by the {@code username} and
   * {@code password} combination to the specified {@code environment}. If
   * successful, establish a new session within the {@code environment} on
   * behalf of that user and return an {@link shared.AccessToken}, which is
   * required for all subsequent operations.
   * 
   * <p>
   * The AccessToken <em>may</em> expire after a while so clients should be
   * prepared to seamlessly login again for active user sessions.
   * </p>
   * 
   * @param username a binary representation of the UTF-8 encoded username
   * @param password a binary representation of the UTF-8 encoded password
   * @param environment the name of the environment into which to login
   * @return an {@link shared.AccessToken} to submit with all subsequent method
   *         calls
   * @throws exceptions.SecurityException if the login is not successful
   * 
   * @param string $username
   * @param string $password
   * @param string $environment
   * @return \concourse\thrift\shared\AccessToken A temporary token that is returned by the
   * {@link ConcourseService#login(String, String)} method to grant access
   * to secure resources in place of raw credentials.
   * 
   * @throws \concourse\thrift\exceptions\SecurityException
   */
  public function login($username, $password, $environment);
  /**
   * Terminate the session within {@code environment} for the user represented
   * by the {@code token}. Afterwards, all other attempts to use {@code token}
   * will result in a {@link exceptions.SecurityException} being thrown.
   * 
   * @param token the {@link shared.AccessToken to expire}
   * @param environment the environment of the session represented by the
   *                    {@code token}
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * 
   * @param \concourse\thrift\shared\AccessToken $token
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   */
  public function logout(\concourse\thrift\shared\AccessToken $token, $environment);
  /**
   * Start a new transaction.
   * <p>
   * This method will turn on STAGING mode so that all subsequent changes are
   * collected in an isolated buffer before possibly being committed to the
   * database. Staged operations are guaranteed to be reliable, all or nothing
   * units of work that allow correct recovery from failures and provide
   * isolation between clients so the database is always in a consistent state.
   * </p>
   * <p>
   * After this method returns, all subsequent operations will be done in
   * {@code staging} mode until either #abort(shared.AccessToken) or
   * #commit(shared.AccessToken) is called.
   * </p>
   * 
   * @param token
   * @param environment
   * @return TransactionToken
   * @throws TSecurityException
   * 
   * @param \concourse\thrift\shared\AccessToken $token
   * @param string $environment
   * @return \concourse\thrift\shared\TransactionToken A token that identifies a Transaction.
   * 
   * @throws \concourse\thrift\exceptions\SecurityException
   */
  public function stage(\concourse\thrift\shared\AccessToken $token, $environment);
  /**
   * @param string $json
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function insertJson($json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $json
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function insertJsonRecord($json, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $json
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function insertJsonRecords($json, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function removeKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function removeKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function setKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function setKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function setKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * The {@code value} in {@code key} of {@code record} are added
   * and removed to be set as exactly the same as the input values
   * 
   * @param key the field name
   * @param record the record id where an attempt is made to add the data
   * @param values collection of values to set
   * @param creds the {@link shared.AccessToken} that is used to authenticate
   *                the user on behalf of whom the client is connected
   * @param transaction the {@link shared.TransactionToken} that the
   *                      server uses to find the current transaction for the
   *                      client (optional)
   * @param environment the environment to which the client is connected
   * @return a bool that indicates if the data was added
   * @throws exceptions.SecurityException if the {@code creds} don't
   *         represent a valid session
   * @throws exceptions.TransactionException if the client was in a
   *         transaction and an error occurred that caused the transaction
   *         to end itself
   * @throws exceptions.InvalidArgumentException if any of provided data
   *         can't be stored
   * 
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\data\TObject[] $values
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function reconcileKeyRecordValues($key, $record, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function inventory(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function selectKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function selectKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \concourse\thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function getKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function verifyKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function verifyKeyValueRecordTime($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function verifyKeyValueRecordTimestr($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param bool $identifier
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function jsonifyRecords(array $records, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param int $timestamp
   * @param bool $identifier
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function jsonifyRecordsTime(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param string $timestamp
   * @param bool $identifier
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function jsonifyRecordsTimestr(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function findCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function findCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function findKeyOperatorValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function findKeyOperatorValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function findKeyOperatorstrValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function findKeyOperatorstrValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \concourse\thrift\data\TObject[] $values
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function findKeyOperatorstrValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $query
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function search($key, $query, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function revertKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function revertKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function revertKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function revertKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function revertKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function revertKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function revertKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $timestamp
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function revertKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function pingRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function pingRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $expected
   * @param int $record
   * @param \concourse\thrift\data\TObject $replacement
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function verifyAndSwap($key, \concourse\thrift\data\TObject $expected, $record, \concourse\thrift\data\TObject $replacement, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param int $record
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function verifyOrSet($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \concourse\thrift\data\TObject $value
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\DuplicateEntryException
   * @throws \concourse\thrift\exceptions\InvalidArgumentException
   */
  public function findOrAddKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\data\TCriteria $criteria
   * @param string $json
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\DuplicateEntryException
   */
  public function findOrInsertCriteriaJson(\concourse\thrift\data\TCriteria $criteria, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param string $json
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   * @throws \concourse\thrift\exceptions\DuplicateEntryException
   */
  public function findOrInsertCclJson($ccl, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $token
   * @param string $environment
   * @return string
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getServerEnvironment(\concourse\thrift\shared\AccessToken $creds,  $token, $environment);
  /**
   * @return string
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function getServerVersion();
  /**
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $token
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   */
  public function time(\concourse\thrift\shared\AccessToken $creds,  $token, $environment);
  /**
   * @param string $phrase
   * @param \concourse\thrift\shared\AccessToken $creds
   * @param \concourse\thrift\shared\TransactionToken $token
   * @param string $environment
   * @return int
   * @throws \concourse\thrift\exceptions\SecurityException
   * @throws \concourse\thrift\exceptions\TransactionException
   * @throws \concourse\thrift\exceptions\ParseException
   */
  public function timePhrase($phrase, \concourse\thrift\shared\AccessToken $creds,  $token, $environment);
}

class ConcourseServiceClient implements \concourse\thrift\ConcourseServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function abort(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_abort($creds, $transaction, $environment);
    $this->recv_abort();
  }

  public function send_abort(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_abort_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'abort', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('abort', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_abort()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_abort_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_abort_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function addKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_addKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_addKeyValue();
  }

  public function send_addKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_addKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_addKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_addKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("addKeyValue failed: unknown result");
  }

  public function addKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_addKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_addKeyValueRecord();
  }

  public function send_addKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_addKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_addKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_addKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("addKeyValueRecord failed: unknown result");
  }

  public function addKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_addKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    return $this->recv_addKeyValueRecords();
  }

  public function send_addKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_addKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_addKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_addKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("addKeyValueRecords failed: unknown result");
  }

  public function auditRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecord($record, $creds, $transaction, $environment);
    return $this->recv_auditRecord();
  }

  public function send_auditRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecord failed: unknown result");
  }

  public function auditRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStart($record, $start, $creds, $transaction, $environment);
    return $this->recv_auditRecordStart();
  }

  public function send_auditRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditRecordStart_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecordStart failed: unknown result");
  }

  public function auditRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStartstr($record, $start, $creds, $transaction, $environment);
    return $this->recv_auditRecordStartstr();
  }

  public function send_auditRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditRecordStartstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditRecordStartstr failed: unknown result");
  }

  public function auditRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStartEnd($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditRecordStartEnd();
  }

  public function send_auditRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditRecordStartEnd_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecordStartEnd failed: unknown result");
  }

  public function auditRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStartstrEndstr($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditRecordStartstrEndstr();
  }

  public function send_auditRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditRecordStartstrEndstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditRecordStartstrEndstr failed: unknown result");
  }

  public function auditKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecord();
  }

  public function send_auditKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecord failed: unknown result");
  }

  public function auditKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStart();
  }

  public function send_auditKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecordStart failed: unknown result");
  }

  public function auditKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStartstr($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStartstr();
  }

  public function send_auditKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditKeyRecordStartstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditKeyRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditKeyRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditKeyRecordStartstr failed: unknown result");
  }

  public function auditKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStartEnd();
  }

  public function send_auditKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecordStartEnd failed: unknown result");
  }

  public function auditKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStartstrEndstr($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStartstrEndstr();
  }

  public function send_auditKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_auditKeyRecordStartstrEndstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_auditKeyRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_auditKeyRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditKeyRecordStartstrEndstr failed: unknown result");
  }

  public function browseKey($key, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKey($key, $creds, $transaction, $environment);
    return $this->recv_browseKey();
  }

  public function send_browseKey($key, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKey_args();
    $args->key = $key;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKey', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKey', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKey()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKey_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKey_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKey failed: unknown result");
  }

  public function browseKeys(array $keys, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeys($keys, $creds, $transaction, $environment);
    return $this->recv_browseKeys();
  }

  public function send_browseKeys(array $keys, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKeys_args();
    $args->keys = $keys;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeys', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeys', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeys()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKeys_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKeys_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeys failed: unknown result");
  }

  public function browseKeyTime($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeyTime($key, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeyTime();
  }

  public function send_browseKeyTime($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKeyTime_args();
    $args->key = $key;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeyTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeyTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeyTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKeyTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKeyTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeyTime failed: unknown result");
  }

  public function browseKeyTimestr($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeyTimestr($key, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeyTimestr();
  }

  public function send_browseKeyTimestr($key, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKeyTimestr_args();
    $args->key = $key;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeyTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeyTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeyTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKeyTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKeyTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("browseKeyTimestr failed: unknown result");
  }

  public function browseKeysTime(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeysTime($keys, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeysTime();
  }

  public function send_browseKeysTime(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKeysTime_args();
    $args->keys = $keys;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeysTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeysTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeysTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKeysTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKeysTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeysTime failed: unknown result");
  }

  public function browseKeysTimestr(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeysTimestr($keys, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeysTimestr();
  }

  public function send_browseKeysTimestr(array $keys, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_browseKeysTimestr_args();
    $args->keys = $keys;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeysTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeysTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeysTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_browseKeysTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_browseKeysTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("browseKeysTimestr failed: unknown result");
  }

  public function chronologizeKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecord();
  }

  public function send_chronologizeKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_chronologizeKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_chronologizeKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_chronologizeKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecord failed: unknown result");
  }

  public function chronologizeKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStart();
  }

  public function send_chronologizeKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_chronologizeKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecordStart failed: unknown result");
  }

  public function chronologizeKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStartstr($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStartstr();
  }

  public function send_chronologizeKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_chronologizeKeyRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("chronologizeKeyRecordStartstr failed: unknown result");
  }

  public function chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStartEnd();
  }

  public function send_chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_chronologizeKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecordStartEnd failed: unknown result");
  }

  public function chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStartstrEndstr();
  }

  public function send_chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartstrEndstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_chronologizeKeyRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_chronologizeKeyRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("chronologizeKeyRecordStartstrEndstr failed: unknown result");
  }

  public function clearRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearRecord($record, $creds, $transaction, $environment);
    $this->recv_clearRecord();
  }

  public function send_clearRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearRecords($records, $creds, $transaction, $environment);
    $this->recv_clearRecords();
  }

  public function send_clearRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeyRecord($key, $record, $creds, $transaction, $environment);
    $this->recv_clearKeyRecord();
  }

  public function send_clearKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeysRecord($keys, $record, $creds, $transaction, $environment);
    $this->recv_clearKeysRecord();
  }

  public function send_clearKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeyRecords($key, $records, $creds, $transaction, $environment);
    $this->recv_clearKeyRecords();
  }

  public function send_clearKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeysRecords($keys, $records, $creds, $transaction, $environment);
    $this->recv_clearKeysRecords();
  }

  public function send_clearKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_clearKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_clearKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_clearKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function commit(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_commit($creds, $transaction, $environment);
    return $this->recv_commit();
  }

  public function send_commit(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_commit_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'commit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('commit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_commit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_commit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_commit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("commit failed: unknown result");
  }

  public function describeRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecord($record, $creds, $transaction, $environment);
    return $this->recv_describeRecord();
  }

  public function send_describeRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecord failed: unknown result");
  }

  public function describeRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordTime($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordTime();
  }

  public function send_describeRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecordTime_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecordTime failed: unknown result");
  }

  public function describeRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordTimestr($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordTimestr();
  }

  public function send_describeRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecordTimestr_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("describeRecordTimestr failed: unknown result");
  }

  public function describeRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecords($records, $creds, $transaction, $environment);
    return $this->recv_describeRecords();
  }

  public function send_describeRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecords failed: unknown result");
  }

  public function describeRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordsTime($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordsTime();
  }

  public function send_describeRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecordsTime failed: unknown result");
  }

  public function describeRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordsTimestr($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordsTimestr();
  }

  public function send_describeRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_describeRecordsTimestr_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_describeRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_describeRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("describeRecordsTimestr failed: unknown result");
  }

  public function diffRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStart($record, $start, $creds, $transaction, $environment);
    return $this->recv_diffRecordStart();
  }

  public function send_diffRecordStart($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffRecordStart_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffRecordStart failed: unknown result");
  }

  public function diffRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStartstr($record, $start, $creds, $transaction, $environment);
    return $this->recv_diffRecordStartstr();
  }

  public function send_diffRecordStartstr($record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffRecordStartstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffRecordStartstr failed: unknown result");
  }

  public function diffRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStartEnd($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffRecordStartEnd();
  }

  public function send_diffRecordStartEnd($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffRecordStartEnd_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffRecordStartEnd failed: unknown result");
  }

  public function diffRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStartstrEndstr($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffRecordStartstrEndstr();
  }

  public function send_diffRecordStartstrEndstr($record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffRecordStartstrEndstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffRecordStartstrEndstr failed: unknown result");
  }

  public function diffKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStart();
  }

  public function send_diffKeyRecordStart($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyRecordStart failed: unknown result");
  }

  public function diffKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStartstr($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStartstr();
  }

  public function send_diffKeyRecordStartstr($key, $record, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyRecordStartstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyRecordStartstr failed: unknown result");
  }

  public function diffKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStartEnd();
  }

  public function send_diffKeyRecordStartEnd($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyRecordStartEnd failed: unknown result");
  }

  public function diffKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStartstrEndstr($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStartstrEndstr();
  }

  public function send_diffKeyRecordStartstrEndstr($key, $record, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyRecordStartstrEndstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyRecordStartstrEndstr failed: unknown result");
  }

  public function diffKeyStart($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStart($key, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyStart();
  }

  public function send_diffKeyStart($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyStart_args();
    $args->key = $key;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyStart failed: unknown result");
  }

  public function diffKeyStartstr($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStartstr($key, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyStartstr();
  }

  public function send_diffKeyStartstr($key, $start, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyStartstr_args();
    $args->key = $key;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyStartstr failed: unknown result");
  }

  public function diffKeyStartEnd($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStartEnd($key, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyStartEnd();
  }

  public function send_diffKeyStartEnd($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyStartEnd_args();
    $args->key = $key;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyStartEnd failed: unknown result");
  }

  public function diffKeyStartstrEndstr($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStartstrEndstr($key, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyStartstrEndstr();
  }

  public function send_diffKeyStartstrEndstr($key, $start, $tend, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_diffKeyStartstrEndstr_args();
    $args->key = $key;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_diffKeyStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_diffKeyStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyStartstrEndstr failed: unknown result");
  }

  public function login($username, $password, $environment)
  {
    $this->send_login($username, $password, $environment);
    return $this->recv_login();
  }

  public function send_login($username, $password, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_login_args();
    $args->username = $username;
    $args->password = $password;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("login failed: unknown result");
  }

  public function logout(\concourse\thrift\shared\AccessToken $token, $environment)
  {
    $this->send_logout($token, $environment);
    $this->recv_logout();
  }

  public function send_logout(\concourse\thrift\shared\AccessToken $token, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_logout_args();
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'logout', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('logout', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_logout()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_logout_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_logout_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function stage(\concourse\thrift\shared\AccessToken $token, $environment)
  {
    $this->send_stage($token, $environment);
    return $this->recv_stage();
  }

  public function send_stage(\concourse\thrift\shared\AccessToken $token, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_stage_args();
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'stage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('stage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_stage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_stage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_stage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("stage failed: unknown result");
  }

  public function insertJson($json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_insertJson($json, $creds, $transaction, $environment);
    return $this->recv_insertJson();
  }

  public function send_insertJson($json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_insertJson_args();
    $args->json = $json;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_insertJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_insertJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("insertJson failed: unknown result");
  }

  public function insertJsonRecord($json, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_insertJsonRecord($json, $record, $creds, $transaction, $environment);
    return $this->recv_insertJsonRecord();
  }

  public function send_insertJsonRecord($json, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_insertJsonRecord_args();
    $args->json = $json;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJsonRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJsonRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJsonRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_insertJsonRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_insertJsonRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("insertJsonRecord failed: unknown result");
  }

  public function insertJsonRecords($json, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_insertJsonRecords($json, $records, $creds, $transaction, $environment);
    return $this->recv_insertJsonRecords();
  }

  public function send_insertJsonRecords($json, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_insertJsonRecords_args();
    $args->json = $json;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJsonRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJsonRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJsonRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_insertJsonRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_insertJsonRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("insertJsonRecords failed: unknown result");
  }

  public function removeKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_removeKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_removeKeyValueRecord();
  }

  public function send_removeKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_removeKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_removeKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_removeKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("removeKeyValueRecord failed: unknown result");
  }

  public function removeKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_removeKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    return $this->recv_removeKeyValueRecords();
  }

  public function send_removeKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_removeKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_removeKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_removeKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("removeKeyValueRecords failed: unknown result");
  }

  public function setKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_setKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    $this->recv_setKeyValueRecord();
  }

  public function send_setKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_setKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_setKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_setKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function setKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_setKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_setKeyValue();
  }

  public function send_setKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_setKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_setKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_setKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("setKeyValue failed: unknown result");
  }

  public function setKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_setKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    $this->recv_setKeyValueRecords();
  }

  public function send_setKeyValueRecords($key, \concourse\thrift\data\TObject $value, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_setKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_setKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_setKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function reconcileKeyRecordValues($key, $record, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_reconcileKeyRecordValues($key, $record, $values, $creds, $transaction, $environment);
    $this->recv_reconcileKeyRecordValues();
  }

  public function send_reconcileKeyRecordValues($key, $record, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_reconcileKeyRecordValues_args();
    $args->key = $key;
    $args->record = $record;
    $args->values = $values;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'reconcileKeyRecordValues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('reconcileKeyRecordValues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_reconcileKeyRecordValues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_reconcileKeyRecordValues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_reconcileKeyRecordValues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function inventory(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_inventory($creds, $transaction, $environment);
    return $this->recv_inventory();
  }

  public function send_inventory(\concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_inventory_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'inventory', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('inventory', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_inventory()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_inventory_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_inventory_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("inventory failed: unknown result");
  }

  public function selectRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecord($record, $creds, $transaction, $environment);
    return $this->recv_selectRecord();
  }

  public function send_selectRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecord failed: unknown result");
  }

  public function selectRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecords($records, $creds, $transaction, $environment);
    return $this->recv_selectRecords();
  }

  public function send_selectRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecords failed: unknown result");
  }

  public function selectRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordTime($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordTime();
  }

  public function send_selectRecordTime($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecordTime_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecordTime failed: unknown result");
  }

  public function selectRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordTimestr($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordTimestr();
  }

  public function send_selectRecordTimestr($record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecordTimestr_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectRecordTimestr failed: unknown result");
  }

  public function selectRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordsTime($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordsTime();
  }

  public function send_selectRecordsTime(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecordsTime failed: unknown result");
  }

  public function selectRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordsTimestr($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordsTimestr();
  }

  public function send_selectRecordsTimestr(array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectRecordsTimestr_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectRecordsTimestr failed: unknown result");
  }

  public function selectKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecord();
  }

  public function send_selectKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecord failed: unknown result");
  }

  public function selectKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordTime();
  }

  public function send_selectKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecordTime failed: unknown result");
  }

  public function selectKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordTimestr($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordTimestr();
  }

  public function send_selectKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecordTimestr_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyRecordTimestr failed: unknown result");
  }

  public function selectKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecord($keys, $record, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecord();
  }

  public function send_selectKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecord failed: unknown result");
  }

  public function selectKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordTime();
  }

  public function send_selectKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecordTime failed: unknown result");
  }

  public function selectKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordTimestr($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordTimestr();
  }

  public function send_selectKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecordTimestr_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysRecordTimestr failed: unknown result");
  }

  public function selectKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecords($keys, $records, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecords();
  }

  public function send_selectKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecords failed: unknown result");
  }

  public function selectKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecords($key, $records, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecords();
  }

  public function send_selectKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecords failed: unknown result");
  }

  public function selectKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordsTime();
  }

  public function send_selectKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecordsTime failed: unknown result");
  }

  public function selectKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordsTimestr($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordsTimestr();
  }

  public function send_selectKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyRecordsTimestr_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyRecordsTimestr failed: unknown result");
  }

  public function selectKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordsTime();
  }

  public function send_selectKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecordsTime failed: unknown result");
  }

  public function selectKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordsTimestr($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordsTimestr();
  }

  public function send_selectKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysRecordsTimestr_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysRecordsTimestr failed: unknown result");
  }

  public function selectCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_selectCriteria();
  }

  public function send_selectCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectCriteria failed: unknown result");
  }

  public function selectCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_selectCcl();
  }

  public function send_selectCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCcl failed: unknown result");
  }

  public function selectCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCriteriaTime($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCriteriaTime();
  }

  public function send_selectCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCriteriaTime_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectCriteriaTime failed: unknown result");
  }

  public function selectCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCriteriaTimestr($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCriteriaTimestr();
  }

  public function send_selectCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCriteriaTimestr_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCriteriaTimestr failed: unknown result");
  }

  public function selectCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCclTime($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCclTime();
  }

  public function send_selectCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCclTime_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCclTime failed: unknown result");
  }

  public function selectCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCclTimestr($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCclTimestr();
  }

  public function send_selectCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectCclTimestr_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCclTimestr failed: unknown result");
  }

  public function selectKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCriteria($key, $criteria, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteria();
  }

  public function send_selectKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCriteria_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyCriteria failed: unknown result");
  }

  public function selectKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCcl($key, $ccl, $creds, $transaction, $environment);
    return $this->recv_selectKeyCcl();
  }

  public function send_selectKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCcl_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCcl failed: unknown result");
  }

  public function selectKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCriteriaTime($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteriaTime();
  }

  public function send_selectKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCriteriaTime_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyCriteriaTime failed: unknown result");
  }

  public function selectKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCriteriaTimestr($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteriaTimestr();
  }

  public function send_selectKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCriteriaTimestr_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCriteriaTimestr failed: unknown result");
  }

  public function selectKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCclTime($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCclTime();
  }

  public function send_selectKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCclTime_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCclTime failed: unknown result");
  }

  public function selectKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCclTimestr($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCclTimestr();
  }

  public function send_selectKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeyCclTimestr_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeyCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeyCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCclTimestr failed: unknown result");
  }

  public function selectKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCriteria($keys, $criteria, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteria();
  }

  public function send_selectKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCriteria_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysCriteria failed: unknown result");
  }

  public function selectKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCcl($keys, $ccl, $creds, $transaction, $environment);
    return $this->recv_selectKeysCcl();
  }

  public function send_selectKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCcl_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCcl failed: unknown result");
  }

  public function selectKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCriteriaTime($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteriaTime();
  }

  public function send_selectKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCriteriaTime_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysCriteriaTime failed: unknown result");
  }

  public function selectKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCriteriaTimestr($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteriaTimestr();
  }

  public function send_selectKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCriteriaTimestr_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCriteriaTimestr failed: unknown result");
  }

  public function selectKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCclTime($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCclTime();
  }

  public function send_selectKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCclTime_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCclTime failed: unknown result");
  }

  public function selectKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCclTimestr($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCclTimestr();
  }

  public function send_selectKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_selectKeysCclTimestr_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_selectKeysCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_selectKeysCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCclTimestr failed: unknown result");
  }

  public function getKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_getKeyRecord();
  }

  public function send_getKeyRecord($key, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecord failed: unknown result");
  }

  public function getKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordTime();
  }

  public function send_getKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecordTime failed: unknown result");
  }

  public function getKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordTimestr($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordTimestr();
  }

  public function send_getKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecordTimestr_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyRecordTimestr failed: unknown result");
  }

  public function getKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecord($keys, $record, $creds, $transaction, $environment);
    return $this->recv_getKeysRecord();
  }

  public function send_getKeysRecord(array $keys, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecord failed: unknown result");
  }

  public function getKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordTime();
  }

  public function send_getKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecordTime failed: unknown result");
  }

  public function getKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordTimestr($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordTimestr();
  }

  public function send_getKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecordTimestr_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysRecordTimestr failed: unknown result");
  }

  public function getKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecords($keys, $records, $creds, $transaction, $environment);
    return $this->recv_getKeysRecords();
  }

  public function send_getKeysRecords(array $keys, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecords failed: unknown result");
  }

  public function getKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecords($key, $records, $creds, $transaction, $environment);
    return $this->recv_getKeyRecords();
  }

  public function send_getKeyRecords($key, array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecords failed: unknown result");
  }

  public function getKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordsTime();
  }

  public function send_getKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecordsTime failed: unknown result");
  }

  public function getKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordsTimestr($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordsTimestr();
  }

  public function send_getKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyRecordsTimestr_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyRecordsTimestr failed: unknown result");
  }

  public function getKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordsTime();
  }

  public function send_getKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecordsTime failed: unknown result");
  }

  public function getKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordsTimestr($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordsTimestr();
  }

  public function send_getKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysRecordsTimestr_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysRecordsTimestr failed: unknown result");
  }

  public function getKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCriteria($key, $criteria, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteria();
  }

  public function send_getKeyCriteria($key, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCriteria_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyCriteria failed: unknown result");
  }

  public function getCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_getCriteria();
  }

  public function send_getCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getCriteria failed: unknown result");
  }

  public function getCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_getCcl();
  }

  public function send_getCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCcl failed: unknown result");
  }

  public function getCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCriteriaTime($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCriteriaTime();
  }

  public function send_getCriteriaTime(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCriteriaTime_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getCriteriaTime failed: unknown result");
  }

  public function getCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCriteriaTimestr($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCriteriaTimestr();
  }

  public function send_getCriteriaTimestr(\concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCriteriaTimestr_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCriteriaTimestr failed: unknown result");
  }

  public function getCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCclTime($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCclTime();
  }

  public function send_getCclTime($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCclTime_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCclTime failed: unknown result");
  }

  public function getCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCclTimestr($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCclTimestr();
  }

  public function send_getCclTimestr($ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getCclTimestr_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCclTimestr failed: unknown result");
  }

  public function getKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCcl($key, $ccl, $creds, $transaction, $environment);
    return $this->recv_getKeyCcl();
  }

  public function send_getKeyCcl($key, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCcl_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCcl failed: unknown result");
  }

  public function getKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCriteriaTime($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteriaTime();
  }

  public function send_getKeyCriteriaTime($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCriteriaTime_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyCriteriaTime failed: unknown result");
  }

  public function getKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCriteriaTimestr($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteriaTimestr();
  }

  public function send_getKeyCriteriaTimestr($key, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCriteriaTimestr_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCriteriaTimestr failed: unknown result");
  }

  public function getKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCclTime($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCclTime();
  }

  public function send_getKeyCclTime($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCclTime_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCclTime failed: unknown result");
  }

  public function getKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCclTimestr($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCclTimestr();
  }

  public function send_getKeyCclTimestr($key, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeyCclTimestr_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeyCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeyCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCclTimestr failed: unknown result");
  }

  public function getKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCriteria($keys, $criteria, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteria();
  }

  public function send_getKeysCriteria(array $keys, \concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCriteria_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysCriteria failed: unknown result");
  }

  public function getKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCcl($keys, $ccl, $creds, $transaction, $environment);
    return $this->recv_getKeysCcl();
  }

  public function send_getKeysCcl(array $keys, $ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCcl_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCcl failed: unknown result");
  }

  public function getKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCriteriaTime($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteriaTime();
  }

  public function send_getKeysCriteriaTime(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCriteriaTime_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysCriteriaTime failed: unknown result");
  }

  public function getKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCriteriaTimestr($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteriaTimestr();
  }

  public function send_getKeysCriteriaTimestr(array $keys, \concourse\thrift\data\TCriteria $criteria, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCriteriaTimestr_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCriteriaTimestr failed: unknown result");
  }

  public function getKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCclTime($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCclTime();
  }

  public function send_getKeysCclTime(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCclTime_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCclTime failed: unknown result");
  }

  public function getKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCclTimestr($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCclTimestr();
  }

  public function send_getKeysCclTimestr(array $keys, $ccl, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getKeysCclTimestr_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getKeysCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getKeysCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCclTimestr failed: unknown result");
  }

  public function verifyKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecord();
  }

  public function send_verifyKeyValueRecord($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_verifyKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_verifyKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_verifyKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyKeyValueRecord failed: unknown result");
  }

  public function verifyKeyValueRecordTime($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyKeyValueRecordTime($key, $value, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecordTime();
  }

  public function send_verifyKeyValueRecordTime($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_verifyKeyValueRecordTime_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_verifyKeyValueRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_verifyKeyValueRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyKeyValueRecordTime failed: unknown result");
  }

  public function verifyKeyValueRecordTimestr($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyKeyValueRecordTimestr($key, $value, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecordTimestr();
  }

  public function send_verifyKeyValueRecordTimestr($key, \concourse\thrift\data\TObject $value, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_verifyKeyValueRecordTimestr_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_verifyKeyValueRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_verifyKeyValueRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("verifyKeyValueRecordTimestr failed: unknown result");
  }

  public function jsonifyRecords(array $records, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_jsonifyRecords($records, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecords();
  }

  public function send_jsonifyRecords(array $records, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_jsonifyRecords_args();
    $args->records = $records;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_jsonifyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_jsonifyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("jsonifyRecords failed: unknown result");
  }

  public function jsonifyRecordsTime(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_jsonifyRecordsTime($records, $timestamp, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecordsTime();
  }

  public function send_jsonifyRecordsTime(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_jsonifyRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_jsonifyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_jsonifyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("jsonifyRecordsTime failed: unknown result");
  }

  public function jsonifyRecordsTimestr(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_jsonifyRecordsTimestr($records, $timestamp, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecordsTimestr();
  }

  public function send_jsonifyRecordsTimestr(array $records, $timestamp, $identifier, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_jsonifyRecordsTimestr_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_jsonifyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_jsonifyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("jsonifyRecordsTimestr failed: unknown result");
  }

  public function findCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_findCriteria();
  }

  public function send_findCriteria(\concourse\thrift\data\TCriteria $criteria, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findCriteria failed: unknown result");
  }

  public function findCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_findCcl();
  }

  public function send_findCcl($ccl, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findCcl failed: unknown result");
  }

  public function findKeyOperatorValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorValues($key, $operator, $values, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValues();
  }

  public function send_findKeyOperatorValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorValues_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorValues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorValues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findKeyOperatorValues failed: unknown result");
  }

  public function findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorValuesTime($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValuesTime();
  }

  public function send_findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorValuesTime_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValuesTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValuesTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValuesTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorValuesTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorValuesTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findKeyOperatorValuesTime failed: unknown result");
  }

  public function findKeyOperatorValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorValuesTimestr($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValuesTimestr();
  }

  public function send_findKeyOperatorValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorValuesTimestr_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValuesTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValuesTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValuesTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorValuesTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorValuesTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorValuesTimestr failed: unknown result");
  }

  public function findKeyOperatorstrValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorstrValues($key, $operator, $values, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorstrValues();
  }

  public function send_findKeyOperatorstrValues($key, $operator, array $values, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorstrValues_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorstrValues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorstrValues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorstrValues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorstrValues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorstrValues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorstrValues failed: unknown result");
  }

  public function findKeyOperatorstrValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorstrValuesTime($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorstrValuesTime();
  }

  public function send_findKeyOperatorstrValuesTime($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorstrValuesTime_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorstrValuesTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorstrValuesTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorstrValuesTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorstrValuesTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorstrValuesTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorstrValuesTime failed: unknown result");
  }

  public function findKeyOperatorstrValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorstrValuesTimestr($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorstrValuesTimestr();
  }

  public function send_findKeyOperatorstrValuesTimestr($key, $operator, array $values, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findKeyOperatorstrValuesTimestr_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorstrValuesTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorstrValuesTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorstrValuesTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findKeyOperatorstrValuesTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findKeyOperatorstrValuesTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorstrValuesTimestr failed: unknown result");
  }

  public function search($key, $query, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_search($key, $query, $creds, $transaction, $environment);
    return $this->recv_search();
  }

  public function send_search($key, $query, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_search_args();
    $args->key = $key;
    $args->query = $query;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'search', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('search', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_search()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_search_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_search_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("search failed: unknown result");
  }

  public function revertKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordsTime();
  }

  public function send_revertKeysRecordsTime(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordsTimestr($keys, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordsTimestr();
  }

  public function send_revertKeysRecordsTimestr(array $keys, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeysRecordsTimestr_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeysRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeysRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function revertKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordTime();
  }

  public function send_revertKeysRecordTime(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordTimestr($keys, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordTimestr();
  }

  public function send_revertKeysRecordTimestr(array $keys, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeysRecordTimestr_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeysRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeysRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function revertKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordsTime();
  }

  public function send_revertKeyRecordsTime($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordsTimestr($key, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordsTimestr();
  }

  public function send_revertKeyRecordsTimestr($key, array $records, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeyRecordsTimestr_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function revertKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordTime();
  }

  public function send_revertKeyRecordTime($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordTimestr($key, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordTimestr();
  }

  public function send_revertKeyRecordTimestr($key, $record, $timestamp, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_revertKeyRecordTimestr_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_revertKeyRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_revertKeyRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function pingRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_pingRecords($records, $creds, $transaction, $environment);
    return $this->recv_pingRecords();
  }

  public function send_pingRecords(array $records, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_pingRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pingRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pingRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pingRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_pingRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_pingRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("pingRecords failed: unknown result");
  }

  public function pingRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_pingRecord($record, $creds, $transaction, $environment);
    return $this->recv_pingRecord();
  }

  public function send_pingRecord($record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_pingRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pingRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pingRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pingRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_pingRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_pingRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("pingRecord failed: unknown result");
  }

  public function verifyAndSwap($key, \concourse\thrift\data\TObject $expected, $record, \concourse\thrift\data\TObject $replacement, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyAndSwap($key, $expected, $record, $replacement, $creds, $transaction, $environment);
    return $this->recv_verifyAndSwap();
  }

  public function send_verifyAndSwap($key, \concourse\thrift\data\TObject $expected, $record, \concourse\thrift\data\TObject $replacement, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_verifyAndSwap_args();
    $args->key = $key;
    $args->expected = $expected;
    $args->record = $record;
    $args->replacement = $replacement;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyAndSwap', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyAndSwap', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyAndSwap()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_verifyAndSwap_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_verifyAndSwap_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyAndSwap failed: unknown result");
  }

  public function verifyOrSet($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyOrSet($key, $value, $record, $creds, $transaction, $environment);
    $this->recv_verifyOrSet();
  }

  public function send_verifyOrSet($key, \concourse\thrift\data\TObject $value, $record, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_verifyOrSet_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyOrSet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyOrSet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyOrSet()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_verifyOrSet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_verifyOrSet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function findOrAddKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findOrAddKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_findOrAddKeyValue();
  }

  public function send_findOrAddKeyValue($key, \concourse\thrift\data\TObject $value, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findOrAddKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findOrAddKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findOrAddKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findOrAddKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findOrAddKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findOrAddKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("findOrAddKeyValue failed: unknown result");
  }

  public function findOrInsertCriteriaJson(\concourse\thrift\data\TCriteria $criteria, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findOrInsertCriteriaJson($criteria, $json, $creds, $transaction, $environment);
    return $this->recv_findOrInsertCriteriaJson();
  }

  public function send_findOrInsertCriteriaJson(\concourse\thrift\data\TCriteria $criteria, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findOrInsertCriteriaJson_args();
    $args->criteria = $criteria;
    $args->json = $json;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findOrInsertCriteriaJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findOrInsertCriteriaJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findOrInsertCriteriaJson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findOrInsertCriteriaJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findOrInsertCriteriaJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findOrInsertCriteriaJson failed: unknown result");
  }

  public function findOrInsertCclJson($ccl, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findOrInsertCclJson($ccl, $json, $creds, $transaction, $environment);
    return $this->recv_findOrInsertCclJson();
  }

  public function send_findOrInsertCclJson($ccl, $json, \concourse\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_findOrInsertCclJson_args();
    $args->ccl = $ccl;
    $args->json = $json;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findOrInsertCclJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findOrInsertCclJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findOrInsertCclJson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_findOrInsertCclJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_findOrInsertCclJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("findOrInsertCclJson failed: unknown result");
  }

  public function getServerEnvironment(\concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $this->send_getServerEnvironment($creds, $token, $environment);
    return $this->recv_getServerEnvironment();
  }

  public function send_getServerEnvironment(\concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_getServerEnvironment_args();
    $args->creds = $creds;
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServerEnvironment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServerEnvironment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServerEnvironment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getServerEnvironment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getServerEnvironment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getServerEnvironment failed: unknown result");
  }

  public function getServerVersion()
  {
    $this->send_getServerVersion();
    return $this->recv_getServerVersion();
  }

  public function send_getServerVersion()
  {
    $args = new \concourse\thrift\ConcourseService_getServerVersion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServerVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServerVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServerVersion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_getServerVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_getServerVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getServerVersion failed: unknown result");
  }

  public function time(\concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $this->send_time($creds, $token, $environment);
    return $this->recv_time();
  }

  public function send_time(\concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_time_args();
    $args->creds = $creds;
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'time', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('time', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_time()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_time_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_time_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("time failed: unknown result");
  }

  public function timePhrase($phrase, \concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $this->send_timePhrase($phrase, $creds, $token, $environment);
    return $this->recv_timePhrase();
  }

  public function send_timePhrase($phrase, \concourse\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $args = new \concourse\thrift\ConcourseService_timePhrase_args();
    $args->phrase = $phrase;
    $args->creds = $creds;
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timePhrase', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timePhrase', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timePhrase()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\concourse\thrift\ConcourseService_timePhrase_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \concourse\thrift\ConcourseService_timePhrase_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("timePhrase failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ConcourseService_abort_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_abort_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_abort_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_abort_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_abort_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_abort_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->records []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter6)
          {
            $xfer += $output->writeI64($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = 0;
              $val13 = false;
              $xfer += $input->readI64($key12);
              $xfer += $input->readBool($val13);
              $this->success[(!is_string($key12) && !is_integer($key12)) ? serialize($key12) : $key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter14 => $viter15)
          {
            $xfer += $output->writeI64($kiter14);
            $xfer += $output->writeBool($viter15);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size16 = 0;
            $_ktype17 = 0;
            $_vtype18 = 0;
            $xfer += $input->readMapBegin($_ktype17, $_vtype18, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $key21 = 0;
              $val22 = '';
              $xfer += $input->readI64($key21);
              $xfer += $input->readString($val22);
              $this->success[(!is_string($key21) && !is_integer($key21)) ? serialize($key21) : $key21] = $val22;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter23 => $viter24)
          {
            $xfer += $output->writeI64($kiter23);
            $xfer += $output->writeString($viter24);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStart_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStart_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size25 = 0;
            $_ktype26 = 0;
            $_vtype27 = 0;
            $xfer += $input->readMapBegin($_ktype26, $_vtype27, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $key30 = 0;
              $val31 = '';
              $xfer += $input->readI64($key30);
              $xfer += $input->readString($val31);
              $this->success[(!is_string($key30) && !is_integer($key30)) ? serialize($key30) : $key30] = $val31;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter32 => $viter33)
          {
            $xfer += $output->writeI64($kiter32);
            $xfer += $output->writeString($viter33);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size34 = 0;
            $_ktype35 = 0;
            $_vtype36 = 0;
            $xfer += $input->readMapBegin($_ktype35, $_vtype36, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $key39 = 0;
              $val40 = '';
              $xfer += $input->readI64($key39);
              $xfer += $input->readString($val40);
              $this->success[(!is_string($key39) && !is_integer($key39)) ? serialize($key39) : $key39] = $val40;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter41 => $viter42)
          {
            $xfer += $output->writeI64($kiter41);
            $xfer += $output->writeString($viter42);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartEnd_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 3);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size43 = 0;
            $_ktype44 = 0;
            $_vtype45 = 0;
            $xfer += $input->readMapBegin($_ktype44, $_vtype45, $_size43);
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $key48 = 0;
              $val49 = '';
              $xfer += $input->readI64($key48);
              $xfer += $input->readString($val49);
              $this->success[(!is_string($key48) && !is_integer($key48)) ? serialize($key48) : $key48] = $val49;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter50 => $viter51)
          {
            $xfer += $output->writeI64($kiter50);
            $xfer += $output->writeString($viter51);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstrEndstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 3);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size52 = 0;
            $_ktype53 = 0;
            $_vtype54 = 0;
            $xfer += $input->readMapBegin($_ktype53, $_vtype54, $_size52);
            for ($_i56 = 0; $_i56 < $_size52; ++$_i56)
            {
              $key57 = 0;
              $val58 = '';
              $xfer += $input->readI64($key57);
              $xfer += $input->readString($val58);
              $this->success[(!is_string($key57) && !is_integer($key57)) ? serialize($key57) : $key57] = $val58;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter59 => $viter60)
          {
            $xfer += $output->writeI64($kiter59);
            $xfer += $output->writeString($viter60);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size61 = 0;
            $_ktype62 = 0;
            $_vtype63 = 0;
            $xfer += $input->readMapBegin($_ktype62, $_vtype63, $_size61);
            for ($_i65 = 0; $_i65 < $_size61; ++$_i65)
            {
              $key66 = 0;
              $val67 = '';
              $xfer += $input->readI64($key66);
              $xfer += $input->readString($val67);
              $this->success[(!is_string($key66) && !is_integer($key66)) ? serialize($key66) : $key66] = $val67;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter68 => $viter69)
          {
            $xfer += $output->writeI64($kiter68);
            $xfer += $output->writeString($viter69);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size70 = 0;
            $_ktype71 = 0;
            $_vtype72 = 0;
            $xfer += $input->readMapBegin($_ktype71, $_vtype72, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $key75 = 0;
              $val76 = '';
              $xfer += $input->readI64($key75);
              $xfer += $input->readString($val76);
              $this->success[(!is_string($key75) && !is_integer($key75)) ? serialize($key75) : $key75] = $val76;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter77 => $viter78)
          {
            $xfer += $output->writeI64($kiter77);
            $xfer += $output->writeString($viter78);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size79 = 0;
            $_ktype80 = 0;
            $_vtype81 = 0;
            $xfer += $input->readMapBegin($_ktype80, $_vtype81, $_size79);
            for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
            {
              $key84 = 0;
              $val85 = '';
              $xfer += $input->readI64($key84);
              $xfer += $input->readString($val85);
              $this->success[(!is_string($key84) && !is_integer($key84)) ? serialize($key84) : $key84] = $val85;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter86 => $viter87)
          {
            $xfer += $output->writeI64($kiter86);
            $xfer += $output->writeString($viter87);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size88 = 0;
            $_ktype89 = 0;
            $_vtype90 = 0;
            $xfer += $input->readMapBegin($_ktype89, $_vtype90, $_size88);
            for ($_i92 = 0; $_i92 < $_size88; ++$_i92)
            {
              $key93 = 0;
              $val94 = '';
              $xfer += $input->readI64($key93);
              $xfer += $input->readString($val94);
              $this->success[(!is_string($key93) && !is_integer($key93)) ? serialize($key93) : $key93] = $val94;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter95 => $viter96)
          {
            $xfer += $output->writeI64($kiter95);
            $xfer += $output->writeString($viter96);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 4);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size97 = 0;
            $_ktype98 = 0;
            $_vtype99 = 0;
            $xfer += $input->readMapBegin($_ktype98, $_vtype99, $_size97);
            for ($_i101 = 0; $_i101 < $_size97; ++$_i101)
            {
              $key102 = 0;
              $val103 = '';
              $xfer += $input->readI64($key102);
              $xfer += $input->readString($val103);
              $this->success[(!is_string($key102) && !is_integer($key102)) ? serialize($key102) : $key102] = $val103;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter104 => $viter105)
          {
            $xfer += $output->writeI64($kiter104);
            $xfer += $output->writeString($viter105);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKey_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKey_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKey_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKey_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKey_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size106 = 0;
            $_ktype107 = 0;
            $_vtype108 = 0;
            $xfer += $input->readMapBegin($_ktype107, $_vtype108, $_size106);
            for ($_i110 = 0; $_i110 < $_size106; ++$_i110)
            {
              $key111 = new \concourse\thrift\data\TObject();
              $val112 = array();
              $key111 = new \concourse\thrift\data\TObject();
              $xfer += $key111->read($input);
              $val112 = array();
              $_size113 = 0;
              $_etype116 = 0;
              $xfer += $input->readSetBegin($_etype116, $_size113);
              for ($_i117 = 0; $_i117 < $_size113; ++$_i117)
              {
                $elem118 = null;
                $xfer += $input->readI64($elem118);
                if (is_scalar($elem118)) {
                  $val112 []= $elem118;
                } else {
                  $val112 []= $elem118;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key111) && !is_integer($key111)) ? serialize($key111) : $key111] = $val112;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKey_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter119 => $viter120)
          {
            $xfer += $kiter119->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter120));
              {
                foreach ($viter120 as $iter121 => $iter122)
                {
                  if (is_scalar($iter122)) {
                  $xfer += $output->writeI64($iter121);
                  } else {
                  $xfer += $output->writeI64($iter122);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeys_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeys_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size123 = 0;
            $_etype126 = 0;
            $xfer += $input->readListBegin($_etype126, $_size123);
            for ($_i127 = 0; $_i127 < $_size123; ++$_i127)
            {
              $elem128 = null;
              $xfer += $input->readString($elem128);
              $this->keys []= $elem128;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeys_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter129)
          {
            $xfer += $output->writeString($iter129);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeys_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeys_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size130 = 0;
            $_ktype131 = 0;
            $_vtype132 = 0;
            $xfer += $input->readMapBegin($_ktype131, $_vtype132, $_size130);
            for ($_i134 = 0; $_i134 < $_size130; ++$_i134)
            {
              $key135 = '';
              $val136 = array();
              $xfer += $input->readString($key135);
              $val136 = array();
              $_size137 = 0;
              $_ktype138 = 0;
              $_vtype139 = 0;
              $xfer += $input->readMapBegin($_ktype138, $_vtype139, $_size137);
              for ($_i141 = 0; $_i141 < $_size137; ++$_i141)
              {
                $key142 = new \concourse\thrift\data\TObject();
                $val143 = array();
                $key142 = new \concourse\thrift\data\TObject();
                $xfer += $key142->read($input);
                $val143 = array();
                $_size144 = 0;
                $_etype147 = 0;
                $xfer += $input->readSetBegin($_etype147, $_size144);
                for ($_i148 = 0; $_i148 < $_size144; ++$_i148)
                {
                  $elem149 = null;
                  $xfer += $input->readI64($elem149);
                  if (is_scalar($elem149)) {
                    $val143 []= $elem149;
                  } else {
                    $val143 []= $elem149;
                  }
                }
                $xfer += $input->readSetEnd();
                $val136[(!is_string($key142) && !is_integer($key142)) ? serialize($key142) : $key142] = $val143;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key135) && !is_integer($key135)) ? serialize($key135) : $key135] = $val136;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeys_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter150 => $viter151)
          {
            $xfer += $output->writeString($kiter150);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter151));
              {
                foreach ($viter151 as $kiter152 => $viter153)
                {
                  $xfer += $kiter152->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter153));
                    {
                      foreach ($viter153 as $iter154 => $iter155)
                      {
                        if (is_scalar($iter155)) {
                        $xfer += $output->writeI64($iter154);
                        } else {
                        $xfer += $output->writeI64($iter155);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size156 = 0;
            $_ktype157 = 0;
            $_vtype158 = 0;
            $xfer += $input->readMapBegin($_ktype157, $_vtype158, $_size156);
            for ($_i160 = 0; $_i160 < $_size156; ++$_i160)
            {
              $key161 = new \concourse\thrift\data\TObject();
              $val162 = array();
              $key161 = new \concourse\thrift\data\TObject();
              $xfer += $key161->read($input);
              $val162 = array();
              $_size163 = 0;
              $_etype166 = 0;
              $xfer += $input->readSetBegin($_etype166, $_size163);
              for ($_i167 = 0; $_i167 < $_size163; ++$_i167)
              {
                $elem168 = null;
                $xfer += $input->readI64($elem168);
                if (is_scalar($elem168)) {
                  $val162 []= $elem168;
                } else {
                  $val162 []= $elem168;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key161) && !is_integer($key161)) ? serialize($key161) : $key161] = $val162;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter169 => $viter170)
          {
            $xfer += $kiter169->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter170));
              {
                foreach ($viter170 as $iter171 => $iter172)
                {
                  if (is_scalar($iter172)) {
                  $xfer += $output->writeI64($iter171);
                  } else {
                  $xfer += $output->writeI64($iter172);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size173 = 0;
            $_ktype174 = 0;
            $_vtype175 = 0;
            $xfer += $input->readMapBegin($_ktype174, $_vtype175, $_size173);
            for ($_i177 = 0; $_i177 < $_size173; ++$_i177)
            {
              $key178 = new \concourse\thrift\data\TObject();
              $val179 = array();
              $key178 = new \concourse\thrift\data\TObject();
              $xfer += $key178->read($input);
              $val179 = array();
              $_size180 = 0;
              $_etype183 = 0;
              $xfer += $input->readSetBegin($_etype183, $_size180);
              for ($_i184 = 0; $_i184 < $_size180; ++$_i184)
              {
                $elem185 = null;
                $xfer += $input->readI64($elem185);
                if (is_scalar($elem185)) {
                  $val179 []= $elem185;
                } else {
                  $val179 []= $elem185;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key178) && !is_integer($key178)) ? serialize($key178) : $key178] = $val179;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter186 => $viter187)
          {
            $xfer += $kiter186->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter187));
              {
                foreach ($viter187 as $iter188 => $iter189)
                {
                  if (is_scalar($iter189)) {
                  $xfer += $output->writeI64($iter188);
                  } else {
                  $xfer += $output->writeI64($iter189);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size190 = 0;
            $_etype193 = 0;
            $xfer += $input->readListBegin($_etype193, $_size190);
            for ($_i194 = 0; $_i194 < $_size190; ++$_i194)
            {
              $elem195 = null;
              $xfer += $input->readString($elem195);
              $this->keys []= $elem195;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter196)
          {
            $xfer += $output->writeString($iter196);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size197 = 0;
            $_ktype198 = 0;
            $_vtype199 = 0;
            $xfer += $input->readMapBegin($_ktype198, $_vtype199, $_size197);
            for ($_i201 = 0; $_i201 < $_size197; ++$_i201)
            {
              $key202 = '';
              $val203 = array();
              $xfer += $input->readString($key202);
              $val203 = array();
              $_size204 = 0;
              $_ktype205 = 0;
              $_vtype206 = 0;
              $xfer += $input->readMapBegin($_ktype205, $_vtype206, $_size204);
              for ($_i208 = 0; $_i208 < $_size204; ++$_i208)
              {
                $key209 = new \concourse\thrift\data\TObject();
                $val210 = array();
                $key209 = new \concourse\thrift\data\TObject();
                $xfer += $key209->read($input);
                $val210 = array();
                $_size211 = 0;
                $_etype214 = 0;
                $xfer += $input->readSetBegin($_etype214, $_size211);
                for ($_i215 = 0; $_i215 < $_size211; ++$_i215)
                {
                  $elem216 = null;
                  $xfer += $input->readI64($elem216);
                  if (is_scalar($elem216)) {
                    $val210 []= $elem216;
                  } else {
                    $val210 []= $elem216;
                  }
                }
                $xfer += $input->readSetEnd();
                $val203[(!is_string($key209) && !is_integer($key209)) ? serialize($key209) : $key209] = $val210;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key202) && !is_integer($key202)) ? serialize($key202) : $key202] = $val203;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter217 => $viter218)
          {
            $xfer += $output->writeString($kiter217);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter218));
              {
                foreach ($viter218 as $kiter219 => $viter220)
                {
                  $xfer += $kiter219->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter220));
                    {
                      foreach ($viter220 as $iter221 => $iter222)
                      {
                        if (is_scalar($iter222)) {
                        $xfer += $output->writeI64($iter221);
                        } else {
                        $xfer += $output->writeI64($iter222);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size223 = 0;
            $_etype226 = 0;
            $xfer += $input->readListBegin($_etype226, $_size223);
            for ($_i227 = 0; $_i227 < $_size223; ++$_i227)
            {
              $elem228 = null;
              $xfer += $input->readString($elem228);
              $this->keys []= $elem228;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter229)
          {
            $xfer += $output->writeString($iter229);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size230 = 0;
            $_ktype231 = 0;
            $_vtype232 = 0;
            $xfer += $input->readMapBegin($_ktype231, $_vtype232, $_size230);
            for ($_i234 = 0; $_i234 < $_size230; ++$_i234)
            {
              $key235 = '';
              $val236 = array();
              $xfer += $input->readString($key235);
              $val236 = array();
              $_size237 = 0;
              $_ktype238 = 0;
              $_vtype239 = 0;
              $xfer += $input->readMapBegin($_ktype238, $_vtype239, $_size237);
              for ($_i241 = 0; $_i241 < $_size237; ++$_i241)
              {
                $key242 = new \concourse\thrift\data\TObject();
                $val243 = array();
                $key242 = new \concourse\thrift\data\TObject();
                $xfer += $key242->read($input);
                $val243 = array();
                $_size244 = 0;
                $_etype247 = 0;
                $xfer += $input->readSetBegin($_etype247, $_size244);
                for ($_i248 = 0; $_i248 < $_size244; ++$_i248)
                {
                  $elem249 = null;
                  $xfer += $input->readI64($elem249);
                  if (is_scalar($elem249)) {
                    $val243 []= $elem249;
                  } else {
                    $val243 []= $elem249;
                  }
                }
                $xfer += $input->readSetEnd();
                $val236[(!is_string($key242) && !is_integer($key242)) ? serialize($key242) : $key242] = $val243;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key235) && !is_integer($key235)) ? serialize($key235) : $key235] = $val236;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter250 => $viter251)
          {
            $xfer += $output->writeString($kiter250);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter251));
              {
                foreach ($viter251 as $kiter252 => $viter253)
                {
                  $xfer += $kiter252->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter253));
                    {
                      foreach ($viter253 as $iter254 => $iter255)
                      {
                        if (is_scalar($iter255)) {
                        $xfer += $output->writeI64($iter254);
                        } else {
                        $xfer += $output->writeI64($iter255);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size256 = 0;
            $_ktype257 = 0;
            $_vtype258 = 0;
            $xfer += $input->readMapBegin($_ktype257, $_vtype258, $_size256);
            for ($_i260 = 0; $_i260 < $_size256; ++$_i260)
            {
              $key261 = 0;
              $val262 = array();
              $xfer += $input->readI64($key261);
              $val262 = array();
              $_size263 = 0;
              $_etype266 = 0;
              $xfer += $input->readSetBegin($_etype266, $_size263);
              for ($_i267 = 0; $_i267 < $_size263; ++$_i267)
              {
                $elem268 = null;
                $elem268 = new \concourse\thrift\data\TObject();
                $xfer += $elem268->read($input);
                if (is_scalar($elem268)) {
                  $val262 []= $elem268;
                } else {
                  $val262 []= $elem268;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key261) && !is_integer($key261)) ? serialize($key261) : $key261] = $val262;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter269 => $viter270)
          {
            $xfer += $output->writeI64($kiter269);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter270));
              {
                foreach ($viter270 as $iter271 => $iter272)
                {
                  if (is_scalar($iter272)) {
                  $xfer += $iter271->write($output);
                  } else {
                  $xfer += $iter272->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size273 = 0;
            $_ktype274 = 0;
            $_vtype275 = 0;
            $xfer += $input->readMapBegin($_ktype274, $_vtype275, $_size273);
            for ($_i277 = 0; $_i277 < $_size273; ++$_i277)
            {
              $key278 = 0;
              $val279 = array();
              $xfer += $input->readI64($key278);
              $val279 = array();
              $_size280 = 0;
              $_etype283 = 0;
              $xfer += $input->readSetBegin($_etype283, $_size280);
              for ($_i284 = 0; $_i284 < $_size280; ++$_i284)
              {
                $elem285 = null;
                $elem285 = new \concourse\thrift\data\TObject();
                $xfer += $elem285->read($input);
                if (is_scalar($elem285)) {
                  $val279 []= $elem285;
                } else {
                  $val279 []= $elem285;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key278) && !is_integer($key278)) ? serialize($key278) : $key278] = $val279;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter286 => $viter287)
          {
            $xfer += $output->writeI64($kiter286);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter287));
              {
                foreach ($viter287 as $iter288 => $iter289)
                {
                  if (is_scalar($iter289)) {
                  $xfer += $iter288->write($output);
                  } else {
                  $xfer += $iter289->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size290 = 0;
            $_ktype291 = 0;
            $_vtype292 = 0;
            $xfer += $input->readMapBegin($_ktype291, $_vtype292, $_size290);
            for ($_i294 = 0; $_i294 < $_size290; ++$_i294)
            {
              $key295 = 0;
              $val296 = array();
              $xfer += $input->readI64($key295);
              $val296 = array();
              $_size297 = 0;
              $_etype300 = 0;
              $xfer += $input->readSetBegin($_etype300, $_size297);
              for ($_i301 = 0; $_i301 < $_size297; ++$_i301)
              {
                $elem302 = null;
                $elem302 = new \concourse\thrift\data\TObject();
                $xfer += $elem302->read($input);
                if (is_scalar($elem302)) {
                  $val296 []= $elem302;
                } else {
                  $val296 []= $elem302;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key295) && !is_integer($key295)) ? serialize($key295) : $key295] = $val296;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter303 => $viter304)
          {
            $xfer += $output->writeI64($kiter303);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter304));
              {
                foreach ($viter304 as $iter305 => $iter306)
                {
                  if (is_scalar($iter306)) {
                  $xfer += $iter305->write($output);
                  } else {
                  $xfer += $iter306->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size307 = 0;
            $_ktype308 = 0;
            $_vtype309 = 0;
            $xfer += $input->readMapBegin($_ktype308, $_vtype309, $_size307);
            for ($_i311 = 0; $_i311 < $_size307; ++$_i311)
            {
              $key312 = 0;
              $val313 = array();
              $xfer += $input->readI64($key312);
              $val313 = array();
              $_size314 = 0;
              $_etype317 = 0;
              $xfer += $input->readSetBegin($_etype317, $_size314);
              for ($_i318 = 0; $_i318 < $_size314; ++$_i318)
              {
                $elem319 = null;
                $elem319 = new \concourse\thrift\data\TObject();
                $xfer += $elem319->read($input);
                if (is_scalar($elem319)) {
                  $val313 []= $elem319;
                } else {
                  $val313 []= $elem319;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key312) && !is_integer($key312)) ? serialize($key312) : $key312] = $val313;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter320 => $viter321)
          {
            $xfer += $output->writeI64($kiter320);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter321));
              {
                foreach ($viter321 as $iter322 => $iter323)
                {
                  if (is_scalar($iter323)) {
                  $xfer += $iter322->write($output);
                  } else {
                  $xfer += $iter323->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 4);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size324 = 0;
            $_ktype325 = 0;
            $_vtype326 = 0;
            $xfer += $input->readMapBegin($_ktype325, $_vtype326, $_size324);
            for ($_i328 = 0; $_i328 < $_size324; ++$_i328)
            {
              $key329 = 0;
              $val330 = array();
              $xfer += $input->readI64($key329);
              $val330 = array();
              $_size331 = 0;
              $_etype334 = 0;
              $xfer += $input->readSetBegin($_etype334, $_size331);
              for ($_i335 = 0; $_i335 < $_size331; ++$_i335)
              {
                $elem336 = null;
                $elem336 = new \concourse\thrift\data\TObject();
                $xfer += $elem336->read($input);
                if (is_scalar($elem336)) {
                  $val330 []= $elem336;
                } else {
                  $val330 []= $elem336;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key329) && !is_integer($key329)) ? serialize($key329) : $key329] = $val330;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter337 => $viter338)
          {
            $xfer += $output->writeI64($kiter337);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter338));
              {
                foreach ($viter338 as $iter339 => $iter340)
                {
                  if (is_scalar($iter340)) {
                  $xfer += $iter339->write($output);
                  } else {
                  $xfer += $iter340->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size341 = 0;
            $_etype344 = 0;
            $xfer += $input->readListBegin($_etype344, $_size341);
            for ($_i345 = 0; $_i345 < $_size341; ++$_i345)
            {
              $elem346 = null;
              $xfer += $input->readI64($elem346);
              $this->records []= $elem346;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter347)
          {
            $xfer += $output->writeI64($iter347);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecords_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size348 = 0;
            $_etype351 = 0;
            $xfer += $input->readListBegin($_etype351, $_size348);
            for ($_i352 = 0; $_i352 < $_size348; ++$_i352)
            {
              $elem353 = null;
              $xfer += $input->readString($elem353);
              $this->keys []= $elem353;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter354)
          {
            $xfer += $output->writeString($iter354);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size355 = 0;
            $_etype358 = 0;
            $xfer += $input->readListBegin($_etype358, $_size355);
            for ($_i359 = 0; $_i359 < $_size355; ++$_i359)
            {
              $elem360 = null;
              $xfer += $input->readI64($elem360);
              $this->records []= $elem360;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter361)
          {
            $xfer += $output->writeI64($iter361);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecords_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size362 = 0;
            $_etype365 = 0;
            $xfer += $input->readListBegin($_etype365, $_size362);
            for ($_i366 = 0; $_i366 < $_size362; ++$_i366)
            {
              $elem367 = null;
              $xfer += $input->readString($elem367);
              $this->keys []= $elem367;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size368 = 0;
            $_etype371 = 0;
            $xfer += $input->readListBegin($_etype371, $_size368);
            for ($_i372 = 0; $_i372 < $_size368; ++$_i372)
            {
              $elem373 = null;
              $xfer += $input->readI64($elem373);
              $this->records []= $elem373;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter374)
          {
            $xfer += $output->writeString($iter374);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter375)
          {
            $xfer += $output->writeI64($iter375);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecords_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_commit_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_commit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_commit_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_commit_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_commit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_commit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecord_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size376 = 0;
            $_etype379 = 0;
            $xfer += $input->readSetBegin($_etype379, $_size376);
            for ($_i380 = 0; $_i380 < $_size376; ++$_i380)
            {
              $elem381 = null;
              $xfer += $input->readString($elem381);
              if (is_scalar($elem381)) {
                $this->success []= $elem381;
              } else {
                $this->success []= $elem381;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter382 => $iter383)
          {
            if (is_scalar($iter383)) {
            $xfer += $output->writeString($iter382);
            } else {
            $xfer += $output->writeString($iter383);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTime_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTime_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTime_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size384 = 0;
            $_etype387 = 0;
            $xfer += $input->readSetBegin($_etype387, $_size384);
            for ($_i388 = 0; $_i388 < $_size384; ++$_i388)
            {
              $elem389 = null;
              $xfer += $input->readString($elem389);
              if (is_scalar($elem389)) {
                $this->success []= $elem389;
              } else {
                $this->success []= $elem389;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter390 => $iter391)
          {
            if (is_scalar($iter391)) {
            $xfer += $output->writeString($iter390);
            } else {
            $xfer += $output->writeString($iter391);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTimestr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size392 = 0;
            $_etype395 = 0;
            $xfer += $input->readSetBegin($_etype395, $_size392);
            for ($_i396 = 0; $_i396 < $_size392; ++$_i396)
            {
              $elem397 = null;
              $xfer += $input->readString($elem397);
              if (is_scalar($elem397)) {
                $this->success []= $elem397;
              } else {
                $this->success []= $elem397;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter398 => $iter399)
          {
            if (is_scalar($iter399)) {
            $xfer += $output->writeString($iter398);
            } else {
            $xfer += $output->writeString($iter399);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size400 = 0;
            $_etype403 = 0;
            $xfer += $input->readListBegin($_etype403, $_size400);
            for ($_i404 = 0; $_i404 < $_size400; ++$_i404)
            {
              $elem405 = null;
              $xfer += $input->readI64($elem405);
              $this->records []= $elem405;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter406)
          {
            $xfer += $output->writeI64($iter406);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size407 = 0;
            $_ktype408 = 0;
            $_vtype409 = 0;
            $xfer += $input->readMapBegin($_ktype408, $_vtype409, $_size407);
            for ($_i411 = 0; $_i411 < $_size407; ++$_i411)
            {
              $key412 = 0;
              $val413 = array();
              $xfer += $input->readI64($key412);
              $val413 = array();
              $_size414 = 0;
              $_etype417 = 0;
              $xfer += $input->readSetBegin($_etype417, $_size414);
              for ($_i418 = 0; $_i418 < $_size414; ++$_i418)
              {
                $elem419 = null;
                $xfer += $input->readString($elem419);
                if (is_scalar($elem419)) {
                  $val413 []= $elem419;
                } else {
                  $val413 []= $elem419;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key412) && !is_integer($key412)) ? serialize($key412) : $key412] = $val413;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter420 => $viter421)
          {
            $xfer += $output->writeI64($kiter420);
            {
              $output->writeSetBegin(TType::STRING, count($viter421));
              {
                foreach ($viter421 as $iter422 => $iter423)
                {
                  if (is_scalar($iter423)) {
                  $xfer += $output->writeString($iter422);
                  } else {
                  $xfer += $output->writeString($iter423);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size424 = 0;
            $_etype427 = 0;
            $xfer += $input->readListBegin($_etype427, $_size424);
            for ($_i428 = 0; $_i428 < $_size424; ++$_i428)
            {
              $elem429 = null;
              $xfer += $input->readI64($elem429);
              $this->records []= $elem429;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter430)
          {
            $xfer += $output->writeI64($iter430);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size431 = 0;
            $_ktype432 = 0;
            $_vtype433 = 0;
            $xfer += $input->readMapBegin($_ktype432, $_vtype433, $_size431);
            for ($_i435 = 0; $_i435 < $_size431; ++$_i435)
            {
              $key436 = 0;
              $val437 = array();
              $xfer += $input->readI64($key436);
              $val437 = array();
              $_size438 = 0;
              $_etype441 = 0;
              $xfer += $input->readSetBegin($_etype441, $_size438);
              for ($_i442 = 0; $_i442 < $_size438; ++$_i442)
              {
                $elem443 = null;
                $xfer += $input->readString($elem443);
                if (is_scalar($elem443)) {
                  $val437 []= $elem443;
                } else {
                  $val437 []= $elem443;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key436) && !is_integer($key436)) ? serialize($key436) : $key436] = $val437;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter444 => $viter445)
          {
            $xfer += $output->writeI64($kiter444);
            {
              $output->writeSetBegin(TType::STRING, count($viter445));
              {
                foreach ($viter445 as $iter446 => $iter447)
                {
                  if (is_scalar($iter447)) {
                  $xfer += $output->writeString($iter446);
                  } else {
                  $xfer += $output->writeString($iter447);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size448 = 0;
            $_etype451 = 0;
            $xfer += $input->readListBegin($_etype451, $_size448);
            for ($_i452 = 0; $_i452 < $_size448; ++$_i452)
            {
              $elem453 = null;
              $xfer += $input->readI64($elem453);
              $this->records []= $elem453;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTimestr_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter454)
          {
            $xfer += $output->writeI64($iter454);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size455 = 0;
            $_ktype456 = 0;
            $_vtype457 = 0;
            $xfer += $input->readMapBegin($_ktype456, $_vtype457, $_size455);
            for ($_i459 = 0; $_i459 < $_size455; ++$_i459)
            {
              $key460 = 0;
              $val461 = array();
              $xfer += $input->readI64($key460);
              $val461 = array();
              $_size462 = 0;
              $_etype465 = 0;
              $xfer += $input->readSetBegin($_etype465, $_size462);
              for ($_i466 = 0; $_i466 < $_size462; ++$_i466)
              {
                $elem467 = null;
                $xfer += $input->readString($elem467);
                if (is_scalar($elem467)) {
                  $val461 []= $elem467;
                } else {
                  $val461 []= $elem467;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key460) && !is_integer($key460)) ? serialize($key460) : $key460] = $val461;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter468 => $viter469)
          {
            $xfer += $output->writeI64($kiter468);
            {
              $output->writeSetBegin(TType::STRING, count($viter469));
              {
                foreach ($viter469 as $iter470 => $iter471)
                {
                  if (is_scalar($iter471)) {
                  $xfer += $output->writeString($iter470);
                  } else {
                  $xfer += $output->writeString($iter471);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStart_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStart_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size472 = 0;
            $_ktype473 = 0;
            $_vtype474 = 0;
            $xfer += $input->readMapBegin($_ktype473, $_vtype474, $_size472);
            for ($_i476 = 0; $_i476 < $_size472; ++$_i476)
            {
              $key477 = '';
              $val478 = array();
              $xfer += $input->readString($key477);
              $val478 = array();
              $_size479 = 0;
              $_ktype480 = 0;
              $_vtype481 = 0;
              $xfer += $input->readMapBegin($_ktype480, $_vtype481, $_size479);
              for ($_i483 = 0; $_i483 < $_size479; ++$_i483)
              {
                $key484 = 0;
                $val485 = array();
                $xfer += $input->readI32($key484);
                $val485 = array();
                $_size486 = 0;
                $_etype489 = 0;
                $xfer += $input->readSetBegin($_etype489, $_size486);
                for ($_i490 = 0; $_i490 < $_size486; ++$_i490)
                {
                  $elem491 = null;
                  $elem491 = new \concourse\thrift\data\TObject();
                  $xfer += $elem491->read($input);
                  if (is_scalar($elem491)) {
                    $val485 []= $elem491;
                  } else {
                    $val485 []= $elem491;
                  }
                }
                $xfer += $input->readSetEnd();
                $val478[(!is_string($key484) && !is_integer($key484)) ? serialize($key484) : $key484] = $val485;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key477) && !is_integer($key477)) ? serialize($key477) : $key477] = $val478;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter492 => $viter493)
          {
            $xfer += $output->writeString($kiter492);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter493));
              {
                foreach ($viter493 as $kiter494 => $viter495)
                {
                  $xfer += $output->writeI32($kiter494);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter495));
                    {
                      foreach ($viter495 as $iter496 => $iter497)
                      {
                        if (is_scalar($iter497)) {
                        $xfer += $iter496->write($output);
                        } else {
                        $xfer += $iter497->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size498 = 0;
            $_ktype499 = 0;
            $_vtype500 = 0;
            $xfer += $input->readMapBegin($_ktype499, $_vtype500, $_size498);
            for ($_i502 = 0; $_i502 < $_size498; ++$_i502)
            {
              $key503 = '';
              $val504 = array();
              $xfer += $input->readString($key503);
              $val504 = array();
              $_size505 = 0;
              $_ktype506 = 0;
              $_vtype507 = 0;
              $xfer += $input->readMapBegin($_ktype506, $_vtype507, $_size505);
              for ($_i509 = 0; $_i509 < $_size505; ++$_i509)
              {
                $key510 = 0;
                $val511 = array();
                $xfer += $input->readI32($key510);
                $val511 = array();
                $_size512 = 0;
                $_etype515 = 0;
                $xfer += $input->readSetBegin($_etype515, $_size512);
                for ($_i516 = 0; $_i516 < $_size512; ++$_i516)
                {
                  $elem517 = null;
                  $elem517 = new \concourse\thrift\data\TObject();
                  $xfer += $elem517->read($input);
                  if (is_scalar($elem517)) {
                    $val511 []= $elem517;
                  } else {
                    $val511 []= $elem517;
                  }
                }
                $xfer += $input->readSetEnd();
                $val504[(!is_string($key510) && !is_integer($key510)) ? serialize($key510) : $key510] = $val511;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key503) && !is_integer($key503)) ? serialize($key503) : $key503] = $val504;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter518 => $viter519)
          {
            $xfer += $output->writeString($kiter518);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter519));
              {
                foreach ($viter519 as $kiter520 => $viter521)
                {
                  $xfer += $output->writeI32($kiter520);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter521));
                    {
                      foreach ($viter521 as $iter522 => $iter523)
                      {
                        if (is_scalar($iter523)) {
                        $xfer += $iter522->write($output);
                        } else {
                        $xfer += $iter523->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartEnd_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 3);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size524 = 0;
            $_ktype525 = 0;
            $_vtype526 = 0;
            $xfer += $input->readMapBegin($_ktype525, $_vtype526, $_size524);
            for ($_i528 = 0; $_i528 < $_size524; ++$_i528)
            {
              $key529 = '';
              $val530 = array();
              $xfer += $input->readString($key529);
              $val530 = array();
              $_size531 = 0;
              $_ktype532 = 0;
              $_vtype533 = 0;
              $xfer += $input->readMapBegin($_ktype532, $_vtype533, $_size531);
              for ($_i535 = 0; $_i535 < $_size531; ++$_i535)
              {
                $key536 = 0;
                $val537 = array();
                $xfer += $input->readI32($key536);
                $val537 = array();
                $_size538 = 0;
                $_etype541 = 0;
                $xfer += $input->readSetBegin($_etype541, $_size538);
                for ($_i542 = 0; $_i542 < $_size538; ++$_i542)
                {
                  $elem543 = null;
                  $elem543 = new \concourse\thrift\data\TObject();
                  $xfer += $elem543->read($input);
                  if (is_scalar($elem543)) {
                    $val537 []= $elem543;
                  } else {
                    $val537 []= $elem543;
                  }
                }
                $xfer += $input->readSetEnd();
                $val530[(!is_string($key536) && !is_integer($key536)) ? serialize($key536) : $key536] = $val537;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key529) && !is_integer($key529)) ? serialize($key529) : $key529] = $val530;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter544 => $viter545)
          {
            $xfer += $output->writeString($kiter544);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter545));
              {
                foreach ($viter545 as $kiter546 => $viter547)
                {
                  $xfer += $output->writeI32($kiter546);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter547));
                    {
                      foreach ($viter547 as $iter548 => $iter549)
                      {
                        if (is_scalar($iter549)) {
                        $xfer += $iter548->write($output);
                        } else {
                        $xfer += $iter549->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstrEndstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 3);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size550 = 0;
            $_ktype551 = 0;
            $_vtype552 = 0;
            $xfer += $input->readMapBegin($_ktype551, $_vtype552, $_size550);
            for ($_i554 = 0; $_i554 < $_size550; ++$_i554)
            {
              $key555 = '';
              $val556 = array();
              $xfer += $input->readString($key555);
              $val556 = array();
              $_size557 = 0;
              $_ktype558 = 0;
              $_vtype559 = 0;
              $xfer += $input->readMapBegin($_ktype558, $_vtype559, $_size557);
              for ($_i561 = 0; $_i561 < $_size557; ++$_i561)
              {
                $key562 = 0;
                $val563 = array();
                $xfer += $input->readI32($key562);
                $val563 = array();
                $_size564 = 0;
                $_etype567 = 0;
                $xfer += $input->readSetBegin($_etype567, $_size564);
                for ($_i568 = 0; $_i568 < $_size564; ++$_i568)
                {
                  $elem569 = null;
                  $elem569 = new \concourse\thrift\data\TObject();
                  $xfer += $elem569->read($input);
                  if (is_scalar($elem569)) {
                    $val563 []= $elem569;
                  } else {
                    $val563 []= $elem569;
                  }
                }
                $xfer += $input->readSetEnd();
                $val556[(!is_string($key562) && !is_integer($key562)) ? serialize($key562) : $key562] = $val563;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key555) && !is_integer($key555)) ? serialize($key555) : $key555] = $val556;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter570 => $viter571)
          {
            $xfer += $output->writeString($kiter570);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter571));
              {
                foreach ($viter571 as $kiter572 => $viter573)
                {
                  $xfer += $output->writeI32($kiter572);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter573));
                    {
                      foreach ($viter573 as $iter574 => $iter575)
                      {
                        if (is_scalar($iter575)) {
                        $xfer += $iter574->write($output);
                        } else {
                        $xfer += $iter575->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size576 = 0;
            $_ktype577 = 0;
            $_vtype578 = 0;
            $xfer += $input->readMapBegin($_ktype577, $_vtype578, $_size576);
            for ($_i580 = 0; $_i580 < $_size576; ++$_i580)
            {
              $key581 = 0;
              $val582 = array();
              $xfer += $input->readI32($key581);
              $val582 = array();
              $_size583 = 0;
              $_etype586 = 0;
              $xfer += $input->readSetBegin($_etype586, $_size583);
              for ($_i587 = 0; $_i587 < $_size583; ++$_i587)
              {
                $elem588 = null;
                $elem588 = new \concourse\thrift\data\TObject();
                $xfer += $elem588->read($input);
                if (is_scalar($elem588)) {
                  $val582 []= $elem588;
                } else {
                  $val582 []= $elem588;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key581) && !is_integer($key581)) ? serialize($key581) : $key581] = $val582;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter589 => $viter590)
          {
            $xfer += $output->writeI32($kiter589);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter590));
              {
                foreach ($viter590 as $iter591 => $iter592)
                {
                  if (is_scalar($iter592)) {
                  $xfer += $iter591->write($output);
                  } else {
                  $xfer += $iter592->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size593 = 0;
            $_ktype594 = 0;
            $_vtype595 = 0;
            $xfer += $input->readMapBegin($_ktype594, $_vtype595, $_size593);
            for ($_i597 = 0; $_i597 < $_size593; ++$_i597)
            {
              $key598 = 0;
              $val599 = array();
              $xfer += $input->readI32($key598);
              $val599 = array();
              $_size600 = 0;
              $_etype603 = 0;
              $xfer += $input->readSetBegin($_etype603, $_size600);
              for ($_i604 = 0; $_i604 < $_size600; ++$_i604)
              {
                $elem605 = null;
                $elem605 = new \concourse\thrift\data\TObject();
                $xfer += $elem605->read($input);
                if (is_scalar($elem605)) {
                  $val599 []= $elem605;
                } else {
                  $val599 []= $elem605;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key598) && !is_integer($key598)) ? serialize($key598) : $key598] = $val599;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter606 => $viter607)
          {
            $xfer += $output->writeI32($kiter606);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter607));
              {
                foreach ($viter607 as $iter608 => $iter609)
                {
                  if (is_scalar($iter609)) {
                  $xfer += $iter608->write($output);
                  } else {
                  $xfer += $iter609->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size610 = 0;
            $_ktype611 = 0;
            $_vtype612 = 0;
            $xfer += $input->readMapBegin($_ktype611, $_vtype612, $_size610);
            for ($_i614 = 0; $_i614 < $_size610; ++$_i614)
            {
              $key615 = 0;
              $val616 = array();
              $xfer += $input->readI32($key615);
              $val616 = array();
              $_size617 = 0;
              $_etype620 = 0;
              $xfer += $input->readSetBegin($_etype620, $_size617);
              for ($_i621 = 0; $_i621 < $_size617; ++$_i621)
              {
                $elem622 = null;
                $elem622 = new \concourse\thrift\data\TObject();
                $xfer += $elem622->read($input);
                if (is_scalar($elem622)) {
                  $val616 []= $elem622;
                } else {
                  $val616 []= $elem622;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key615) && !is_integer($key615)) ? serialize($key615) : $key615] = $val616;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter623 => $viter624)
          {
            $xfer += $output->writeI32($kiter623);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter624));
              {
                foreach ($viter624 as $iter625 => $iter626)
                {
                  if (is_scalar($iter626)) {
                  $xfer += $iter625->write($output);
                  } else {
                  $xfer += $iter626->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 4);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size627 = 0;
            $_ktype628 = 0;
            $_vtype629 = 0;
            $xfer += $input->readMapBegin($_ktype628, $_vtype629, $_size627);
            for ($_i631 = 0; $_i631 < $_size627; ++$_i631)
            {
              $key632 = 0;
              $val633 = array();
              $xfer += $input->readI32($key632);
              $val633 = array();
              $_size634 = 0;
              $_etype637 = 0;
              $xfer += $input->readSetBegin($_etype637, $_size634);
              for ($_i638 = 0; $_i638 < $_size634; ++$_i638)
              {
                $elem639 = null;
                $elem639 = new \concourse\thrift\data\TObject();
                $xfer += $elem639->read($input);
                if (is_scalar($elem639)) {
                  $val633 []= $elem639;
                } else {
                  $val633 []= $elem639;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key632) && !is_integer($key632)) ? serialize($key632) : $key632] = $val633;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter640 => $viter641)
          {
            $xfer += $output->writeI32($kiter640);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter641));
              {
                foreach ($viter641 as $iter642 => $iter643)
                {
                  if (is_scalar($iter643)) {
                  $xfer += $iter642->write($output);
                  } else {
                  $xfer += $iter643->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size644 = 0;
            $_ktype645 = 0;
            $_vtype646 = 0;
            $xfer += $input->readMapBegin($_ktype645, $_vtype646, $_size644);
            for ($_i648 = 0; $_i648 < $_size644; ++$_i648)
            {
              $key649 = new \concourse\thrift\data\TObject();
              $val650 = array();
              $key649 = new \concourse\thrift\data\TObject();
              $xfer += $key649->read($input);
              $val650 = array();
              $_size651 = 0;
              $_ktype652 = 0;
              $_vtype653 = 0;
              $xfer += $input->readMapBegin($_ktype652, $_vtype653, $_size651);
              for ($_i655 = 0; $_i655 < $_size651; ++$_i655)
              {
                $key656 = 0;
                $val657 = array();
                $xfer += $input->readI32($key656);
                $val657 = array();
                $_size658 = 0;
                $_etype661 = 0;
                $xfer += $input->readSetBegin($_etype661, $_size658);
                for ($_i662 = 0; $_i662 < $_size658; ++$_i662)
                {
                  $elem663 = null;
                  $xfer += $input->readI64($elem663);
                  if (is_scalar($elem663)) {
                    $val657 []= $elem663;
                  } else {
                    $val657 []= $elem663;
                  }
                }
                $xfer += $input->readSetEnd();
                $val650[(!is_string($key656) && !is_integer($key656)) ? serialize($key656) : $key656] = $val657;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key649) && !is_integer($key649)) ? serialize($key649) : $key649] = $val650;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter664 => $viter665)
          {
            $xfer += $kiter664->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter665));
              {
                foreach ($viter665 as $kiter666 => $viter667)
                {
                  $xfer += $output->writeI32($kiter666);
                  {
                    $output->writeSetBegin(TType::I64, count($viter667));
                    {
                      foreach ($viter667 as $iter668 => $iter669)
                      {
                        if (is_scalar($iter669)) {
                        $xfer += $output->writeI64($iter668);
                        } else {
                        $xfer += $output->writeI64($iter669);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size670 = 0;
            $_ktype671 = 0;
            $_vtype672 = 0;
            $xfer += $input->readMapBegin($_ktype671, $_vtype672, $_size670);
            for ($_i674 = 0; $_i674 < $_size670; ++$_i674)
            {
              $key675 = new \concourse\thrift\data\TObject();
              $val676 = array();
              $key675 = new \concourse\thrift\data\TObject();
              $xfer += $key675->read($input);
              $val676 = array();
              $_size677 = 0;
              $_ktype678 = 0;
              $_vtype679 = 0;
              $xfer += $input->readMapBegin($_ktype678, $_vtype679, $_size677);
              for ($_i681 = 0; $_i681 < $_size677; ++$_i681)
              {
                $key682 = 0;
                $val683 = array();
                $xfer += $input->readI32($key682);
                $val683 = array();
                $_size684 = 0;
                $_etype687 = 0;
                $xfer += $input->readSetBegin($_etype687, $_size684);
                for ($_i688 = 0; $_i688 < $_size684; ++$_i688)
                {
                  $elem689 = null;
                  $xfer += $input->readI64($elem689);
                  if (is_scalar($elem689)) {
                    $val683 []= $elem689;
                  } else {
                    $val683 []= $elem689;
                  }
                }
                $xfer += $input->readSetEnd();
                $val676[(!is_string($key682) && !is_integer($key682)) ? serialize($key682) : $key682] = $val683;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key675) && !is_integer($key675)) ? serialize($key675) : $key675] = $val676;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter690 => $viter691)
          {
            $xfer += $kiter690->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter691));
              {
                foreach ($viter691 as $kiter692 => $viter693)
                {
                  $xfer += $output->writeI32($kiter692);
                  {
                    $output->writeSetBegin(TType::I64, count($viter693));
                    {
                      foreach ($viter693 as $iter694 => $iter695)
                      {
                        if (is_scalar($iter695)) {
                        $xfer += $output->writeI64($iter694);
                        } else {
                        $xfer += $output->writeI64($iter695);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 3);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size696 = 0;
            $_ktype697 = 0;
            $_vtype698 = 0;
            $xfer += $input->readMapBegin($_ktype697, $_vtype698, $_size696);
            for ($_i700 = 0; $_i700 < $_size696; ++$_i700)
            {
              $key701 = new \concourse\thrift\data\TObject();
              $val702 = array();
              $key701 = new \concourse\thrift\data\TObject();
              $xfer += $key701->read($input);
              $val702 = array();
              $_size703 = 0;
              $_ktype704 = 0;
              $_vtype705 = 0;
              $xfer += $input->readMapBegin($_ktype704, $_vtype705, $_size703);
              for ($_i707 = 0; $_i707 < $_size703; ++$_i707)
              {
                $key708 = 0;
                $val709 = array();
                $xfer += $input->readI32($key708);
                $val709 = array();
                $_size710 = 0;
                $_etype713 = 0;
                $xfer += $input->readSetBegin($_etype713, $_size710);
                for ($_i714 = 0; $_i714 < $_size710; ++$_i714)
                {
                  $elem715 = null;
                  $xfer += $input->readI64($elem715);
                  if (is_scalar($elem715)) {
                    $val709 []= $elem715;
                  } else {
                    $val709 []= $elem715;
                  }
                }
                $xfer += $input->readSetEnd();
                $val702[(!is_string($key708) && !is_integer($key708)) ? serialize($key708) : $key708] = $val709;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key701) && !is_integer($key701)) ? serialize($key701) : $key701] = $val702;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter716 => $viter717)
          {
            $xfer += $kiter716->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter717));
              {
                foreach ($viter717 as $kiter718 => $viter719)
                {
                  $xfer += $output->writeI32($kiter718);
                  {
                    $output->writeSetBegin(TType::I64, count($viter719));
                    {
                      foreach ($viter719 as $iter720 => $iter721)
                      {
                        if (is_scalar($iter721)) {
                        $xfer += $output->writeI64($iter720);
                        } else {
                        $xfer += $output->writeI64($iter721);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 3);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size722 = 0;
            $_ktype723 = 0;
            $_vtype724 = 0;
            $xfer += $input->readMapBegin($_ktype723, $_vtype724, $_size722);
            for ($_i726 = 0; $_i726 < $_size722; ++$_i726)
            {
              $key727 = new \concourse\thrift\data\TObject();
              $val728 = array();
              $key727 = new \concourse\thrift\data\TObject();
              $xfer += $key727->read($input);
              $val728 = array();
              $_size729 = 0;
              $_ktype730 = 0;
              $_vtype731 = 0;
              $xfer += $input->readMapBegin($_ktype730, $_vtype731, $_size729);
              for ($_i733 = 0; $_i733 < $_size729; ++$_i733)
              {
                $key734 = 0;
                $val735 = array();
                $xfer += $input->readI32($key734);
                $val735 = array();
                $_size736 = 0;
                $_etype739 = 0;
                $xfer += $input->readSetBegin($_etype739, $_size736);
                for ($_i740 = 0; $_i740 < $_size736; ++$_i740)
                {
                  $elem741 = null;
                  $xfer += $input->readI64($elem741);
                  if (is_scalar($elem741)) {
                    $val735 []= $elem741;
                  } else {
                    $val735 []= $elem741;
                  }
                }
                $xfer += $input->readSetEnd();
                $val728[(!is_string($key734) && !is_integer($key734)) ? serialize($key734) : $key734] = $val735;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key727) && !is_integer($key727)) ? serialize($key727) : $key727] = $val728;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter742 => $viter743)
          {
            $xfer += $kiter742->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter743));
              {
                foreach ($viter743 as $kiter744 => $viter745)
                {
                  $xfer += $output->writeI32($kiter744);
                  {
                    $output->writeSetBegin(TType::I64, count($viter745));
                    {
                      foreach ($viter745 as $iter746 => $iter747)
                      {
                        if (is_scalar($iter747)) {
                        $xfer += $output->writeI64($iter746);
                        } else {
                        $xfer += $output->writeI64($iter747);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_login_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_login_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_login_args');
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 1);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 2);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_login_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_login_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_login_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_logout_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_logout_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_logout_args');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 2);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_logout_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_logout_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_logout_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_stage_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_stage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_stage_args');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 2);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_stage_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_stage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_stage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJson_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJson_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJson_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size748 = 0;
            $_etype751 = 0;
            $xfer += $input->readSetBegin($_etype751, $_size748);
            for ($_i752 = 0; $_i752 < $_size748; ++$_i752)
            {
              $elem753 = null;
              $xfer += $input->readI64($elem753);
              if (is_scalar($elem753)) {
                $this->success []= $elem753;
              } else {
                $this->success []= $elem753;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJson_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter754 => $iter755)
          {
            if (is_scalar($iter755)) {
            $xfer += $output->writeI64($iter754);
            } else {
            $xfer += $output->writeI64($iter755);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecord_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size756 = 0;
            $_etype759 = 0;
            $xfer += $input->readListBegin($_etype759, $_size756);
            for ($_i760 = 0; $_i760 < $_size756; ++$_i760)
            {
              $elem761 = null;
              $xfer += $input->readI64($elem761);
              $this->records []= $elem761;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecords_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter762)
          {
            $xfer += $output->writeI64($iter762);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size763 = 0;
            $_ktype764 = 0;
            $_vtype765 = 0;
            $xfer += $input->readMapBegin($_ktype764, $_vtype765, $_size763);
            for ($_i767 = 0; $_i767 < $_size763; ++$_i767)
            {
              $key768 = 0;
              $val769 = false;
              $xfer += $input->readI64($key768);
              $xfer += $input->readBool($val769);
              $this->success[(!is_string($key768) && !is_integer($key768)) ? serialize($key768) : $key768] = $val769;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter770 => $viter771)
          {
            $xfer += $output->writeI64($kiter770);
            $xfer += $output->writeBool($viter771);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size772 = 0;
            $_etype775 = 0;
            $xfer += $input->readListBegin($_etype775, $_size772);
            for ($_i776 = 0; $_i776 < $_size772; ++$_i776)
            {
              $elem777 = null;
              $xfer += $input->readI64($elem777);
              $this->records []= $elem777;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter778)
          {
            $xfer += $output->writeI64($iter778);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size779 = 0;
            $_ktype780 = 0;
            $_vtype781 = 0;
            $xfer += $input->readMapBegin($_ktype780, $_vtype781, $_size779);
            for ($_i783 = 0; $_i783 < $_size779; ++$_i783)
            {
              $key784 = 0;
              $val785 = false;
              $xfer += $input->readI64($key784);
              $xfer += $input->readBool($val785);
              $this->success[(!is_string($key784) && !is_integer($key784)) ? serialize($key784) : $key784] = $val785;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter786 => $viter787)
          {
            $xfer += $output->writeI64($kiter786);
            $xfer += $output->writeBool($viter787);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size788 = 0;
            $_etype791 = 0;
            $xfer += $input->readListBegin($_etype791, $_size788);
            for ($_i792 = 0; $_i792 < $_size788; ++$_i792)
            {
              $elem793 = null;
              $xfer += $input->readI64($elem793);
              $this->records []= $elem793;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter794)
          {
            $xfer += $output->writeI64($iter794);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_reconcileKeyRecordValues_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_reconcileKeyRecordValues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->values = array();
            $_size795 = 0;
            $_etype798 = 0;
            $xfer += $input->readSetBegin($_etype798, $_size795);
            for ($_i799 = 0; $_i799 < $_size795; ++$_i799)
            {
              $elem800 = null;
              $elem800 = new \concourse\thrift\data\TObject();
              $xfer += $elem800->read($input);
              if (is_scalar($elem800)) {
                $this->values []= $elem800;
              } else {
                $this->values []= $elem800;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_reconcileKeyRecordValues_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::SET, 3);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter801 => $iter802)
          {
            if (is_scalar($iter802)) {
            $xfer += $iter801->write($output);
            } else {
            $xfer += $iter802->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_reconcileKeyRecordValues_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_reconcileKeyRecordValues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_reconcileKeyRecordValues_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_inventory_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_inventory_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_inventory_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_inventory_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_inventory_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size803 = 0;
            $_etype806 = 0;
            $xfer += $input->readSetBegin($_etype806, $_size803);
            for ($_i807 = 0; $_i807 < $_size803; ++$_i807)
            {
              $elem808 = null;
              $xfer += $input->readI64($elem808);
              if (is_scalar($elem808)) {
                $this->success []= $elem808;
              } else {
                $this->success []= $elem808;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_inventory_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter809 => $iter810)
          {
            if (is_scalar($iter810)) {
            $xfer += $output->writeI64($iter809);
            } else {
            $xfer += $output->writeI64($iter810);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size811 = 0;
            $_ktype812 = 0;
            $_vtype813 = 0;
            $xfer += $input->readMapBegin($_ktype812, $_vtype813, $_size811);
            for ($_i815 = 0; $_i815 < $_size811; ++$_i815)
            {
              $key816 = '';
              $val817 = array();
              $xfer += $input->readString($key816);
              $val817 = array();
              $_size818 = 0;
              $_etype821 = 0;
              $xfer += $input->readSetBegin($_etype821, $_size818);
              for ($_i822 = 0; $_i822 < $_size818; ++$_i822)
              {
                $elem823 = null;
                $elem823 = new \concourse\thrift\data\TObject();
                $xfer += $elem823->read($input);
                if (is_scalar($elem823)) {
                  $val817 []= $elem823;
                } else {
                  $val817 []= $elem823;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key816) && !is_integer($key816)) ? serialize($key816) : $key816] = $val817;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter824 => $viter825)
          {
            $xfer += $output->writeString($kiter824);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter825));
              {
                foreach ($viter825 as $iter826 => $iter827)
                {
                  if (is_scalar($iter827)) {
                  $xfer += $iter826->write($output);
                  } else {
                  $xfer += $iter827->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size828 = 0;
            $_etype831 = 0;
            $xfer += $input->readListBegin($_etype831, $_size828);
            for ($_i832 = 0; $_i832 < $_size828; ++$_i832)
            {
              $elem833 = null;
              $xfer += $input->readI64($elem833);
              $this->records []= $elem833;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter834)
          {
            $xfer += $output->writeI64($iter834);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size835 = 0;
            $_ktype836 = 0;
            $_vtype837 = 0;
            $xfer += $input->readMapBegin($_ktype836, $_vtype837, $_size835);
            for ($_i839 = 0; $_i839 < $_size835; ++$_i839)
            {
              $key840 = 0;
              $val841 = array();
              $xfer += $input->readI64($key840);
              $val841 = array();
              $_size842 = 0;
              $_ktype843 = 0;
              $_vtype844 = 0;
              $xfer += $input->readMapBegin($_ktype843, $_vtype844, $_size842);
              for ($_i846 = 0; $_i846 < $_size842; ++$_i846)
              {
                $key847 = '';
                $val848 = array();
                $xfer += $input->readString($key847);
                $val848 = array();
                $_size849 = 0;
                $_etype852 = 0;
                $xfer += $input->readSetBegin($_etype852, $_size849);
                for ($_i853 = 0; $_i853 < $_size849; ++$_i853)
                {
                  $elem854 = null;
                  $elem854 = new \concourse\thrift\data\TObject();
                  $xfer += $elem854->read($input);
                  if (is_scalar($elem854)) {
                    $val848 []= $elem854;
                  } else {
                    $val848 []= $elem854;
                  }
                }
                $xfer += $input->readSetEnd();
                $val841[(!is_string($key847) && !is_integer($key847)) ? serialize($key847) : $key847] = $val848;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key840) && !is_integer($key840)) ? serialize($key840) : $key840] = $val841;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter855 => $viter856)
          {
            $xfer += $output->writeI64($kiter855);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter856));
              {
                foreach ($viter856 as $kiter857 => $viter858)
                {
                  $xfer += $output->writeString($kiter857);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter858));
                    {
                      foreach ($viter858 as $iter859 => $iter860)
                      {
                        if (is_scalar($iter860)) {
                        $xfer += $iter859->write($output);
                        } else {
                        $xfer += $iter860->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTime_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTime_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size861 = 0;
            $_ktype862 = 0;
            $_vtype863 = 0;
            $xfer += $input->readMapBegin($_ktype862, $_vtype863, $_size861);
            for ($_i865 = 0; $_i865 < $_size861; ++$_i865)
            {
              $key866 = '';
              $val867 = array();
              $xfer += $input->readString($key866);
              $val867 = array();
              $_size868 = 0;
              $_etype871 = 0;
              $xfer += $input->readSetBegin($_etype871, $_size868);
              for ($_i872 = 0; $_i872 < $_size868; ++$_i872)
              {
                $elem873 = null;
                $elem873 = new \concourse\thrift\data\TObject();
                $xfer += $elem873->read($input);
                if (is_scalar($elem873)) {
                  $val867 []= $elem873;
                } else {
                  $val867 []= $elem873;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key866) && !is_integer($key866)) ? serialize($key866) : $key866] = $val867;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter874 => $viter875)
          {
            $xfer += $output->writeString($kiter874);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter875));
              {
                foreach ($viter875 as $iter876 => $iter877)
                {
                  if (is_scalar($iter877)) {
                  $xfer += $iter876->write($output);
                  } else {
                  $xfer += $iter877->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTimestr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size878 = 0;
            $_ktype879 = 0;
            $_vtype880 = 0;
            $xfer += $input->readMapBegin($_ktype879, $_vtype880, $_size878);
            for ($_i882 = 0; $_i882 < $_size878; ++$_i882)
            {
              $key883 = '';
              $val884 = array();
              $xfer += $input->readString($key883);
              $val884 = array();
              $_size885 = 0;
              $_etype888 = 0;
              $xfer += $input->readSetBegin($_etype888, $_size885);
              for ($_i889 = 0; $_i889 < $_size885; ++$_i889)
              {
                $elem890 = null;
                $elem890 = new \concourse\thrift\data\TObject();
                $xfer += $elem890->read($input);
                if (is_scalar($elem890)) {
                  $val884 []= $elem890;
                } else {
                  $val884 []= $elem890;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key883) && !is_integer($key883)) ? serialize($key883) : $key883] = $val884;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter891 => $viter892)
          {
            $xfer += $output->writeString($kiter891);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter892));
              {
                foreach ($viter892 as $iter893 => $iter894)
                {
                  if (is_scalar($iter894)) {
                  $xfer += $iter893->write($output);
                  } else {
                  $xfer += $iter894->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size895 = 0;
            $_etype898 = 0;
            $xfer += $input->readListBegin($_etype898, $_size895);
            for ($_i899 = 0; $_i899 < $_size895; ++$_i899)
            {
              $elem900 = null;
              $xfer += $input->readI64($elem900);
              $this->records []= $elem900;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter901)
          {
            $xfer += $output->writeI64($iter901);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size902 = 0;
            $_ktype903 = 0;
            $_vtype904 = 0;
            $xfer += $input->readMapBegin($_ktype903, $_vtype904, $_size902);
            for ($_i906 = 0; $_i906 < $_size902; ++$_i906)
            {
              $key907 = 0;
              $val908 = array();
              $xfer += $input->readI64($key907);
              $val908 = array();
              $_size909 = 0;
              $_ktype910 = 0;
              $_vtype911 = 0;
              $xfer += $input->readMapBegin($_ktype910, $_vtype911, $_size909);
              for ($_i913 = 0; $_i913 < $_size909; ++$_i913)
              {
                $key914 = '';
                $val915 = array();
                $xfer += $input->readString($key914);
                $val915 = array();
                $_size916 = 0;
                $_etype919 = 0;
                $xfer += $input->readSetBegin($_etype919, $_size916);
                for ($_i920 = 0; $_i920 < $_size916; ++$_i920)
                {
                  $elem921 = null;
                  $elem921 = new \concourse\thrift\data\TObject();
                  $xfer += $elem921->read($input);
                  if (is_scalar($elem921)) {
                    $val915 []= $elem921;
                  } else {
                    $val915 []= $elem921;
                  }
                }
                $xfer += $input->readSetEnd();
                $val908[(!is_string($key914) && !is_integer($key914)) ? serialize($key914) : $key914] = $val915;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key907) && !is_integer($key907)) ? serialize($key907) : $key907] = $val908;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter922 => $viter923)
          {
            $xfer += $output->writeI64($kiter922);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter923));
              {
                foreach ($viter923 as $kiter924 => $viter925)
                {
                  $xfer += $output->writeString($kiter924);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter925));
                    {
                      foreach ($viter925 as $iter926 => $iter927)
                      {
                        if (is_scalar($iter927)) {
                        $xfer += $iter926->write($output);
                        } else {
                        $xfer += $iter927->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size928 = 0;
            $_etype931 = 0;
            $xfer += $input->readListBegin($_etype931, $_size928);
            for ($_i932 = 0; $_i932 < $_size928; ++$_i932)
            {
              $elem933 = null;
              $xfer += $input->readI64($elem933);
              $this->records []= $elem933;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTimestr_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter934)
          {
            $xfer += $output->writeI64($iter934);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size935 = 0;
            $_ktype936 = 0;
            $_vtype937 = 0;
            $xfer += $input->readMapBegin($_ktype936, $_vtype937, $_size935);
            for ($_i939 = 0; $_i939 < $_size935; ++$_i939)
            {
              $key940 = 0;
              $val941 = array();
              $xfer += $input->readI64($key940);
              $val941 = array();
              $_size942 = 0;
              $_ktype943 = 0;
              $_vtype944 = 0;
              $xfer += $input->readMapBegin($_ktype943, $_vtype944, $_size942);
              for ($_i946 = 0; $_i946 < $_size942; ++$_i946)
              {
                $key947 = '';
                $val948 = array();
                $xfer += $input->readString($key947);
                $val948 = array();
                $_size949 = 0;
                $_etype952 = 0;
                $xfer += $input->readSetBegin($_etype952, $_size949);
                for ($_i953 = 0; $_i953 < $_size949; ++$_i953)
                {
                  $elem954 = null;
                  $elem954 = new \concourse\thrift\data\TObject();
                  $xfer += $elem954->read($input);
                  if (is_scalar($elem954)) {
                    $val948 []= $elem954;
                  } else {
                    $val948 []= $elem954;
                  }
                }
                $xfer += $input->readSetEnd();
                $val941[(!is_string($key947) && !is_integer($key947)) ? serialize($key947) : $key947] = $val948;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key940) && !is_integer($key940)) ? serialize($key940) : $key940] = $val941;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter955 => $viter956)
          {
            $xfer += $output->writeI64($kiter955);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter956));
              {
                foreach ($viter956 as $kiter957 => $viter958)
                {
                  $xfer += $output->writeString($kiter957);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter958));
                    {
                      foreach ($viter958 as $iter959 => $iter960)
                      {
                        if (is_scalar($iter960)) {
                        $xfer += $iter959->write($output);
                        } else {
                        $xfer += $iter960->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size961 = 0;
            $_etype964 = 0;
            $xfer += $input->readSetBegin($_etype964, $_size961);
            for ($_i965 = 0; $_i965 < $_size961; ++$_i965)
            {
              $elem966 = null;
              $elem966 = new \concourse\thrift\data\TObject();
              $xfer += $elem966->read($input);
              if (is_scalar($elem966)) {
                $this->success []= $elem966;
              } else {
                $this->success []= $elem966;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter967 => $iter968)
          {
            if (is_scalar($iter968)) {
            $xfer += $iter967->write($output);
            } else {
            $xfer += $iter968->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size969 = 0;
            $_etype972 = 0;
            $xfer += $input->readSetBegin($_etype972, $_size969);
            for ($_i973 = 0; $_i973 < $_size969; ++$_i973)
            {
              $elem974 = null;
              $elem974 = new \concourse\thrift\data\TObject();
              $xfer += $elem974->read($input);
              if (is_scalar($elem974)) {
                $this->success []= $elem974;
              } else {
                $this->success []= $elem974;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter975 => $iter976)
          {
            if (is_scalar($iter976)) {
            $xfer += $iter975->write($output);
            } else {
            $xfer += $iter976->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size977 = 0;
            $_etype980 = 0;
            $xfer += $input->readSetBegin($_etype980, $_size977);
            for ($_i981 = 0; $_i981 < $_size977; ++$_i981)
            {
              $elem982 = null;
              $elem982 = new \concourse\thrift\data\TObject();
              $xfer += $elem982->read($input);
              if (is_scalar($elem982)) {
                $this->success []= $elem982;
              } else {
                $this->success []= $elem982;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter983 => $iter984)
          {
            if (is_scalar($iter984)) {
            $xfer += $iter983->write($output);
            } else {
            $xfer += $iter984->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size985 = 0;
            $_etype988 = 0;
            $xfer += $input->readListBegin($_etype988, $_size985);
            for ($_i989 = 0; $_i989 < $_size985; ++$_i989)
            {
              $elem990 = null;
              $xfer += $input->readString($elem990);
              $this->keys []= $elem990;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter991)
          {
            $xfer += $output->writeString($iter991);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size992 = 0;
            $_ktype993 = 0;
            $_vtype994 = 0;
            $xfer += $input->readMapBegin($_ktype993, $_vtype994, $_size992);
            for ($_i996 = 0; $_i996 < $_size992; ++$_i996)
            {
              $key997 = '';
              $val998 = array();
              $xfer += $input->readString($key997);
              $val998 = array();
              $_size999 = 0;
              $_etype1002 = 0;
              $xfer += $input->readSetBegin($_etype1002, $_size999);
              for ($_i1003 = 0; $_i1003 < $_size999; ++$_i1003)
              {
                $elem1004 = null;
                $elem1004 = new \concourse\thrift\data\TObject();
                $xfer += $elem1004->read($input);
                if (is_scalar($elem1004)) {
                  $val998 []= $elem1004;
                } else {
                  $val998 []= $elem1004;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key997) && !is_integer($key997)) ? serialize($key997) : $key997] = $val998;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1005 => $viter1006)
          {
            $xfer += $output->writeString($kiter1005);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1006));
              {
                foreach ($viter1006 as $iter1007 => $iter1008)
                {
                  if (is_scalar($iter1008)) {
                  $xfer += $iter1007->write($output);
                  } else {
                  $xfer += $iter1008->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1009 = 0;
            $_etype1012 = 0;
            $xfer += $input->readListBegin($_etype1012, $_size1009);
            for ($_i1013 = 0; $_i1013 < $_size1009; ++$_i1013)
            {
              $elem1014 = null;
              $xfer += $input->readString($elem1014);
              $this->keys []= $elem1014;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1015)
          {
            $xfer += $output->writeString($iter1015);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1016 = 0;
            $_ktype1017 = 0;
            $_vtype1018 = 0;
            $xfer += $input->readMapBegin($_ktype1017, $_vtype1018, $_size1016);
            for ($_i1020 = 0; $_i1020 < $_size1016; ++$_i1020)
            {
              $key1021 = '';
              $val1022 = array();
              $xfer += $input->readString($key1021);
              $val1022 = array();
              $_size1023 = 0;
              $_etype1026 = 0;
              $xfer += $input->readSetBegin($_etype1026, $_size1023);
              for ($_i1027 = 0; $_i1027 < $_size1023; ++$_i1027)
              {
                $elem1028 = null;
                $elem1028 = new \concourse\thrift\data\TObject();
                $xfer += $elem1028->read($input);
                if (is_scalar($elem1028)) {
                  $val1022 []= $elem1028;
                } else {
                  $val1022 []= $elem1028;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1021) && !is_integer($key1021)) ? serialize($key1021) : $key1021] = $val1022;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1029 => $viter1030)
          {
            $xfer += $output->writeString($kiter1029);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1030));
              {
                foreach ($viter1030 as $iter1031 => $iter1032)
                {
                  if (is_scalar($iter1032)) {
                  $xfer += $iter1031->write($output);
                  } else {
                  $xfer += $iter1032->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1033 = 0;
            $_etype1036 = 0;
            $xfer += $input->readListBegin($_etype1036, $_size1033);
            for ($_i1037 = 0; $_i1037 < $_size1033; ++$_i1037)
            {
              $elem1038 = null;
              $xfer += $input->readString($elem1038);
              $this->keys []= $elem1038;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1039)
          {
            $xfer += $output->writeString($iter1039);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1040 = 0;
            $_ktype1041 = 0;
            $_vtype1042 = 0;
            $xfer += $input->readMapBegin($_ktype1041, $_vtype1042, $_size1040);
            for ($_i1044 = 0; $_i1044 < $_size1040; ++$_i1044)
            {
              $key1045 = '';
              $val1046 = array();
              $xfer += $input->readString($key1045);
              $val1046 = array();
              $_size1047 = 0;
              $_etype1050 = 0;
              $xfer += $input->readSetBegin($_etype1050, $_size1047);
              for ($_i1051 = 0; $_i1051 < $_size1047; ++$_i1051)
              {
                $elem1052 = null;
                $elem1052 = new \concourse\thrift\data\TObject();
                $xfer += $elem1052->read($input);
                if (is_scalar($elem1052)) {
                  $val1046 []= $elem1052;
                } else {
                  $val1046 []= $elem1052;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1045) && !is_integer($key1045)) ? serialize($key1045) : $key1045] = $val1046;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1053 => $viter1054)
          {
            $xfer += $output->writeString($kiter1053);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1054));
              {
                foreach ($viter1054 as $iter1055 => $iter1056)
                {
                  if (is_scalar($iter1056)) {
                  $xfer += $iter1055->write($output);
                  } else {
                  $xfer += $iter1056->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1057 = 0;
            $_etype1060 = 0;
            $xfer += $input->readListBegin($_etype1060, $_size1057);
            for ($_i1061 = 0; $_i1061 < $_size1057; ++$_i1061)
            {
              $elem1062 = null;
              $xfer += $input->readString($elem1062);
              $this->keys []= $elem1062;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1063 = 0;
            $_etype1066 = 0;
            $xfer += $input->readListBegin($_etype1066, $_size1063);
            for ($_i1067 = 0; $_i1067 < $_size1063; ++$_i1067)
            {
              $elem1068 = null;
              $xfer += $input->readI64($elem1068);
              $this->records []= $elem1068;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1069)
          {
            $xfer += $output->writeString($iter1069);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1070)
          {
            $xfer += $output->writeI64($iter1070);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1071 = 0;
            $_ktype1072 = 0;
            $_vtype1073 = 0;
            $xfer += $input->readMapBegin($_ktype1072, $_vtype1073, $_size1071);
            for ($_i1075 = 0; $_i1075 < $_size1071; ++$_i1075)
            {
              $key1076 = 0;
              $val1077 = array();
              $xfer += $input->readI64($key1076);
              $val1077 = array();
              $_size1078 = 0;
              $_ktype1079 = 0;
              $_vtype1080 = 0;
              $xfer += $input->readMapBegin($_ktype1079, $_vtype1080, $_size1078);
              for ($_i1082 = 0; $_i1082 < $_size1078; ++$_i1082)
              {
                $key1083 = '';
                $val1084 = array();
                $xfer += $input->readString($key1083);
                $val1084 = array();
                $_size1085 = 0;
                $_etype1088 = 0;
                $xfer += $input->readSetBegin($_etype1088, $_size1085);
                for ($_i1089 = 0; $_i1089 < $_size1085; ++$_i1089)
                {
                  $elem1090 = null;
                  $elem1090 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1090->read($input);
                  if (is_scalar($elem1090)) {
                    $val1084 []= $elem1090;
                  } else {
                    $val1084 []= $elem1090;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1077[(!is_string($key1083) && !is_integer($key1083)) ? serialize($key1083) : $key1083] = $val1084;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1076) && !is_integer($key1076)) ? serialize($key1076) : $key1076] = $val1077;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1091 => $viter1092)
          {
            $xfer += $output->writeI64($kiter1091);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1092));
              {
                foreach ($viter1092 as $kiter1093 => $viter1094)
                {
                  $xfer += $output->writeString($kiter1093);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1094));
                    {
                      foreach ($viter1094 as $iter1095 => $iter1096)
                      {
                        if (is_scalar($iter1096)) {
                        $xfer += $iter1095->write($output);
                        } else {
                        $xfer += $iter1096->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1097 = 0;
            $_etype1100 = 0;
            $xfer += $input->readListBegin($_etype1100, $_size1097);
            for ($_i1101 = 0; $_i1101 < $_size1097; ++$_i1101)
            {
              $elem1102 = null;
              $xfer += $input->readI64($elem1102);
              $this->records []= $elem1102;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1103)
          {
            $xfer += $output->writeI64($iter1103);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1104 = 0;
            $_ktype1105 = 0;
            $_vtype1106 = 0;
            $xfer += $input->readMapBegin($_ktype1105, $_vtype1106, $_size1104);
            for ($_i1108 = 0; $_i1108 < $_size1104; ++$_i1108)
            {
              $key1109 = 0;
              $val1110 = array();
              $xfer += $input->readI64($key1109);
              $val1110 = array();
              $_size1111 = 0;
              $_etype1114 = 0;
              $xfer += $input->readSetBegin($_etype1114, $_size1111);
              for ($_i1115 = 0; $_i1115 < $_size1111; ++$_i1115)
              {
                $elem1116 = null;
                $elem1116 = new \concourse\thrift\data\TObject();
                $xfer += $elem1116->read($input);
                if (is_scalar($elem1116)) {
                  $val1110 []= $elem1116;
                } else {
                  $val1110 []= $elem1116;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1109) && !is_integer($key1109)) ? serialize($key1109) : $key1109] = $val1110;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1117 => $viter1118)
          {
            $xfer += $output->writeI64($kiter1117);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1118));
              {
                foreach ($viter1118 as $iter1119 => $iter1120)
                {
                  if (is_scalar($iter1120)) {
                  $xfer += $iter1119->write($output);
                  } else {
                  $xfer += $iter1120->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1121 = 0;
            $_etype1124 = 0;
            $xfer += $input->readListBegin($_etype1124, $_size1121);
            for ($_i1125 = 0; $_i1125 < $_size1121; ++$_i1125)
            {
              $elem1126 = null;
              $xfer += $input->readI64($elem1126);
              $this->records []= $elem1126;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1127)
          {
            $xfer += $output->writeI64($iter1127);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1128 = 0;
            $_ktype1129 = 0;
            $_vtype1130 = 0;
            $xfer += $input->readMapBegin($_ktype1129, $_vtype1130, $_size1128);
            for ($_i1132 = 0; $_i1132 < $_size1128; ++$_i1132)
            {
              $key1133 = 0;
              $val1134 = array();
              $xfer += $input->readI64($key1133);
              $val1134 = array();
              $_size1135 = 0;
              $_etype1138 = 0;
              $xfer += $input->readSetBegin($_etype1138, $_size1135);
              for ($_i1139 = 0; $_i1139 < $_size1135; ++$_i1139)
              {
                $elem1140 = null;
                $elem1140 = new \concourse\thrift\data\TObject();
                $xfer += $elem1140->read($input);
                if (is_scalar($elem1140)) {
                  $val1134 []= $elem1140;
                } else {
                  $val1134 []= $elem1140;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1133) && !is_integer($key1133)) ? serialize($key1133) : $key1133] = $val1134;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1141 => $viter1142)
          {
            $xfer += $output->writeI64($kiter1141);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1142));
              {
                foreach ($viter1142 as $iter1143 => $iter1144)
                {
                  if (is_scalar($iter1144)) {
                  $xfer += $iter1143->write($output);
                  } else {
                  $xfer += $iter1144->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1145 = 0;
            $_etype1148 = 0;
            $xfer += $input->readListBegin($_etype1148, $_size1145);
            for ($_i1149 = 0; $_i1149 < $_size1145; ++$_i1149)
            {
              $elem1150 = null;
              $xfer += $input->readI64($elem1150);
              $this->records []= $elem1150;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1151)
          {
            $xfer += $output->writeI64($iter1151);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1152 = 0;
            $_ktype1153 = 0;
            $_vtype1154 = 0;
            $xfer += $input->readMapBegin($_ktype1153, $_vtype1154, $_size1152);
            for ($_i1156 = 0; $_i1156 < $_size1152; ++$_i1156)
            {
              $key1157 = 0;
              $val1158 = array();
              $xfer += $input->readI64($key1157);
              $val1158 = array();
              $_size1159 = 0;
              $_etype1162 = 0;
              $xfer += $input->readSetBegin($_etype1162, $_size1159);
              for ($_i1163 = 0; $_i1163 < $_size1159; ++$_i1163)
              {
                $elem1164 = null;
                $elem1164 = new \concourse\thrift\data\TObject();
                $xfer += $elem1164->read($input);
                if (is_scalar($elem1164)) {
                  $val1158 []= $elem1164;
                } else {
                  $val1158 []= $elem1164;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1157) && !is_integer($key1157)) ? serialize($key1157) : $key1157] = $val1158;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1165 => $viter1166)
          {
            $xfer += $output->writeI64($kiter1165);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1166));
              {
                foreach ($viter1166 as $iter1167 => $iter1168)
                {
                  if (is_scalar($iter1168)) {
                  $xfer += $iter1167->write($output);
                  } else {
                  $xfer += $iter1168->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1169 = 0;
            $_etype1172 = 0;
            $xfer += $input->readListBegin($_etype1172, $_size1169);
            for ($_i1173 = 0; $_i1173 < $_size1169; ++$_i1173)
            {
              $elem1174 = null;
              $xfer += $input->readString($elem1174);
              $this->keys []= $elem1174;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1175 = 0;
            $_etype1178 = 0;
            $xfer += $input->readListBegin($_etype1178, $_size1175);
            for ($_i1179 = 0; $_i1179 < $_size1175; ++$_i1179)
            {
              $elem1180 = null;
              $xfer += $input->readI64($elem1180);
              $this->records []= $elem1180;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1181)
          {
            $xfer += $output->writeString($iter1181);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1182)
          {
            $xfer += $output->writeI64($iter1182);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1183 = 0;
            $_ktype1184 = 0;
            $_vtype1185 = 0;
            $xfer += $input->readMapBegin($_ktype1184, $_vtype1185, $_size1183);
            for ($_i1187 = 0; $_i1187 < $_size1183; ++$_i1187)
            {
              $key1188 = 0;
              $val1189 = array();
              $xfer += $input->readI64($key1188);
              $val1189 = array();
              $_size1190 = 0;
              $_ktype1191 = 0;
              $_vtype1192 = 0;
              $xfer += $input->readMapBegin($_ktype1191, $_vtype1192, $_size1190);
              for ($_i1194 = 0; $_i1194 < $_size1190; ++$_i1194)
              {
                $key1195 = '';
                $val1196 = array();
                $xfer += $input->readString($key1195);
                $val1196 = array();
                $_size1197 = 0;
                $_etype1200 = 0;
                $xfer += $input->readSetBegin($_etype1200, $_size1197);
                for ($_i1201 = 0; $_i1201 < $_size1197; ++$_i1201)
                {
                  $elem1202 = null;
                  $elem1202 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1202->read($input);
                  if (is_scalar($elem1202)) {
                    $val1196 []= $elem1202;
                  } else {
                    $val1196 []= $elem1202;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1189[(!is_string($key1195) && !is_integer($key1195)) ? serialize($key1195) : $key1195] = $val1196;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1188) && !is_integer($key1188)) ? serialize($key1188) : $key1188] = $val1189;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1203 => $viter1204)
          {
            $xfer += $output->writeI64($kiter1203);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1204));
              {
                foreach ($viter1204 as $kiter1205 => $viter1206)
                {
                  $xfer += $output->writeString($kiter1205);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1206));
                    {
                      foreach ($viter1206 as $iter1207 => $iter1208)
                      {
                        if (is_scalar($iter1208)) {
                        $xfer += $iter1207->write($output);
                        } else {
                        $xfer += $iter1208->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1209 = 0;
            $_etype1212 = 0;
            $xfer += $input->readListBegin($_etype1212, $_size1209);
            for ($_i1213 = 0; $_i1213 < $_size1209; ++$_i1213)
            {
              $elem1214 = null;
              $xfer += $input->readString($elem1214);
              $this->keys []= $elem1214;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1215 = 0;
            $_etype1218 = 0;
            $xfer += $input->readListBegin($_etype1218, $_size1215);
            for ($_i1219 = 0; $_i1219 < $_size1215; ++$_i1219)
            {
              $elem1220 = null;
              $xfer += $input->readI64($elem1220);
              $this->records []= $elem1220;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1221)
          {
            $xfer += $output->writeString($iter1221);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1222)
          {
            $xfer += $output->writeI64($iter1222);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1223 = 0;
            $_ktype1224 = 0;
            $_vtype1225 = 0;
            $xfer += $input->readMapBegin($_ktype1224, $_vtype1225, $_size1223);
            for ($_i1227 = 0; $_i1227 < $_size1223; ++$_i1227)
            {
              $key1228 = 0;
              $val1229 = array();
              $xfer += $input->readI64($key1228);
              $val1229 = array();
              $_size1230 = 0;
              $_ktype1231 = 0;
              $_vtype1232 = 0;
              $xfer += $input->readMapBegin($_ktype1231, $_vtype1232, $_size1230);
              for ($_i1234 = 0; $_i1234 < $_size1230; ++$_i1234)
              {
                $key1235 = '';
                $val1236 = array();
                $xfer += $input->readString($key1235);
                $val1236 = array();
                $_size1237 = 0;
                $_etype1240 = 0;
                $xfer += $input->readSetBegin($_etype1240, $_size1237);
                for ($_i1241 = 0; $_i1241 < $_size1237; ++$_i1241)
                {
                  $elem1242 = null;
                  $elem1242 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1242->read($input);
                  if (is_scalar($elem1242)) {
                    $val1236 []= $elem1242;
                  } else {
                    $val1236 []= $elem1242;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1229[(!is_string($key1235) && !is_integer($key1235)) ? serialize($key1235) : $key1235] = $val1236;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1228) && !is_integer($key1228)) ? serialize($key1228) : $key1228] = $val1229;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1243 => $viter1244)
          {
            $xfer += $output->writeI64($kiter1243);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1244));
              {
                foreach ($viter1244 as $kiter1245 => $viter1246)
                {
                  $xfer += $output->writeString($kiter1245);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1246));
                    {
                      foreach ($viter1246 as $iter1247 => $iter1248)
                      {
                        if (is_scalar($iter1248)) {
                        $xfer += $iter1247->write($output);
                        } else {
                        $xfer += $iter1248->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteria_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1249 = 0;
            $_ktype1250 = 0;
            $_vtype1251 = 0;
            $xfer += $input->readMapBegin($_ktype1250, $_vtype1251, $_size1249);
            for ($_i1253 = 0; $_i1253 < $_size1249; ++$_i1253)
            {
              $key1254 = 0;
              $val1255 = array();
              $xfer += $input->readI64($key1254);
              $val1255 = array();
              $_size1256 = 0;
              $_ktype1257 = 0;
              $_vtype1258 = 0;
              $xfer += $input->readMapBegin($_ktype1257, $_vtype1258, $_size1256);
              for ($_i1260 = 0; $_i1260 < $_size1256; ++$_i1260)
              {
                $key1261 = '';
                $val1262 = array();
                $xfer += $input->readString($key1261);
                $val1262 = array();
                $_size1263 = 0;
                $_etype1266 = 0;
                $xfer += $input->readSetBegin($_etype1266, $_size1263);
                for ($_i1267 = 0; $_i1267 < $_size1263; ++$_i1267)
                {
                  $elem1268 = null;
                  $elem1268 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1268->read($input);
                  if (is_scalar($elem1268)) {
                    $val1262 []= $elem1268;
                  } else {
                    $val1262 []= $elem1268;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1255[(!is_string($key1261) && !is_integer($key1261)) ? serialize($key1261) : $key1261] = $val1262;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1254) && !is_integer($key1254)) ? serialize($key1254) : $key1254] = $val1255;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1269 => $viter1270)
          {
            $xfer += $output->writeI64($kiter1269);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1270));
              {
                foreach ($viter1270 as $kiter1271 => $viter1272)
                {
                  $xfer += $output->writeString($kiter1271);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1272));
                    {
                      foreach ($viter1272 as $iter1273 => $iter1274)
                      {
                        if (is_scalar($iter1274)) {
                        $xfer += $iter1273->write($output);
                        } else {
                        $xfer += $iter1274->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1275 = 0;
            $_ktype1276 = 0;
            $_vtype1277 = 0;
            $xfer += $input->readMapBegin($_ktype1276, $_vtype1277, $_size1275);
            for ($_i1279 = 0; $_i1279 < $_size1275; ++$_i1279)
            {
              $key1280 = 0;
              $val1281 = array();
              $xfer += $input->readI64($key1280);
              $val1281 = array();
              $_size1282 = 0;
              $_ktype1283 = 0;
              $_vtype1284 = 0;
              $xfer += $input->readMapBegin($_ktype1283, $_vtype1284, $_size1282);
              for ($_i1286 = 0; $_i1286 < $_size1282; ++$_i1286)
              {
                $key1287 = '';
                $val1288 = array();
                $xfer += $input->readString($key1287);
                $val1288 = array();
                $_size1289 = 0;
                $_etype1292 = 0;
                $xfer += $input->readSetBegin($_etype1292, $_size1289);
                for ($_i1293 = 0; $_i1293 < $_size1289; ++$_i1293)
                {
                  $elem1294 = null;
                  $elem1294 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1294->read($input);
                  if (is_scalar($elem1294)) {
                    $val1288 []= $elem1294;
                  } else {
                    $val1288 []= $elem1294;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1281[(!is_string($key1287) && !is_integer($key1287)) ? serialize($key1287) : $key1287] = $val1288;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1280) && !is_integer($key1280)) ? serialize($key1280) : $key1280] = $val1281;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1295 => $viter1296)
          {
            $xfer += $output->writeI64($kiter1295);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1296));
              {
                foreach ($viter1296 as $kiter1297 => $viter1298)
                {
                  $xfer += $output->writeString($kiter1297);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1298));
                    {
                      foreach ($viter1298 as $iter1299 => $iter1300)
                      {
                        if (is_scalar($iter1300)) {
                        $xfer += $iter1299->write($output);
                        } else {
                        $xfer += $iter1300->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTime_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1301 = 0;
            $_ktype1302 = 0;
            $_vtype1303 = 0;
            $xfer += $input->readMapBegin($_ktype1302, $_vtype1303, $_size1301);
            for ($_i1305 = 0; $_i1305 < $_size1301; ++$_i1305)
            {
              $key1306 = 0;
              $val1307 = array();
              $xfer += $input->readI64($key1306);
              $val1307 = array();
              $_size1308 = 0;
              $_ktype1309 = 0;
              $_vtype1310 = 0;
              $xfer += $input->readMapBegin($_ktype1309, $_vtype1310, $_size1308);
              for ($_i1312 = 0; $_i1312 < $_size1308; ++$_i1312)
              {
                $key1313 = '';
                $val1314 = array();
                $xfer += $input->readString($key1313);
                $val1314 = array();
                $_size1315 = 0;
                $_etype1318 = 0;
                $xfer += $input->readSetBegin($_etype1318, $_size1315);
                for ($_i1319 = 0; $_i1319 < $_size1315; ++$_i1319)
                {
                  $elem1320 = null;
                  $elem1320 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1320->read($input);
                  if (is_scalar($elem1320)) {
                    $val1314 []= $elem1320;
                  } else {
                    $val1314 []= $elem1320;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1307[(!is_string($key1313) && !is_integer($key1313)) ? serialize($key1313) : $key1313] = $val1314;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1306) && !is_integer($key1306)) ? serialize($key1306) : $key1306] = $val1307;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1321 => $viter1322)
          {
            $xfer += $output->writeI64($kiter1321);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1322));
              {
                foreach ($viter1322 as $kiter1323 => $viter1324)
                {
                  $xfer += $output->writeString($kiter1323);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1324));
                    {
                      foreach ($viter1324 as $iter1325 => $iter1326)
                      {
                        if (is_scalar($iter1326)) {
                        $xfer += $iter1325->write($output);
                        } else {
                        $xfer += $iter1326->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTimestr_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1327 = 0;
            $_ktype1328 = 0;
            $_vtype1329 = 0;
            $xfer += $input->readMapBegin($_ktype1328, $_vtype1329, $_size1327);
            for ($_i1331 = 0; $_i1331 < $_size1327; ++$_i1331)
            {
              $key1332 = 0;
              $val1333 = array();
              $xfer += $input->readI64($key1332);
              $val1333 = array();
              $_size1334 = 0;
              $_ktype1335 = 0;
              $_vtype1336 = 0;
              $xfer += $input->readMapBegin($_ktype1335, $_vtype1336, $_size1334);
              for ($_i1338 = 0; $_i1338 < $_size1334; ++$_i1338)
              {
                $key1339 = '';
                $val1340 = array();
                $xfer += $input->readString($key1339);
                $val1340 = array();
                $_size1341 = 0;
                $_etype1344 = 0;
                $xfer += $input->readSetBegin($_etype1344, $_size1341);
                for ($_i1345 = 0; $_i1345 < $_size1341; ++$_i1345)
                {
                  $elem1346 = null;
                  $elem1346 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1346->read($input);
                  if (is_scalar($elem1346)) {
                    $val1340 []= $elem1346;
                  } else {
                    $val1340 []= $elem1346;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1333[(!is_string($key1339) && !is_integer($key1339)) ? serialize($key1339) : $key1339] = $val1340;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1332) && !is_integer($key1332)) ? serialize($key1332) : $key1332] = $val1333;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1347 => $viter1348)
          {
            $xfer += $output->writeI64($kiter1347);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1348));
              {
                foreach ($viter1348 as $kiter1349 => $viter1350)
                {
                  $xfer += $output->writeString($kiter1349);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1350));
                    {
                      foreach ($viter1350 as $iter1351 => $iter1352)
                      {
                        if (is_scalar($iter1352)) {
                        $xfer += $iter1351->write($output);
                        } else {
                        $xfer += $iter1352->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTime_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1353 = 0;
            $_ktype1354 = 0;
            $_vtype1355 = 0;
            $xfer += $input->readMapBegin($_ktype1354, $_vtype1355, $_size1353);
            for ($_i1357 = 0; $_i1357 < $_size1353; ++$_i1357)
            {
              $key1358 = 0;
              $val1359 = array();
              $xfer += $input->readI64($key1358);
              $val1359 = array();
              $_size1360 = 0;
              $_ktype1361 = 0;
              $_vtype1362 = 0;
              $xfer += $input->readMapBegin($_ktype1361, $_vtype1362, $_size1360);
              for ($_i1364 = 0; $_i1364 < $_size1360; ++$_i1364)
              {
                $key1365 = '';
                $val1366 = array();
                $xfer += $input->readString($key1365);
                $val1366 = array();
                $_size1367 = 0;
                $_etype1370 = 0;
                $xfer += $input->readSetBegin($_etype1370, $_size1367);
                for ($_i1371 = 0; $_i1371 < $_size1367; ++$_i1371)
                {
                  $elem1372 = null;
                  $elem1372 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1372->read($input);
                  if (is_scalar($elem1372)) {
                    $val1366 []= $elem1372;
                  } else {
                    $val1366 []= $elem1372;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1359[(!is_string($key1365) && !is_integer($key1365)) ? serialize($key1365) : $key1365] = $val1366;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1358) && !is_integer($key1358)) ? serialize($key1358) : $key1358] = $val1359;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1373 => $viter1374)
          {
            $xfer += $output->writeI64($kiter1373);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1374));
              {
                foreach ($viter1374 as $kiter1375 => $viter1376)
                {
                  $xfer += $output->writeString($kiter1375);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1376));
                    {
                      foreach ($viter1376 as $iter1377 => $iter1378)
                      {
                        if (is_scalar($iter1378)) {
                        $xfer += $iter1377->write($output);
                        } else {
                        $xfer += $iter1378->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTimestr_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1379 = 0;
            $_ktype1380 = 0;
            $_vtype1381 = 0;
            $xfer += $input->readMapBegin($_ktype1380, $_vtype1381, $_size1379);
            for ($_i1383 = 0; $_i1383 < $_size1379; ++$_i1383)
            {
              $key1384 = 0;
              $val1385 = array();
              $xfer += $input->readI64($key1384);
              $val1385 = array();
              $_size1386 = 0;
              $_ktype1387 = 0;
              $_vtype1388 = 0;
              $xfer += $input->readMapBegin($_ktype1387, $_vtype1388, $_size1386);
              for ($_i1390 = 0; $_i1390 < $_size1386; ++$_i1390)
              {
                $key1391 = '';
                $val1392 = array();
                $xfer += $input->readString($key1391);
                $val1392 = array();
                $_size1393 = 0;
                $_etype1396 = 0;
                $xfer += $input->readSetBegin($_etype1396, $_size1393);
                for ($_i1397 = 0; $_i1397 < $_size1393; ++$_i1397)
                {
                  $elem1398 = null;
                  $elem1398 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1398->read($input);
                  if (is_scalar($elem1398)) {
                    $val1392 []= $elem1398;
                  } else {
                    $val1392 []= $elem1398;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1385[(!is_string($key1391) && !is_integer($key1391)) ? serialize($key1391) : $key1391] = $val1392;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1384) && !is_integer($key1384)) ? serialize($key1384) : $key1384] = $val1385;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1399 => $viter1400)
          {
            $xfer += $output->writeI64($kiter1399);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1400));
              {
                foreach ($viter1400 as $kiter1401 => $viter1402)
                {
                  $xfer += $output->writeString($kiter1401);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1402));
                    {
                      foreach ($viter1402 as $iter1403 => $iter1404)
                      {
                        if (is_scalar($iter1404)) {
                        $xfer += $iter1403->write($output);
                        } else {
                        $xfer += $iter1404->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteria_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteria_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1405 = 0;
            $_ktype1406 = 0;
            $_vtype1407 = 0;
            $xfer += $input->readMapBegin($_ktype1406, $_vtype1407, $_size1405);
            for ($_i1409 = 0; $_i1409 < $_size1405; ++$_i1409)
            {
              $key1410 = 0;
              $val1411 = array();
              $xfer += $input->readI64($key1410);
              $val1411 = array();
              $_size1412 = 0;
              $_etype1415 = 0;
              $xfer += $input->readSetBegin($_etype1415, $_size1412);
              for ($_i1416 = 0; $_i1416 < $_size1412; ++$_i1416)
              {
                $elem1417 = null;
                $elem1417 = new \concourse\thrift\data\TObject();
                $xfer += $elem1417->read($input);
                if (is_scalar($elem1417)) {
                  $val1411 []= $elem1417;
                } else {
                  $val1411 []= $elem1417;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1410) && !is_integer($key1410)) ? serialize($key1410) : $key1410] = $val1411;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1418 => $viter1419)
          {
            $xfer += $output->writeI64($kiter1418);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1419));
              {
                foreach ($viter1419 as $iter1420 => $iter1421)
                {
                  if (is_scalar($iter1421)) {
                  $xfer += $iter1420->write($output);
                  } else {
                  $xfer += $iter1421->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCcl_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1422 = 0;
            $_ktype1423 = 0;
            $_vtype1424 = 0;
            $xfer += $input->readMapBegin($_ktype1423, $_vtype1424, $_size1422);
            for ($_i1426 = 0; $_i1426 < $_size1422; ++$_i1426)
            {
              $key1427 = 0;
              $val1428 = array();
              $xfer += $input->readI64($key1427);
              $val1428 = array();
              $_size1429 = 0;
              $_etype1432 = 0;
              $xfer += $input->readSetBegin($_etype1432, $_size1429);
              for ($_i1433 = 0; $_i1433 < $_size1429; ++$_i1433)
              {
                $elem1434 = null;
                $elem1434 = new \concourse\thrift\data\TObject();
                $xfer += $elem1434->read($input);
                if (is_scalar($elem1434)) {
                  $val1428 []= $elem1434;
                } else {
                  $val1428 []= $elem1434;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1427) && !is_integer($key1427)) ? serialize($key1427) : $key1427] = $val1428;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1435 => $viter1436)
          {
            $xfer += $output->writeI64($kiter1435);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1436));
              {
                foreach ($viter1436 as $iter1437 => $iter1438)
                {
                  if (is_scalar($iter1438)) {
                  $xfer += $iter1437->write($output);
                  } else {
                  $xfer += $iter1438->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1439 = 0;
            $_ktype1440 = 0;
            $_vtype1441 = 0;
            $xfer += $input->readMapBegin($_ktype1440, $_vtype1441, $_size1439);
            for ($_i1443 = 0; $_i1443 < $_size1439; ++$_i1443)
            {
              $key1444 = 0;
              $val1445 = array();
              $xfer += $input->readI64($key1444);
              $val1445 = array();
              $_size1446 = 0;
              $_etype1449 = 0;
              $xfer += $input->readSetBegin($_etype1449, $_size1446);
              for ($_i1450 = 0; $_i1450 < $_size1446; ++$_i1450)
              {
                $elem1451 = null;
                $elem1451 = new \concourse\thrift\data\TObject();
                $xfer += $elem1451->read($input);
                if (is_scalar($elem1451)) {
                  $val1445 []= $elem1451;
                } else {
                  $val1445 []= $elem1451;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1444) && !is_integer($key1444)) ? serialize($key1444) : $key1444] = $val1445;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1452 => $viter1453)
          {
            $xfer += $output->writeI64($kiter1452);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1453));
              {
                foreach ($viter1453 as $iter1454 => $iter1455)
                {
                  if (is_scalar($iter1455)) {
                  $xfer += $iter1454->write($output);
                  } else {
                  $xfer += $iter1455->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1456 = 0;
            $_ktype1457 = 0;
            $_vtype1458 = 0;
            $xfer += $input->readMapBegin($_ktype1457, $_vtype1458, $_size1456);
            for ($_i1460 = 0; $_i1460 < $_size1456; ++$_i1460)
            {
              $key1461 = 0;
              $val1462 = array();
              $xfer += $input->readI64($key1461);
              $val1462 = array();
              $_size1463 = 0;
              $_etype1466 = 0;
              $xfer += $input->readSetBegin($_etype1466, $_size1463);
              for ($_i1467 = 0; $_i1467 < $_size1463; ++$_i1467)
              {
                $elem1468 = null;
                $elem1468 = new \concourse\thrift\data\TObject();
                $xfer += $elem1468->read($input);
                if (is_scalar($elem1468)) {
                  $val1462 []= $elem1468;
                } else {
                  $val1462 []= $elem1468;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1461) && !is_integer($key1461)) ? serialize($key1461) : $key1461] = $val1462;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1469 => $viter1470)
          {
            $xfer += $output->writeI64($kiter1469);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1470));
              {
                foreach ($viter1470 as $iter1471 => $iter1472)
                {
                  if (is_scalar($iter1472)) {
                  $xfer += $iter1471->write($output);
                  } else {
                  $xfer += $iter1472->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1473 = 0;
            $_ktype1474 = 0;
            $_vtype1475 = 0;
            $xfer += $input->readMapBegin($_ktype1474, $_vtype1475, $_size1473);
            for ($_i1477 = 0; $_i1477 < $_size1473; ++$_i1477)
            {
              $key1478 = 0;
              $val1479 = array();
              $xfer += $input->readI64($key1478);
              $val1479 = array();
              $_size1480 = 0;
              $_etype1483 = 0;
              $xfer += $input->readSetBegin($_etype1483, $_size1480);
              for ($_i1484 = 0; $_i1484 < $_size1480; ++$_i1484)
              {
                $elem1485 = null;
                $elem1485 = new \concourse\thrift\data\TObject();
                $xfer += $elem1485->read($input);
                if (is_scalar($elem1485)) {
                  $val1479 []= $elem1485;
                } else {
                  $val1479 []= $elem1485;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1478) && !is_integer($key1478)) ? serialize($key1478) : $key1478] = $val1479;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1486 => $viter1487)
          {
            $xfer += $output->writeI64($kiter1486);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1487));
              {
                foreach ($viter1487 as $iter1488 => $iter1489)
                {
                  if (is_scalar($iter1489)) {
                  $xfer += $iter1488->write($output);
                  } else {
                  $xfer += $iter1489->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1490 = 0;
            $_ktype1491 = 0;
            $_vtype1492 = 0;
            $xfer += $input->readMapBegin($_ktype1491, $_vtype1492, $_size1490);
            for ($_i1494 = 0; $_i1494 < $_size1490; ++$_i1494)
            {
              $key1495 = 0;
              $val1496 = array();
              $xfer += $input->readI64($key1495);
              $val1496 = array();
              $_size1497 = 0;
              $_etype1500 = 0;
              $xfer += $input->readSetBegin($_etype1500, $_size1497);
              for ($_i1501 = 0; $_i1501 < $_size1497; ++$_i1501)
              {
                $elem1502 = null;
                $elem1502 = new \concourse\thrift\data\TObject();
                $xfer += $elem1502->read($input);
                if (is_scalar($elem1502)) {
                  $val1496 []= $elem1502;
                } else {
                  $val1496 []= $elem1502;
                }
              }
              $xfer += $input->readSetEnd();
              $this->success[(!is_string($key1495) && !is_integer($key1495)) ? serialize($key1495) : $key1495] = $val1496;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1503 => $viter1504)
          {
            $xfer += $output->writeI64($kiter1503);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1504));
              {
                foreach ($viter1504 as $iter1505 => $iter1506)
                {
                  if (is_scalar($iter1506)) {
                  $xfer += $iter1505->write($output);
                  } else {
                  $xfer += $iter1506->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteria_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1507 = 0;
            $_etype1510 = 0;
            $xfer += $input->readListBegin($_etype1510, $_size1507);
            for ($_i1511 = 0; $_i1511 < $_size1507; ++$_i1511)
            {
              $elem1512 = null;
              $xfer += $input->readString($elem1512);
              $this->keys []= $elem1512;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteria_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1513)
          {
            $xfer += $output->writeString($iter1513);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1514 = 0;
            $_ktype1515 = 0;
            $_vtype1516 = 0;
            $xfer += $input->readMapBegin($_ktype1515, $_vtype1516, $_size1514);
            for ($_i1518 = 0; $_i1518 < $_size1514; ++$_i1518)
            {
              $key1519 = 0;
              $val1520 = array();
              $xfer += $input->readI64($key1519);
              $val1520 = array();
              $_size1521 = 0;
              $_ktype1522 = 0;
              $_vtype1523 = 0;
              $xfer += $input->readMapBegin($_ktype1522, $_vtype1523, $_size1521);
              for ($_i1525 = 0; $_i1525 < $_size1521; ++$_i1525)
              {
                $key1526 = '';
                $val1527 = array();
                $xfer += $input->readString($key1526);
                $val1527 = array();
                $_size1528 = 0;
                $_etype1531 = 0;
                $xfer += $input->readSetBegin($_etype1531, $_size1528);
                for ($_i1532 = 0; $_i1532 < $_size1528; ++$_i1532)
                {
                  $elem1533 = null;
                  $elem1533 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1533->read($input);
                  if (is_scalar($elem1533)) {
                    $val1527 []= $elem1533;
                  } else {
                    $val1527 []= $elem1533;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1520[(!is_string($key1526) && !is_integer($key1526)) ? serialize($key1526) : $key1526] = $val1527;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1519) && !is_integer($key1519)) ? serialize($key1519) : $key1519] = $val1520;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1534 => $viter1535)
          {
            $xfer += $output->writeI64($kiter1534);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1535));
              {
                foreach ($viter1535 as $kiter1536 => $viter1537)
                {
                  $xfer += $output->writeString($kiter1536);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1537));
                    {
                      foreach ($viter1537 as $iter1538 => $iter1539)
                      {
                        if (is_scalar($iter1539)) {
                        $xfer += $iter1538->write($output);
                        } else {
                        $xfer += $iter1539->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCcl_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1540 = 0;
            $_etype1543 = 0;
            $xfer += $input->readListBegin($_etype1543, $_size1540);
            for ($_i1544 = 0; $_i1544 < $_size1540; ++$_i1544)
            {
              $elem1545 = null;
              $xfer += $input->readString($elem1545);
              $this->keys []= $elem1545;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCcl_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1546)
          {
            $xfer += $output->writeString($iter1546);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1547 = 0;
            $_ktype1548 = 0;
            $_vtype1549 = 0;
            $xfer += $input->readMapBegin($_ktype1548, $_vtype1549, $_size1547);
            for ($_i1551 = 0; $_i1551 < $_size1547; ++$_i1551)
            {
              $key1552 = 0;
              $val1553 = array();
              $xfer += $input->readI64($key1552);
              $val1553 = array();
              $_size1554 = 0;
              $_ktype1555 = 0;
              $_vtype1556 = 0;
              $xfer += $input->readMapBegin($_ktype1555, $_vtype1556, $_size1554);
              for ($_i1558 = 0; $_i1558 < $_size1554; ++$_i1558)
              {
                $key1559 = '';
                $val1560 = array();
                $xfer += $input->readString($key1559);
                $val1560 = array();
                $_size1561 = 0;
                $_etype1564 = 0;
                $xfer += $input->readSetBegin($_etype1564, $_size1561);
                for ($_i1565 = 0; $_i1565 < $_size1561; ++$_i1565)
                {
                  $elem1566 = null;
                  $elem1566 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1566->read($input);
                  if (is_scalar($elem1566)) {
                    $val1560 []= $elem1566;
                  } else {
                    $val1560 []= $elem1566;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1553[(!is_string($key1559) && !is_integer($key1559)) ? serialize($key1559) : $key1559] = $val1560;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1552) && !is_integer($key1552)) ? serialize($key1552) : $key1552] = $val1553;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1567 => $viter1568)
          {
            $xfer += $output->writeI64($kiter1567);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1568));
              {
                foreach ($viter1568 as $kiter1569 => $viter1570)
                {
                  $xfer += $output->writeString($kiter1569);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1570));
                    {
                      foreach ($viter1570 as $iter1571 => $iter1572)
                      {
                        if (is_scalar($iter1572)) {
                        $xfer += $iter1571->write($output);
                        } else {
                        $xfer += $iter1572->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1573 = 0;
            $_etype1576 = 0;
            $xfer += $input->readListBegin($_etype1576, $_size1573);
            for ($_i1577 = 0; $_i1577 < $_size1573; ++$_i1577)
            {
              $elem1578 = null;
              $xfer += $input->readString($elem1578);
              $this->keys []= $elem1578;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1579)
          {
            $xfer += $output->writeString($iter1579);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1580 = 0;
            $_ktype1581 = 0;
            $_vtype1582 = 0;
            $xfer += $input->readMapBegin($_ktype1581, $_vtype1582, $_size1580);
            for ($_i1584 = 0; $_i1584 < $_size1580; ++$_i1584)
            {
              $key1585 = 0;
              $val1586 = array();
              $xfer += $input->readI64($key1585);
              $val1586 = array();
              $_size1587 = 0;
              $_ktype1588 = 0;
              $_vtype1589 = 0;
              $xfer += $input->readMapBegin($_ktype1588, $_vtype1589, $_size1587);
              for ($_i1591 = 0; $_i1591 < $_size1587; ++$_i1591)
              {
                $key1592 = '';
                $val1593 = array();
                $xfer += $input->readString($key1592);
                $val1593 = array();
                $_size1594 = 0;
                $_etype1597 = 0;
                $xfer += $input->readSetBegin($_etype1597, $_size1594);
                for ($_i1598 = 0; $_i1598 < $_size1594; ++$_i1598)
                {
                  $elem1599 = null;
                  $elem1599 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1599->read($input);
                  if (is_scalar($elem1599)) {
                    $val1593 []= $elem1599;
                  } else {
                    $val1593 []= $elem1599;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1586[(!is_string($key1592) && !is_integer($key1592)) ? serialize($key1592) : $key1592] = $val1593;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1585) && !is_integer($key1585)) ? serialize($key1585) : $key1585] = $val1586;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1600 => $viter1601)
          {
            $xfer += $output->writeI64($kiter1600);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1601));
              {
                foreach ($viter1601 as $kiter1602 => $viter1603)
                {
                  $xfer += $output->writeString($kiter1602);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1603));
                    {
                      foreach ($viter1603 as $iter1604 => $iter1605)
                      {
                        if (is_scalar($iter1605)) {
                        $xfer += $iter1604->write($output);
                        } else {
                        $xfer += $iter1605->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1606 = 0;
            $_etype1609 = 0;
            $xfer += $input->readListBegin($_etype1609, $_size1606);
            for ($_i1610 = 0; $_i1610 < $_size1606; ++$_i1610)
            {
              $elem1611 = null;
              $xfer += $input->readString($elem1611);
              $this->keys []= $elem1611;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1612)
          {
            $xfer += $output->writeString($iter1612);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1613 = 0;
            $_ktype1614 = 0;
            $_vtype1615 = 0;
            $xfer += $input->readMapBegin($_ktype1614, $_vtype1615, $_size1613);
            for ($_i1617 = 0; $_i1617 < $_size1613; ++$_i1617)
            {
              $key1618 = 0;
              $val1619 = array();
              $xfer += $input->readI64($key1618);
              $val1619 = array();
              $_size1620 = 0;
              $_ktype1621 = 0;
              $_vtype1622 = 0;
              $xfer += $input->readMapBegin($_ktype1621, $_vtype1622, $_size1620);
              for ($_i1624 = 0; $_i1624 < $_size1620; ++$_i1624)
              {
                $key1625 = '';
                $val1626 = array();
                $xfer += $input->readString($key1625);
                $val1626 = array();
                $_size1627 = 0;
                $_etype1630 = 0;
                $xfer += $input->readSetBegin($_etype1630, $_size1627);
                for ($_i1631 = 0; $_i1631 < $_size1627; ++$_i1631)
                {
                  $elem1632 = null;
                  $elem1632 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1632->read($input);
                  if (is_scalar($elem1632)) {
                    $val1626 []= $elem1632;
                  } else {
                    $val1626 []= $elem1632;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1619[(!is_string($key1625) && !is_integer($key1625)) ? serialize($key1625) : $key1625] = $val1626;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1618) && !is_integer($key1618)) ? serialize($key1618) : $key1618] = $val1619;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1633 => $viter1634)
          {
            $xfer += $output->writeI64($kiter1633);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1634));
              {
                foreach ($viter1634 as $kiter1635 => $viter1636)
                {
                  $xfer += $output->writeString($kiter1635);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1636));
                    {
                      foreach ($viter1636 as $iter1637 => $iter1638)
                      {
                        if (is_scalar($iter1638)) {
                        $xfer += $iter1637->write($output);
                        } else {
                        $xfer += $iter1638->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1639 = 0;
            $_etype1642 = 0;
            $xfer += $input->readListBegin($_etype1642, $_size1639);
            for ($_i1643 = 0; $_i1643 < $_size1639; ++$_i1643)
            {
              $elem1644 = null;
              $xfer += $input->readString($elem1644);
              $this->keys []= $elem1644;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1645)
          {
            $xfer += $output->writeString($iter1645);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1646 = 0;
            $_ktype1647 = 0;
            $_vtype1648 = 0;
            $xfer += $input->readMapBegin($_ktype1647, $_vtype1648, $_size1646);
            for ($_i1650 = 0; $_i1650 < $_size1646; ++$_i1650)
            {
              $key1651 = 0;
              $val1652 = array();
              $xfer += $input->readI64($key1651);
              $val1652 = array();
              $_size1653 = 0;
              $_ktype1654 = 0;
              $_vtype1655 = 0;
              $xfer += $input->readMapBegin($_ktype1654, $_vtype1655, $_size1653);
              for ($_i1657 = 0; $_i1657 < $_size1653; ++$_i1657)
              {
                $key1658 = '';
                $val1659 = array();
                $xfer += $input->readString($key1658);
                $val1659 = array();
                $_size1660 = 0;
                $_etype1663 = 0;
                $xfer += $input->readSetBegin($_etype1663, $_size1660);
                for ($_i1664 = 0; $_i1664 < $_size1660; ++$_i1664)
                {
                  $elem1665 = null;
                  $elem1665 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1665->read($input);
                  if (is_scalar($elem1665)) {
                    $val1659 []= $elem1665;
                  } else {
                    $val1659 []= $elem1665;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1652[(!is_string($key1658) && !is_integer($key1658)) ? serialize($key1658) : $key1658] = $val1659;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1651) && !is_integer($key1651)) ? serialize($key1651) : $key1651] = $val1652;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1666 => $viter1667)
          {
            $xfer += $output->writeI64($kiter1666);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1667));
              {
                foreach ($viter1667 as $kiter1668 => $viter1669)
                {
                  $xfer += $output->writeString($kiter1668);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1669));
                    {
                      foreach ($viter1669 as $iter1670 => $iter1671)
                      {
                        if (is_scalar($iter1671)) {
                        $xfer += $iter1670->write($output);
                        } else {
                        $xfer += $iter1671->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1672 = 0;
            $_etype1675 = 0;
            $xfer += $input->readListBegin($_etype1675, $_size1672);
            for ($_i1676 = 0; $_i1676 < $_size1672; ++$_i1676)
            {
              $elem1677 = null;
              $xfer += $input->readString($elem1677);
              $this->keys []= $elem1677;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1678)
          {
            $xfer += $output->writeString($iter1678);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\concourse\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1679 = 0;
            $_ktype1680 = 0;
            $_vtype1681 = 0;
            $xfer += $input->readMapBegin($_ktype1680, $_vtype1681, $_size1679);
            for ($_i1683 = 0; $_i1683 < $_size1679; ++$_i1683)
            {
              $key1684 = 0;
              $val1685 = array();
              $xfer += $input->readI64($key1684);
              $val1685 = array();
              $_size1686 = 0;
              $_ktype1687 = 0;
              $_vtype1688 = 0;
              $xfer += $input->readMapBegin($_ktype1687, $_vtype1688, $_size1686);
              for ($_i1690 = 0; $_i1690 < $_size1686; ++$_i1690)
              {
                $key1691 = '';
                $val1692 = array();
                $xfer += $input->readString($key1691);
                $val1692 = array();
                $_size1693 = 0;
                $_etype1696 = 0;
                $xfer += $input->readSetBegin($_etype1696, $_size1693);
                for ($_i1697 = 0; $_i1697 < $_size1693; ++$_i1697)
                {
                  $elem1698 = null;
                  $elem1698 = new \concourse\thrift\data\TObject();
                  $xfer += $elem1698->read($input);
                  if (is_scalar($elem1698)) {
                    $val1692 []= $elem1698;
                  } else {
                    $val1692 []= $elem1698;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1685[(!is_string($key1691) && !is_integer($key1691)) ? serialize($key1691) : $key1691] = $val1692;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1684) && !is_integer($key1684)) ? serialize($key1684) : $key1684] = $val1685;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1699 => $viter1700)
          {
            $xfer += $output->writeI64($kiter1699);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1700));
              {
                foreach ($viter1700 as $kiter1701 => $viter1702)
                {
                  $xfer += $output->writeString($kiter1701);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1702));
                    {
                      foreach ($viter1702 as $iter1703 => $iter1704)
                      {
                        if (is_scalar($iter1704)) {
                        $xfer += $iter1703->write($output);
                        } else {
                        $xfer += $iter1704->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \concourse\thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecord_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \concourse\thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTime_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \concourse\thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1705 = 0;
            $_etype1708 = 0;
            $xfer += $input->readListBegin($_etype1708, $_size1705);
            for ($_i1709 = 0; $_i1709 < $_size1705; ++$_i1709)
            {
              $elem1710 = null;
              $xfer += $input->readString($elem1710);
              $this->keys []= $elem1710;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1711)
          {
            $xfer += $output->writeString($iter1711);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1712 = 0;
            $_ktype1713 = 0;
            $_vtype1714 = 0;
            $xfer += $input->readMapBegin($_ktype1713, $_vtype1714, $_size1712);
            for ($_i1716 = 0; $_i1716 < $_size1712; ++$_i1716)
            {
              $key1717 = '';
              $val1718 = new \concourse\thrift\data\TObject();
              $xfer += $input->readString($key1717);
              $val1718 = new \concourse\thrift\data\TObject();
              $xfer += $val1718->read($input);
              $this->success[(!is_string($key1717) && !is_integer($key1717)) ? serialize($key1717) : $key1717] = $val1718;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1719 => $viter1720)
          {
            $xfer += $output->writeString($kiter1719);
            $xfer += $viter1720->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1721 = 0;
            $_etype1724 = 0;
            $xfer += $input->readListBegin($_etype1724, $_size1721);
            for ($_i1725 = 0; $_i1725 < $_size1721; ++$_i1725)
            {
              $elem1726 = null;
              $xfer += $input->readString($elem1726);
              $this->keys []= $elem1726;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1727)
          {
            $xfer += $output->writeString($iter1727);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1728 = 0;
            $_ktype1729 = 0;
            $_vtype1730 = 0;
            $xfer += $input->readMapBegin($_ktype1729, $_vtype1730, $_size1728);
            for ($_i1732 = 0; $_i1732 < $_size1728; ++$_i1732)
            {
              $key1733 = '';
              $val1734 = new \concourse\thrift\data\TObject();
              $xfer += $input->readString($key1733);
              $val1734 = new \concourse\thrift\data\TObject();
              $xfer += $val1734->read($input);
              $this->success[(!is_string($key1733) && !is_integer($key1733)) ? serialize($key1733) : $key1733] = $val1734;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1735 => $viter1736)
          {
            $xfer += $output->writeString($kiter1735);
            $xfer += $viter1736->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1737 = 0;
            $_etype1740 = 0;
            $xfer += $input->readListBegin($_etype1740, $_size1737);
            for ($_i1741 = 0; $_i1741 < $_size1737; ++$_i1741)
            {
              $elem1742 = null;
              $xfer += $input->readString($elem1742);
              $this->keys []= $elem1742;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1743)
          {
            $xfer += $output->writeString($iter1743);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1744 = 0;
            $_ktype1745 = 0;
            $_vtype1746 = 0;
            $xfer += $input->readMapBegin($_ktype1745, $_vtype1746, $_size1744);
            for ($_i1748 = 0; $_i1748 < $_size1744; ++$_i1748)
            {
              $key1749 = '';
              $val1750 = new \concourse\thrift\data\TObject();
              $xfer += $input->readString($key1749);
              $val1750 = new \concourse\thrift\data\TObject();
              $xfer += $val1750->read($input);
              $this->success[(!is_string($key1749) && !is_integer($key1749)) ? serialize($key1749) : $key1749] = $val1750;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1751 => $viter1752)
          {
            $xfer += $output->writeString($kiter1751);
            $xfer += $viter1752->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1753 = 0;
            $_etype1756 = 0;
            $xfer += $input->readListBegin($_etype1756, $_size1753);
            for ($_i1757 = 0; $_i1757 < $_size1753; ++$_i1757)
            {
              $elem1758 = null;
              $xfer += $input->readString($elem1758);
              $this->keys []= $elem1758;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1759 = 0;
            $_etype1762 = 0;
            $xfer += $input->readListBegin($_etype1762, $_size1759);
            for ($_i1763 = 0; $_i1763 < $_size1759; ++$_i1763)
            {
              $elem1764 = null;
              $xfer += $input->readI64($elem1764);
              $this->records []= $elem1764;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1765)
          {
            $xfer += $output->writeString($iter1765);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1766)
          {
            $xfer += $output->writeI64($iter1766);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1767 = 0;
            $_ktype1768 = 0;
            $_vtype1769 = 0;
            $xfer += $input->readMapBegin($_ktype1768, $_vtype1769, $_size1767);
            for ($_i1771 = 0; $_i1771 < $_size1767; ++$_i1771)
            {
              $key1772 = 0;
              $val1773 = array();
              $xfer += $input->readI64($key1772);
              $val1773 = array();
              $_size1774 = 0;
              $_ktype1775 = 0;
              $_vtype1776 = 0;
              $xfer += $input->readMapBegin($_ktype1775, $_vtype1776, $_size1774);
              for ($_i1778 = 0; $_i1778 < $_size1774; ++$_i1778)
              {
                $key1779 = '';
                $val1780 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1779);
                $val1780 = new \concourse\thrift\data\TObject();
                $xfer += $val1780->read($input);
                $val1773[(!is_string($key1779) && !is_integer($key1779)) ? serialize($key1779) : $key1779] = $val1780;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1772) && !is_integer($key1772)) ? serialize($key1772) : $key1772] = $val1773;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1781 => $viter1782)
          {
            $xfer += $output->writeI64($kiter1781);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1782));
              {
                foreach ($viter1782 as $kiter1783 => $viter1784)
                {
                  $xfer += $output->writeString($kiter1783);
                  $xfer += $viter1784->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1785 = 0;
            $_etype1788 = 0;
            $xfer += $input->readListBegin($_etype1788, $_size1785);
            for ($_i1789 = 0; $_i1789 < $_size1785; ++$_i1789)
            {
              $elem1790 = null;
              $xfer += $input->readI64($elem1790);
              $this->records []= $elem1790;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1791)
          {
            $xfer += $output->writeI64($iter1791);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1792 = 0;
            $_ktype1793 = 0;
            $_vtype1794 = 0;
            $xfer += $input->readMapBegin($_ktype1793, $_vtype1794, $_size1792);
            for ($_i1796 = 0; $_i1796 < $_size1792; ++$_i1796)
            {
              $key1797 = 0;
              $val1798 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key1797);
              $val1798 = new \concourse\thrift\data\TObject();
              $xfer += $val1798->read($input);
              $this->success[(!is_string($key1797) && !is_integer($key1797)) ? serialize($key1797) : $key1797] = $val1798;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1799 => $viter1800)
          {
            $xfer += $output->writeI64($kiter1799);
            $xfer += $viter1800->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1801 = 0;
            $_etype1804 = 0;
            $xfer += $input->readListBegin($_etype1804, $_size1801);
            for ($_i1805 = 0; $_i1805 < $_size1801; ++$_i1805)
            {
              $elem1806 = null;
              $xfer += $input->readI64($elem1806);
              $this->records []= $elem1806;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1807)
          {
            $xfer += $output->writeI64($iter1807);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1808 = 0;
            $_ktype1809 = 0;
            $_vtype1810 = 0;
            $xfer += $input->readMapBegin($_ktype1809, $_vtype1810, $_size1808);
            for ($_i1812 = 0; $_i1812 < $_size1808; ++$_i1812)
            {
              $key1813 = 0;
              $val1814 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key1813);
              $val1814 = new \concourse\thrift\data\TObject();
              $xfer += $val1814->read($input);
              $this->success[(!is_string($key1813) && !is_integer($key1813)) ? serialize($key1813) : $key1813] = $val1814;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1815 => $viter1816)
          {
            $xfer += $output->writeI64($kiter1815);
            $xfer += $viter1816->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1817 = 0;
            $_etype1820 = 0;
            $xfer += $input->readListBegin($_etype1820, $_size1817);
            for ($_i1821 = 0; $_i1821 < $_size1817; ++$_i1821)
            {
              $elem1822 = null;
              $xfer += $input->readI64($elem1822);
              $this->records []= $elem1822;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1823)
          {
            $xfer += $output->writeI64($iter1823);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1824 = 0;
            $_ktype1825 = 0;
            $_vtype1826 = 0;
            $xfer += $input->readMapBegin($_ktype1825, $_vtype1826, $_size1824);
            for ($_i1828 = 0; $_i1828 < $_size1824; ++$_i1828)
            {
              $key1829 = 0;
              $val1830 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key1829);
              $val1830 = new \concourse\thrift\data\TObject();
              $xfer += $val1830->read($input);
              $this->success[(!is_string($key1829) && !is_integer($key1829)) ? serialize($key1829) : $key1829] = $val1830;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1831 => $viter1832)
          {
            $xfer += $output->writeI64($kiter1831);
            $xfer += $viter1832->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1833 = 0;
            $_etype1836 = 0;
            $xfer += $input->readListBegin($_etype1836, $_size1833);
            for ($_i1837 = 0; $_i1837 < $_size1833; ++$_i1837)
            {
              $elem1838 = null;
              $xfer += $input->readString($elem1838);
              $this->keys []= $elem1838;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1839 = 0;
            $_etype1842 = 0;
            $xfer += $input->readListBegin($_etype1842, $_size1839);
            for ($_i1843 = 0; $_i1843 < $_size1839; ++$_i1843)
            {
              $elem1844 = null;
              $xfer += $input->readI64($elem1844);
              $this->records []= $elem1844;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1845)
          {
            $xfer += $output->writeString($iter1845);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1846)
          {
            $xfer += $output->writeI64($iter1846);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1847 = 0;
            $_ktype1848 = 0;
            $_vtype1849 = 0;
            $xfer += $input->readMapBegin($_ktype1848, $_vtype1849, $_size1847);
            for ($_i1851 = 0; $_i1851 < $_size1847; ++$_i1851)
            {
              $key1852 = 0;
              $val1853 = array();
              $xfer += $input->readI64($key1852);
              $val1853 = array();
              $_size1854 = 0;
              $_ktype1855 = 0;
              $_vtype1856 = 0;
              $xfer += $input->readMapBegin($_ktype1855, $_vtype1856, $_size1854);
              for ($_i1858 = 0; $_i1858 < $_size1854; ++$_i1858)
              {
                $key1859 = '';
                $val1860 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1859);
                $val1860 = new \concourse\thrift\data\TObject();
                $xfer += $val1860->read($input);
                $val1853[(!is_string($key1859) && !is_integer($key1859)) ? serialize($key1859) : $key1859] = $val1860;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1852) && !is_integer($key1852)) ? serialize($key1852) : $key1852] = $val1853;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1861 => $viter1862)
          {
            $xfer += $output->writeI64($kiter1861);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1862));
              {
                foreach ($viter1862 as $kiter1863 => $viter1864)
                {
                  $xfer += $output->writeString($kiter1863);
                  $xfer += $viter1864->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1865 = 0;
            $_etype1868 = 0;
            $xfer += $input->readListBegin($_etype1868, $_size1865);
            for ($_i1869 = 0; $_i1869 < $_size1865; ++$_i1869)
            {
              $elem1870 = null;
              $xfer += $input->readString($elem1870);
              $this->keys []= $elem1870;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1871 = 0;
            $_etype1874 = 0;
            $xfer += $input->readListBegin($_etype1874, $_size1871);
            for ($_i1875 = 0; $_i1875 < $_size1871; ++$_i1875)
            {
              $elem1876 = null;
              $xfer += $input->readI64($elem1876);
              $this->records []= $elem1876;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1877)
          {
            $xfer += $output->writeString($iter1877);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1878)
          {
            $xfer += $output->writeI64($iter1878);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1879 = 0;
            $_ktype1880 = 0;
            $_vtype1881 = 0;
            $xfer += $input->readMapBegin($_ktype1880, $_vtype1881, $_size1879);
            for ($_i1883 = 0; $_i1883 < $_size1879; ++$_i1883)
            {
              $key1884 = 0;
              $val1885 = array();
              $xfer += $input->readI64($key1884);
              $val1885 = array();
              $_size1886 = 0;
              $_ktype1887 = 0;
              $_vtype1888 = 0;
              $xfer += $input->readMapBegin($_ktype1887, $_vtype1888, $_size1886);
              for ($_i1890 = 0; $_i1890 < $_size1886; ++$_i1890)
              {
                $key1891 = '';
                $val1892 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1891);
                $val1892 = new \concourse\thrift\data\TObject();
                $xfer += $val1892->read($input);
                $val1885[(!is_string($key1891) && !is_integer($key1891)) ? serialize($key1891) : $key1891] = $val1892;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1884) && !is_integer($key1884)) ? serialize($key1884) : $key1884] = $val1885;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1893 => $viter1894)
          {
            $xfer += $output->writeI64($kiter1893);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1894));
              {
                foreach ($viter1894 as $kiter1895 => $viter1896)
                {
                  $xfer += $output->writeString($kiter1895);
                  $xfer += $viter1896->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteria_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteria_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1897 = 0;
            $_ktype1898 = 0;
            $_vtype1899 = 0;
            $xfer += $input->readMapBegin($_ktype1898, $_vtype1899, $_size1897);
            for ($_i1901 = 0; $_i1901 < $_size1897; ++$_i1901)
            {
              $key1902 = 0;
              $val1903 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key1902);
              $val1903 = new \concourse\thrift\data\TObject();
              $xfer += $val1903->read($input);
              $this->success[(!is_string($key1902) && !is_integer($key1902)) ? serialize($key1902) : $key1902] = $val1903;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1904 => $viter1905)
          {
            $xfer += $output->writeI64($kiter1904);
            $xfer += $viter1905->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteria_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1906 = 0;
            $_ktype1907 = 0;
            $_vtype1908 = 0;
            $xfer += $input->readMapBegin($_ktype1907, $_vtype1908, $_size1906);
            for ($_i1910 = 0; $_i1910 < $_size1906; ++$_i1910)
            {
              $key1911 = 0;
              $val1912 = array();
              $xfer += $input->readI64($key1911);
              $val1912 = array();
              $_size1913 = 0;
              $_ktype1914 = 0;
              $_vtype1915 = 0;
              $xfer += $input->readMapBegin($_ktype1914, $_vtype1915, $_size1913);
              for ($_i1917 = 0; $_i1917 < $_size1913; ++$_i1917)
              {
                $key1918 = '';
                $val1919 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1918);
                $val1919 = new \concourse\thrift\data\TObject();
                $xfer += $val1919->read($input);
                $val1912[(!is_string($key1918) && !is_integer($key1918)) ? serialize($key1918) : $key1918] = $val1919;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1911) && !is_integer($key1911)) ? serialize($key1911) : $key1911] = $val1912;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1920 => $viter1921)
          {
            $xfer += $output->writeI64($kiter1920);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1921));
              {
                foreach ($viter1921 as $kiter1922 => $viter1923)
                {
                  $xfer += $output->writeString($kiter1922);
                  $xfer += $viter1923->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1924 = 0;
            $_ktype1925 = 0;
            $_vtype1926 = 0;
            $xfer += $input->readMapBegin($_ktype1925, $_vtype1926, $_size1924);
            for ($_i1928 = 0; $_i1928 < $_size1924; ++$_i1928)
            {
              $key1929 = 0;
              $val1930 = array();
              $xfer += $input->readI64($key1929);
              $val1930 = array();
              $_size1931 = 0;
              $_ktype1932 = 0;
              $_vtype1933 = 0;
              $xfer += $input->readMapBegin($_ktype1932, $_vtype1933, $_size1931);
              for ($_i1935 = 0; $_i1935 < $_size1931; ++$_i1935)
              {
                $key1936 = '';
                $val1937 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1936);
                $val1937 = new \concourse\thrift\data\TObject();
                $xfer += $val1937->read($input);
                $val1930[(!is_string($key1936) && !is_integer($key1936)) ? serialize($key1936) : $key1936] = $val1937;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1929) && !is_integer($key1929)) ? serialize($key1929) : $key1929] = $val1930;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1938 => $viter1939)
          {
            $xfer += $output->writeI64($kiter1938);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1939));
              {
                foreach ($viter1939 as $kiter1940 => $viter1941)
                {
                  $xfer += $output->writeString($kiter1940);
                  $xfer += $viter1941->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTime_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1942 = 0;
            $_ktype1943 = 0;
            $_vtype1944 = 0;
            $xfer += $input->readMapBegin($_ktype1943, $_vtype1944, $_size1942);
            for ($_i1946 = 0; $_i1946 < $_size1942; ++$_i1946)
            {
              $key1947 = 0;
              $val1948 = array();
              $xfer += $input->readI64($key1947);
              $val1948 = array();
              $_size1949 = 0;
              $_ktype1950 = 0;
              $_vtype1951 = 0;
              $xfer += $input->readMapBegin($_ktype1950, $_vtype1951, $_size1949);
              for ($_i1953 = 0; $_i1953 < $_size1949; ++$_i1953)
              {
                $key1954 = '';
                $val1955 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1954);
                $val1955 = new \concourse\thrift\data\TObject();
                $xfer += $val1955->read($input);
                $val1948[(!is_string($key1954) && !is_integer($key1954)) ? serialize($key1954) : $key1954] = $val1955;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1947) && !is_integer($key1947)) ? serialize($key1947) : $key1947] = $val1948;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1956 => $viter1957)
          {
            $xfer += $output->writeI64($kiter1956);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1957));
              {
                foreach ($viter1957 as $kiter1958 => $viter1959)
                {
                  $xfer += $output->writeString($kiter1958);
                  $xfer += $viter1959->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTimestr_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1960 = 0;
            $_ktype1961 = 0;
            $_vtype1962 = 0;
            $xfer += $input->readMapBegin($_ktype1961, $_vtype1962, $_size1960);
            for ($_i1964 = 0; $_i1964 < $_size1960; ++$_i1964)
            {
              $key1965 = 0;
              $val1966 = array();
              $xfer += $input->readI64($key1965);
              $val1966 = array();
              $_size1967 = 0;
              $_ktype1968 = 0;
              $_vtype1969 = 0;
              $xfer += $input->readMapBegin($_ktype1968, $_vtype1969, $_size1967);
              for ($_i1971 = 0; $_i1971 < $_size1967; ++$_i1971)
              {
                $key1972 = '';
                $val1973 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1972);
                $val1973 = new \concourse\thrift\data\TObject();
                $xfer += $val1973->read($input);
                $val1966[(!is_string($key1972) && !is_integer($key1972)) ? serialize($key1972) : $key1972] = $val1973;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1965) && !is_integer($key1965)) ? serialize($key1965) : $key1965] = $val1966;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1974 => $viter1975)
          {
            $xfer += $output->writeI64($kiter1974);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1975));
              {
                foreach ($viter1975 as $kiter1976 => $viter1977)
                {
                  $xfer += $output->writeString($kiter1976);
                  $xfer += $viter1977->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTime_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1978 = 0;
            $_ktype1979 = 0;
            $_vtype1980 = 0;
            $xfer += $input->readMapBegin($_ktype1979, $_vtype1980, $_size1978);
            for ($_i1982 = 0; $_i1982 < $_size1978; ++$_i1982)
            {
              $key1983 = 0;
              $val1984 = array();
              $xfer += $input->readI64($key1983);
              $val1984 = array();
              $_size1985 = 0;
              $_ktype1986 = 0;
              $_vtype1987 = 0;
              $xfer += $input->readMapBegin($_ktype1986, $_vtype1987, $_size1985);
              for ($_i1989 = 0; $_i1989 < $_size1985; ++$_i1989)
              {
                $key1990 = '';
                $val1991 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key1990);
                $val1991 = new \concourse\thrift\data\TObject();
                $xfer += $val1991->read($input);
                $val1984[(!is_string($key1990) && !is_integer($key1990)) ? serialize($key1990) : $key1990] = $val1991;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key1983) && !is_integer($key1983)) ? serialize($key1983) : $key1983] = $val1984;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1992 => $viter1993)
          {
            $xfer += $output->writeI64($kiter1992);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1993));
              {
                foreach ($viter1993 as $kiter1994 => $viter1995)
                {
                  $xfer += $output->writeString($kiter1994);
                  $xfer += $viter1995->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTimestr_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1996 = 0;
            $_ktype1997 = 0;
            $_vtype1998 = 0;
            $xfer += $input->readMapBegin($_ktype1997, $_vtype1998, $_size1996);
            for ($_i2000 = 0; $_i2000 < $_size1996; ++$_i2000)
            {
              $key2001 = 0;
              $val2002 = array();
              $xfer += $input->readI64($key2001);
              $val2002 = array();
              $_size2003 = 0;
              $_ktype2004 = 0;
              $_vtype2005 = 0;
              $xfer += $input->readMapBegin($_ktype2004, $_vtype2005, $_size2003);
              for ($_i2007 = 0; $_i2007 < $_size2003; ++$_i2007)
              {
                $key2008 = '';
                $val2009 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2008);
                $val2009 = new \concourse\thrift\data\TObject();
                $xfer += $val2009->read($input);
                $val2002[(!is_string($key2008) && !is_integer($key2008)) ? serialize($key2008) : $key2008] = $val2009;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2001) && !is_integer($key2001)) ? serialize($key2001) : $key2001] = $val2002;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2010 => $viter2011)
          {
            $xfer += $output->writeI64($kiter2010);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2011));
              {
                foreach ($viter2011 as $kiter2012 => $viter2013)
                {
                  $xfer += $output->writeString($kiter2012);
                  $xfer += $viter2013->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCcl_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2014 = 0;
            $_ktype2015 = 0;
            $_vtype2016 = 0;
            $xfer += $input->readMapBegin($_ktype2015, $_vtype2016, $_size2014);
            for ($_i2018 = 0; $_i2018 < $_size2014; ++$_i2018)
            {
              $key2019 = 0;
              $val2020 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key2019);
              $val2020 = new \concourse\thrift\data\TObject();
              $xfer += $val2020->read($input);
              $this->success[(!is_string($key2019) && !is_integer($key2019)) ? serialize($key2019) : $key2019] = $val2020;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter2021 => $viter2022)
          {
            $xfer += $output->writeI64($kiter2021);
            $xfer += $viter2022->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2023 = 0;
            $_ktype2024 = 0;
            $_vtype2025 = 0;
            $xfer += $input->readMapBegin($_ktype2024, $_vtype2025, $_size2023);
            for ($_i2027 = 0; $_i2027 < $_size2023; ++$_i2027)
            {
              $key2028 = 0;
              $val2029 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key2028);
              $val2029 = new \concourse\thrift\data\TObject();
              $xfer += $val2029->read($input);
              $this->success[(!is_string($key2028) && !is_integer($key2028)) ? serialize($key2028) : $key2028] = $val2029;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter2030 => $viter2031)
          {
            $xfer += $output->writeI64($kiter2030);
            $xfer += $viter2031->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2032 = 0;
            $_ktype2033 = 0;
            $_vtype2034 = 0;
            $xfer += $input->readMapBegin($_ktype2033, $_vtype2034, $_size2032);
            for ($_i2036 = 0; $_i2036 < $_size2032; ++$_i2036)
            {
              $key2037 = 0;
              $val2038 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key2037);
              $val2038 = new \concourse\thrift\data\TObject();
              $xfer += $val2038->read($input);
              $this->success[(!is_string($key2037) && !is_integer($key2037)) ? serialize($key2037) : $key2037] = $val2038;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter2039 => $viter2040)
          {
            $xfer += $output->writeI64($kiter2039);
            $xfer += $viter2040->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2041 = 0;
            $_ktype2042 = 0;
            $_vtype2043 = 0;
            $xfer += $input->readMapBegin($_ktype2042, $_vtype2043, $_size2041);
            for ($_i2045 = 0; $_i2045 < $_size2041; ++$_i2045)
            {
              $key2046 = 0;
              $val2047 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key2046);
              $val2047 = new \concourse\thrift\data\TObject();
              $xfer += $val2047->read($input);
              $this->success[(!is_string($key2046) && !is_integer($key2046)) ? serialize($key2046) : $key2046] = $val2047;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter2048 => $viter2049)
          {
            $xfer += $output->writeI64($kiter2048);
            $xfer += $viter2049->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2050 = 0;
            $_ktype2051 = 0;
            $_vtype2052 = 0;
            $xfer += $input->readMapBegin($_ktype2051, $_vtype2052, $_size2050);
            for ($_i2054 = 0; $_i2054 < $_size2050; ++$_i2054)
            {
              $key2055 = 0;
              $val2056 = new \concourse\thrift\data\TObject();
              $xfer += $input->readI64($key2055);
              $val2056 = new \concourse\thrift\data\TObject();
              $xfer += $val2056->read($input);
              $this->success[(!is_string($key2055) && !is_integer($key2055)) ? serialize($key2055) : $key2055] = $val2056;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter2057 => $viter2058)
          {
            $xfer += $output->writeI64($kiter2057);
            $xfer += $viter2058->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteria_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2059 = 0;
            $_etype2062 = 0;
            $xfer += $input->readListBegin($_etype2062, $_size2059);
            for ($_i2063 = 0; $_i2063 < $_size2059; ++$_i2063)
            {
              $elem2064 = null;
              $xfer += $input->readString($elem2064);
              $this->keys []= $elem2064;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteria_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2065)
          {
            $xfer += $output->writeString($iter2065);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2066 = 0;
            $_ktype2067 = 0;
            $_vtype2068 = 0;
            $xfer += $input->readMapBegin($_ktype2067, $_vtype2068, $_size2066);
            for ($_i2070 = 0; $_i2070 < $_size2066; ++$_i2070)
            {
              $key2071 = 0;
              $val2072 = array();
              $xfer += $input->readI64($key2071);
              $val2072 = array();
              $_size2073 = 0;
              $_ktype2074 = 0;
              $_vtype2075 = 0;
              $xfer += $input->readMapBegin($_ktype2074, $_vtype2075, $_size2073);
              for ($_i2077 = 0; $_i2077 < $_size2073; ++$_i2077)
              {
                $key2078 = '';
                $val2079 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2078);
                $val2079 = new \concourse\thrift\data\TObject();
                $xfer += $val2079->read($input);
                $val2072[(!is_string($key2078) && !is_integer($key2078)) ? serialize($key2078) : $key2078] = $val2079;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2071) && !is_integer($key2071)) ? serialize($key2071) : $key2071] = $val2072;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2080 => $viter2081)
          {
            $xfer += $output->writeI64($kiter2080);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2081));
              {
                foreach ($viter2081 as $kiter2082 => $viter2083)
                {
                  $xfer += $output->writeString($kiter2082);
                  $xfer += $viter2083->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCcl_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2084 = 0;
            $_etype2087 = 0;
            $xfer += $input->readListBegin($_etype2087, $_size2084);
            for ($_i2088 = 0; $_i2088 < $_size2084; ++$_i2088)
            {
              $elem2089 = null;
              $xfer += $input->readString($elem2089);
              $this->keys []= $elem2089;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCcl_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2090)
          {
            $xfer += $output->writeString($iter2090);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2091 = 0;
            $_ktype2092 = 0;
            $_vtype2093 = 0;
            $xfer += $input->readMapBegin($_ktype2092, $_vtype2093, $_size2091);
            for ($_i2095 = 0; $_i2095 < $_size2091; ++$_i2095)
            {
              $key2096 = 0;
              $val2097 = array();
              $xfer += $input->readI64($key2096);
              $val2097 = array();
              $_size2098 = 0;
              $_ktype2099 = 0;
              $_vtype2100 = 0;
              $xfer += $input->readMapBegin($_ktype2099, $_vtype2100, $_size2098);
              for ($_i2102 = 0; $_i2102 < $_size2098; ++$_i2102)
              {
                $key2103 = '';
                $val2104 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2103);
                $val2104 = new \concourse\thrift\data\TObject();
                $xfer += $val2104->read($input);
                $val2097[(!is_string($key2103) && !is_integer($key2103)) ? serialize($key2103) : $key2103] = $val2104;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2096) && !is_integer($key2096)) ? serialize($key2096) : $key2096] = $val2097;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2105 => $viter2106)
          {
            $xfer += $output->writeI64($kiter2105);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2106));
              {
                foreach ($viter2106 as $kiter2107 => $viter2108)
                {
                  $xfer += $output->writeString($kiter2107);
                  $xfer += $viter2108->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2109 = 0;
            $_etype2112 = 0;
            $xfer += $input->readListBegin($_etype2112, $_size2109);
            for ($_i2113 = 0; $_i2113 < $_size2109; ++$_i2113)
            {
              $elem2114 = null;
              $xfer += $input->readString($elem2114);
              $this->keys []= $elem2114;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2115)
          {
            $xfer += $output->writeString($iter2115);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2116 = 0;
            $_ktype2117 = 0;
            $_vtype2118 = 0;
            $xfer += $input->readMapBegin($_ktype2117, $_vtype2118, $_size2116);
            for ($_i2120 = 0; $_i2120 < $_size2116; ++$_i2120)
            {
              $key2121 = 0;
              $val2122 = array();
              $xfer += $input->readI64($key2121);
              $val2122 = array();
              $_size2123 = 0;
              $_ktype2124 = 0;
              $_vtype2125 = 0;
              $xfer += $input->readMapBegin($_ktype2124, $_vtype2125, $_size2123);
              for ($_i2127 = 0; $_i2127 < $_size2123; ++$_i2127)
              {
                $key2128 = '';
                $val2129 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2128);
                $val2129 = new \concourse\thrift\data\TObject();
                $xfer += $val2129->read($input);
                $val2122[(!is_string($key2128) && !is_integer($key2128)) ? serialize($key2128) : $key2128] = $val2129;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2121) && !is_integer($key2121)) ? serialize($key2121) : $key2121] = $val2122;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2130 => $viter2131)
          {
            $xfer += $output->writeI64($kiter2130);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2131));
              {
                foreach ($viter2131 as $kiter2132 => $viter2133)
                {
                  $xfer += $output->writeString($kiter2132);
                  $xfer += $viter2133->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2134 = 0;
            $_etype2137 = 0;
            $xfer += $input->readListBegin($_etype2137, $_size2134);
            for ($_i2138 = 0; $_i2138 < $_size2134; ++$_i2138)
            {
              $elem2139 = null;
              $xfer += $input->readString($elem2139);
              $this->keys []= $elem2139;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2140)
          {
            $xfer += $output->writeString($iter2140);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2141 = 0;
            $_ktype2142 = 0;
            $_vtype2143 = 0;
            $xfer += $input->readMapBegin($_ktype2142, $_vtype2143, $_size2141);
            for ($_i2145 = 0; $_i2145 < $_size2141; ++$_i2145)
            {
              $key2146 = 0;
              $val2147 = array();
              $xfer += $input->readI64($key2146);
              $val2147 = array();
              $_size2148 = 0;
              $_ktype2149 = 0;
              $_vtype2150 = 0;
              $xfer += $input->readMapBegin($_ktype2149, $_vtype2150, $_size2148);
              for ($_i2152 = 0; $_i2152 < $_size2148; ++$_i2152)
              {
                $key2153 = '';
                $val2154 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2153);
                $val2154 = new \concourse\thrift\data\TObject();
                $xfer += $val2154->read($input);
                $val2147[(!is_string($key2153) && !is_integer($key2153)) ? serialize($key2153) : $key2153] = $val2154;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2146) && !is_integer($key2146)) ? serialize($key2146) : $key2146] = $val2147;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2155 => $viter2156)
          {
            $xfer += $output->writeI64($kiter2155);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2156));
              {
                foreach ($viter2156 as $kiter2157 => $viter2158)
                {
                  $xfer += $output->writeString($kiter2157);
                  $xfer += $viter2158->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2159 = 0;
            $_etype2162 = 0;
            $xfer += $input->readListBegin($_etype2162, $_size2159);
            for ($_i2163 = 0; $_i2163 < $_size2159; ++$_i2163)
            {
              $elem2164 = null;
              $xfer += $input->readString($elem2164);
              $this->keys []= $elem2164;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2165)
          {
            $xfer += $output->writeString($iter2165);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2166 = 0;
            $_ktype2167 = 0;
            $_vtype2168 = 0;
            $xfer += $input->readMapBegin($_ktype2167, $_vtype2168, $_size2166);
            for ($_i2170 = 0; $_i2170 < $_size2166; ++$_i2170)
            {
              $key2171 = 0;
              $val2172 = array();
              $xfer += $input->readI64($key2171);
              $val2172 = array();
              $_size2173 = 0;
              $_ktype2174 = 0;
              $_vtype2175 = 0;
              $xfer += $input->readMapBegin($_ktype2174, $_vtype2175, $_size2173);
              for ($_i2177 = 0; $_i2177 < $_size2173; ++$_i2177)
              {
                $key2178 = '';
                $val2179 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2178);
                $val2179 = new \concourse\thrift\data\TObject();
                $xfer += $val2179->read($input);
                $val2172[(!is_string($key2178) && !is_integer($key2178)) ? serialize($key2178) : $key2178] = $val2179;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2171) && !is_integer($key2171)) ? serialize($key2171) : $key2171] = $val2172;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2180 => $viter2181)
          {
            $xfer += $output->writeI64($kiter2180);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2181));
              {
                foreach ($viter2181 as $kiter2182 => $viter2183)
                {
                  $xfer += $output->writeString($kiter2182);
                  $xfer += $viter2183->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2184 = 0;
            $_etype2187 = 0;
            $xfer += $input->readListBegin($_etype2187, $_size2184);
            for ($_i2188 = 0; $_i2188 < $_size2184; ++$_i2188)
            {
              $elem2189 = null;
              $xfer += $input->readString($elem2189);
              $this->keys []= $elem2189;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2190)
          {
            $xfer += $output->writeString($iter2190);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\concourse\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2191 = 0;
            $_ktype2192 = 0;
            $_vtype2193 = 0;
            $xfer += $input->readMapBegin($_ktype2192, $_vtype2193, $_size2191);
            for ($_i2195 = 0; $_i2195 < $_size2191; ++$_i2195)
            {
              $key2196 = 0;
              $val2197 = array();
              $xfer += $input->readI64($key2196);
              $val2197 = array();
              $_size2198 = 0;
              $_ktype2199 = 0;
              $_vtype2200 = 0;
              $xfer += $input->readMapBegin($_ktype2199, $_vtype2200, $_size2198);
              for ($_i2202 = 0; $_i2202 < $_size2198; ++$_i2202)
              {
                $key2203 = '';
                $val2204 = new \concourse\thrift\data\TObject();
                $xfer += $input->readString($key2203);
                $val2204 = new \concourse\thrift\data\TObject();
                $xfer += $val2204->read($input);
                $val2197[(!is_string($key2203) && !is_integer($key2203)) ? serialize($key2203) : $key2203] = $val2204;
              }
              $xfer += $input->readMapEnd();
              $this->success[(!is_string($key2196) && !is_integer($key2196)) ? serialize($key2196) : $key2196] = $val2197;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2205 => $viter2206)
          {
            $xfer += $output->writeI64($kiter2205);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter2206));
              {
                foreach ($viter2206 as $kiter2207 => $viter2208)
                {
                  $xfer += $output->writeString($kiter2207);
                  $xfer += $viter2208->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTime_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTime_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 4);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2209 = 0;
            $_etype2212 = 0;
            $xfer += $input->readListBegin($_etype2212, $_size2209);
            for ($_i2213 = 0; $_i2213 < $_size2209; ++$_i2213)
            {
              $elem2214 = null;
              $xfer += $input->readI64($elem2214);
              $this->records []= $elem2214;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2215)
          {
            $xfer += $output->writeI64($iter2215);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 2);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecords_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecords_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2216 = 0;
            $_etype2219 = 0;
            $xfer += $input->readListBegin($_etype2219, $_size2216);
            for ($_i2220 = 0; $_i2220 < $_size2216; ++$_i2220)
            {
              $elem2221 = null;
              $xfer += $input->readI64($elem2221);
              $this->records []= $elem2221;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2222)
          {
            $xfer += $output->writeI64($iter2222);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 3);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTime_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2223 = 0;
            $_etype2226 = 0;
            $xfer += $input->readListBegin($_etype2226, $_size2223);
            for ($_i2227 = 0; $_i2227 < $_size2223; ++$_i2227)
            {
              $elem2228 = null;
              $xfer += $input->readI64($elem2228);
              $this->records []= $elem2228;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTimestr_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2229)
          {
            $xfer += $output->writeI64($iter2229);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 3);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTimestr_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCriteria_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCriteria_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2230 = 0;
            $_etype2233 = 0;
            $xfer += $input->readSetBegin($_etype2233, $_size2230);
            for ($_i2234 = 0; $_i2234 < $_size2230; ++$_i2234)
            {
              $elem2235 = null;
              $xfer += $input->readI64($elem2235);
              if (is_scalar($elem2235)) {
                $this->success []= $elem2235;
              } else {
                $this->success []= $elem2235;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2236 => $iter2237)
          {
            if (is_scalar($iter2237)) {
            $xfer += $output->writeI64($iter2236);
            } else {
            $xfer += $output->writeI64($iter2237);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCcl_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2238 = 0;
            $_etype2241 = 0;
            $xfer += $input->readSetBegin($_etype2241, $_size2238);
            for ($_i2242 = 0; $_i2242 < $_size2238; ++$_i2242)
            {
              $elem2243 = null;
              $xfer += $input->readI64($elem2243);
              if (is_scalar($elem2243)) {
                $this->success []= $elem2243;
              } else {
                $this->success []= $elem2243;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2244 => $iter2245)
          {
            if (is_scalar($iter2245)) {
            $xfer += $output->writeI64($iter2244);
            } else {
            $xfer += $output->writeI64($iter2245);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValues_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2246 = 0;
            $_etype2249 = 0;
            $xfer += $input->readListBegin($_etype2249, $_size2246);
            for ($_i2250 = 0; $_i2250 < $_size2246; ++$_i2250)
            {
              $elem2251 = null;
              $elem2251 = new \concourse\thrift\data\TObject();
              $xfer += $elem2251->read($input);
              $this->values []= $elem2251;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValues_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2252)
          {
            $xfer += $iter2252->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValues_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2253 = 0;
            $_etype2256 = 0;
            $xfer += $input->readSetBegin($_etype2256, $_size2253);
            for ($_i2257 = 0; $_i2257 < $_size2253; ++$_i2257)
            {
              $elem2258 = null;
              $xfer += $input->readI64($elem2258);
              if (is_scalar($elem2258)) {
                $this->success []= $elem2258;
              } else {
                $this->success []= $elem2258;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValues_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2259 => $iter2260)
          {
            if (is_scalar($iter2260)) {
            $xfer += $output->writeI64($iter2259);
            } else {
            $xfer += $output->writeI64($iter2260);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2261 = 0;
            $_etype2264 = 0;
            $xfer += $input->readListBegin($_etype2264, $_size2261);
            for ($_i2265 = 0; $_i2265 < $_size2261; ++$_i2265)
            {
              $elem2266 = null;
              $elem2266 = new \concourse\thrift\data\TObject();
              $xfer += $elem2266->read($input);
              $this->values []= $elem2266;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2267)
          {
            $xfer += $iter2267->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTime_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2268 = 0;
            $_etype2271 = 0;
            $xfer += $input->readSetBegin($_etype2271, $_size2268);
            for ($_i2272 = 0; $_i2272 < $_size2268; ++$_i2272)
            {
              $elem2273 = null;
              $xfer += $input->readI64($elem2273);
              if (is_scalar($elem2273)) {
                $this->success []= $elem2273;
              } else {
                $this->success []= $elem2273;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2274 => $iter2275)
          {
            if (is_scalar($iter2275)) {
            $xfer += $output->writeI64($iter2274);
            } else {
            $xfer += $output->writeI64($iter2275);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2276 = 0;
            $_etype2279 = 0;
            $xfer += $input->readListBegin($_etype2279, $_size2276);
            for ($_i2280 = 0; $_i2280 < $_size2276; ++$_i2280)
            {
              $elem2281 = null;
              $elem2281 = new \concourse\thrift\data\TObject();
              $xfer += $elem2281->read($input);
              $this->values []= $elem2281;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2282)
          {
            $xfer += $iter2282->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 4);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTimestr_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2283 = 0;
            $_etype2286 = 0;
            $xfer += $input->readSetBegin($_etype2286, $_size2283);
            for ($_i2287 = 0; $_i2287 < $_size2283; ++$_i2287)
            {
              $elem2288 = null;
              $xfer += $input->readI64($elem2288);
              if (is_scalar($elem2288)) {
                $this->success []= $elem2288;
              } else {
                $this->success []= $elem2288;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2289 => $iter2290)
          {
            if (is_scalar($iter2290)) {
            $xfer += $output->writeI64($iter2289);
            } else {
            $xfer += $output->writeI64($iter2290);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValues_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2291 = 0;
            $_etype2294 = 0;
            $xfer += $input->readListBegin($_etype2294, $_size2291);
            for ($_i2295 = 0; $_i2295 < $_size2291; ++$_i2295)
            {
              $elem2296 = null;
              $elem2296 = new \concourse\thrift\data\TObject();
              $xfer += $elem2296->read($input);
              $this->values []= $elem2296;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValues_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2297)
          {
            $xfer += $iter2297->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValues_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2298 = 0;
            $_etype2301 = 0;
            $xfer += $input->readSetBegin($_etype2301, $_size2298);
            for ($_i2302 = 0; $_i2302 < $_size2298; ++$_i2302)
            {
              $elem2303 = null;
              $xfer += $input->readI64($elem2303);
              if (is_scalar($elem2303)) {
                $this->success []= $elem2303;
              } else {
                $this->success []= $elem2303;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValues_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2304 => $iter2305)
          {
            if (is_scalar($iter2305)) {
            $xfer += $output->writeI64($iter2304);
            } else {
            $xfer += $output->writeI64($iter2305);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2306 = 0;
            $_etype2309 = 0;
            $xfer += $input->readListBegin($_etype2309, $_size2306);
            for ($_i2310 = 0; $_i2310 < $_size2306; ++$_i2310)
            {
              $elem2311 = null;
              $elem2311 = new \concourse\thrift\data\TObject();
              $xfer += $elem2311->read($input);
              $this->values []= $elem2311;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2312)
          {
            $xfer += $iter2312->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTime_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2313 = 0;
            $_etype2316 = 0;
            $xfer += $input->readSetBegin($_etype2316, $_size2313);
            for ($_i2317 = 0; $_i2317 < $_size2313; ++$_i2317)
            {
              $elem2318 = null;
              $xfer += $input->readI64($elem2318);
              if (is_scalar($elem2318)) {
                $this->success []= $elem2318;
              } else {
                $this->success []= $elem2318;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2319 => $iter2320)
          {
            if (is_scalar($iter2320)) {
            $xfer += $output->writeI64($iter2319);
            } else {
            $xfer += $output->writeI64($iter2320);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \concourse\thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\concourse\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size2321 = 0;
            $_etype2324 = 0;
            $xfer += $input->readListBegin($_etype2324, $_size2321);
            for ($_i2325 = 0; $_i2325 < $_size2321; ++$_i2325)
            {
              $elem2326 = null;
              $elem2326 = new \concourse\thrift\data\TObject();
              $xfer += $elem2326->read($input);
              $this->values []= $elem2326;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter2327)
          {
            $xfer += $iter2327->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 4);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTimestr_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2328 = 0;
            $_etype2331 = 0;
            $xfer += $input->readSetBegin($_etype2331, $_size2328);
            for ($_i2332 = 0; $_i2332 < $_size2328; ++$_i2332)
            {
              $elem2333 = null;
              $xfer += $input->readI64($elem2333);
              if (is_scalar($elem2333)) {
                $this->success []= $elem2333;
              } else {
                $this->success []= $elem2333;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2334 => $iter2335)
          {
            if (is_scalar($iter2335)) {
            $xfer += $output->writeI64($iter2334);
            } else {
            $xfer += $output->writeI64($iter2335);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_search_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $query = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'query',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['query'])) {
        $this->query = $vals['query'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_search_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->query);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_search_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query !== null) {
      $xfer += $output->writeFieldBegin('query', TType::STRING, 2);
      $xfer += $output->writeString($this->query);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_search_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_search_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size2336 = 0;
            $_etype2339 = 0;
            $xfer += $input->readSetBegin($_etype2339, $_size2336);
            for ($_i2340 = 0; $_i2340 < $_size2336; ++$_i2340)
            {
              $elem2341 = null;
              $xfer += $input->readI64($elem2341);
              if (is_scalar($elem2341)) {
                $this->success []= $elem2341;
              } else {
                $this->success []= $elem2341;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_search_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter2342 => $iter2343)
          {
            if (is_scalar($iter2343)) {
            $xfer += $output->writeI64($iter2342);
            } else {
            $xfer += $output->writeI64($iter2343);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2344 = 0;
            $_etype2347 = 0;
            $xfer += $input->readListBegin($_etype2347, $_size2344);
            for ($_i2348 = 0; $_i2348 < $_size2344; ++$_i2348)
            {
              $elem2349 = null;
              $xfer += $input->readString($elem2349);
              $this->keys []= $elem2349;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2350 = 0;
            $_etype2353 = 0;
            $xfer += $input->readListBegin($_etype2353, $_size2350);
            for ($_i2354 = 0; $_i2354 < $_size2350; ++$_i2354)
            {
              $elem2355 = null;
              $xfer += $input->readI64($elem2355);
              $this->records []= $elem2355;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2356)
          {
            $xfer += $output->writeString($iter2356);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2357)
          {
            $xfer += $output->writeI64($iter2357);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2358 = 0;
            $_etype2361 = 0;
            $xfer += $input->readListBegin($_etype2361, $_size2358);
            for ($_i2362 = 0; $_i2362 < $_size2358; ++$_i2362)
            {
              $elem2363 = null;
              $xfer += $input->readString($elem2363);
              $this->keys []= $elem2363;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2364 = 0;
            $_etype2367 = 0;
            $xfer += $input->readListBegin($_etype2367, $_size2364);
            for ($_i2368 = 0; $_i2368 < $_size2364; ++$_i2368)
            {
              $elem2369 = null;
              $xfer += $input->readI64($elem2369);
              $this->records []= $elem2369;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2370)
          {
            $xfer += $output->writeString($iter2370);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2371)
          {
            $xfer += $output->writeI64($iter2371);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2372 = 0;
            $_etype2375 = 0;
            $xfer += $input->readListBegin($_etype2375, $_size2372);
            for ($_i2376 = 0; $_i2376 < $_size2372; ++$_i2376)
            {
              $elem2377 = null;
              $xfer += $input->readString($elem2377);
              $this->keys []= $elem2377;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2378)
          {
            $xfer += $output->writeString($iter2378);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2379 = 0;
            $_etype2382 = 0;
            $xfer += $input->readListBegin($_etype2382, $_size2379);
            for ($_i2383 = 0; $_i2383 < $_size2379; ++$_i2383)
            {
              $elem2384 = null;
              $xfer += $input->readString($elem2384);
              $this->keys []= $elem2384;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2385)
          {
            $xfer += $output->writeString($iter2385);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2386 = 0;
            $_etype2389 = 0;
            $xfer += $input->readListBegin($_etype2389, $_size2386);
            for ($_i2390 = 0; $_i2390 < $_size2386; ++$_i2390)
            {
              $elem2391 = null;
              $xfer += $input->readI64($elem2391);
              $this->records []= $elem2391;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2392)
          {
            $xfer += $output->writeI64($iter2392);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2393 = 0;
            $_etype2396 = 0;
            $xfer += $input->readListBegin($_etype2396, $_size2393);
            for ($_i2397 = 0; $_i2397 < $_size2393; ++$_i2397)
            {
              $elem2398 = null;
              $xfer += $input->readI64($elem2398);
              $this->records []= $elem2398;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2399)
          {
            $xfer += $output->writeI64($iter2399);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2400 = 0;
            $_etype2403 = 0;
            $xfer += $input->readListBegin($_etype2403, $_size2400);
            for ($_i2404 = 0; $_i2404 < $_size2400; ++$_i2404)
            {
              $elem2405 = null;
              $xfer += $input->readI64($elem2405);
              $this->records []= $elem2405;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2406)
          {
            $xfer += $output->writeI64($iter2406);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2407 = 0;
            $_ktype2408 = 0;
            $_vtype2409 = 0;
            $xfer += $input->readMapBegin($_ktype2408, $_vtype2409, $_size2407);
            for ($_i2411 = 0; $_i2411 < $_size2407; ++$_i2411)
            {
              $key2412 = 0;
              $val2413 = false;
              $xfer += $input->readI64($key2412);
              $xfer += $input->readBool($val2413);
              $this->success[(!is_string($key2412) && !is_integer($key2412)) ? serialize($key2412) : $key2412] = $val2413;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter2414 => $viter2415)
          {
            $xfer += $output->writeI64($kiter2414);
            $xfer += $output->writeBool($viter2415);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyAndSwap_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $expected = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $replacement = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'expected',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'replacement',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['expected'])) {
        $this->expected = $vals['expected'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['replacement'])) {
        $this->replacement = $vals['replacement'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyAndSwap_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->expected = new \concourse\thrift\data\TObject();
            $xfer += $this->expected->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->replacement = new \concourse\thrift\data\TObject();
            $xfer += $this->replacement->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyAndSwap_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expected !== null) {
      if (!is_object($this->expected)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('expected', TType::STRUCT, 2);
      $xfer += $this->expected->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replacement !== null) {
      if (!is_object($this->replacement)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('replacement', TType::STRUCT, 4);
      $xfer += $this->replacement->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyAndSwap_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyAndSwap_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyAndSwap_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyOrSet_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyOrSet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyOrSet_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyOrSet_result {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyOrSet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyOrSet_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrAddKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \concourse\thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrAddKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \concourse\thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrAddKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrAddKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\DuplicateEntryException
   */
  public $ex3 = null;
  /**
   * @var \concourse\thrift\exceptions\InvalidArgumentException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\DuplicateEntryException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrAddKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\DuplicateEntryException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \concourse\thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrAddKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCriteriaJson_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $json = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCriteriaJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \concourse\thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCriteriaJson_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 2);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCriteriaJson_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\DuplicateEntryException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\DuplicateEntryException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCriteriaJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\DuplicateEntryException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCriteriaJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCclJson_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $json = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCclJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCclJson_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 2);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCclJson_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;
  /**
   * @var \concourse\thrift\exceptions\DuplicateEntryException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\DuplicateEntryException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCclJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \concourse\thrift\exceptions\DuplicateEntryException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCclJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerEnvironment_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerEnvironment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->token = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerEnvironment_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 2);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerEnvironment_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerEnvironment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerEnvironment_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerVersion_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ConcourseService_getServerVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerVersion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerVersion_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerVersion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_time_args {
  static $_TSPEC;

  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_time_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->token = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_time_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 2);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_time_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_time_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_time_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_timePhrase_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $phrase = null;
  /**
   * @var \concourse\thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \concourse\thrift\shared\TransactionToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phrase',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['phrase'])) {
        $this->phrase = $vals['phrase'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_timePhrase_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phrase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \concourse\thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->token = new \concourse\thrift\shared\TransactionToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_timePhrase_args');
    if ($this->phrase !== null) {
      $xfer += $output->writeFieldBegin('phrase', TType::STRING, 1);
      $xfer += $output->writeString($this->phrase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 3);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_timePhrase_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \concourse\thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \concourse\thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \concourse\thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\concourse\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_timePhrase_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \concourse\thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \concourse\thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \concourse\thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_timePhrase_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



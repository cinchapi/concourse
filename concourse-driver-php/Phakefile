<?php
// Build tasks for concourse-driver-php
// See https://github.com/jaz303/phake for more information

/**
 * Recursively remove a directory
 *
 * @param  string $dir the path to the directory
 */
function remove_directory($dir) {
    if(!file_exists($dir)){
        return true;
    }
    else if(!is_dir($dir)){
        return unlink($dir);
    }
    foreach(scandir($dir) as $entry){
        if($entry == "." || $entry == ".."){
            continue;
        }
        remove_directory($dir . DIRECTORY_SEPARATOR . $entry);
    }
    rmdir($dir);
}

/**
 * Recursively check the syntax of all the PHP files in a directory.
 *
 * @param  string $dir the absolute path to the directory
 * throws Exception if a file has invalid syntax
 */
function check_php_syntax($dir) {
    foreach(scandir($dir) as $entry) {
        if($entry == "." || $entry == ".." || in_array($entry, array('vendor'))){
            continue;
        }
        else {
            $entry = $dir . DIRECTORY_SEPARATOR . $entry;
            if(is_dir($entry)){
                check_php_syntax($entry);
            }
            else if(@pathinfo($entry)['extension'] == "php"){
                exec("php -l '$entry'", $output, $status);
                if($status == 0) {
                    echo implode(PHP_EOL, $output).PHP_EOL;
                }
                else {
                    throw new Exception($output[1]);
                }
            }
        }
    }
}

desc("Remove all the build files.");
task('clean', function(){
    chdir(dirname(__FILE__));
    remove_directory("build");
});

desc("Run the unit tests.");
task('test', function($args){
    $class = $args['class'];
    $extra = "";
    if(!empty($class)) {
        $class = explode('/', $class);
        $class = $class[count($class)-1];
        $class = explode(".php", $class)[0];
        $extra.= " --filter $class";
    }
    $extra = trim($extra);
    system("./vendor/phpunit/phpunit/phpunit $extra tests/", $status);
    if($status != 0) {
        throw new Exception("Unit test failure!");
    }
});

desc("Generate documentation.");
task('docs', function(){
    system('./vendor/apigen/apigen/bin/apigen generate -d build/docs -s src --exclude=thrift/data/* --exclude=thrift/ConcourseService.php --title="Concourse PHP Driver" --template-theme=bootstrap');
});

desc("Check syntax.");
task('check-syntax', function() {
    check_php_syntax(dirname(__FILE__));
});

desc("Upload the code to the packagist repo.");
task('upload-packagist', 'check-syntax', 'test', 'docs', function($args) {
    chdir(dirname(__FILE__));
    $owd = getcwd();
    $remote_dir = 'build/remote';

    // The relative paths to copy to the $remote_dir. To rename a path in the
    // $remote_dir, list it as a map from (actual path => desired remote path)
    $paths_to_copy = [
    'src',
    'composer.json',
    'composer.lock',
    'README.md',
    'build/docs' => 'docs',
    '../LICENSE' => 'LICENSE.txt'
    ];

    // The version can be passed to the build if phake is invoked with
    // version=<version>. If no version is passed, then phake will get the
    // version itself.
    $version = $args['version'];
    if(empty($version)){
        exec("../version.sh", $version);
        $version = $version[0];
    }

    // Figure out the branch from which we're building.
    exec('git rev-parse --abbrev-ref HEAD', $branch);
    $branch = $branch[0];

    // Checkout the remote mirror and copy over applicable files
    remove_directory($remote_dir);
    system("git clone git@github.com:cinchapi/concourse-php-packagist.git $remote_dir");
    chdir($remote_dir);
    $cwd = getcwd();
    if(substr_compare($cwd, $remote_dir, -strlen($remote_dir)) !== 0) {
        throw new Exception("Cannot proceed because I am not in $remote_dir");
    }
    system("git checkout $branch 2>/dev/null", $status);
    if($status != 0){ // the branch doesn't exist on the remote, so create it
        system("git checkout -b $branch");
    }
    system("rm -rf *");
    chdir($owd);
    foreach($paths_to_copy as $local => $remote) {
        if(is_integer($local)){
            $local = $remote;
        }
        $remote = $remote_dir.DIRECTORY_SEPARATOR.$remote;
        system("cp -R $local $remote");
    }
    chdir($remote_dir);
    system("git add -A .");
    system("git commit -m '[auto-build] packagist upload for concourse-php-driver-$version'");
    //TODO if the branch is master, then create a tag
    system("git push origin HEAD");
});

desc("The default task.");
task('default', 'test');
